import 'ts-node/register/transpile-only';
import * as fs from 'fs';
import * as path from 'path';

const ROOT = path.resolve(__dirname, '../../../../');
const PKG_ROOT = path.resolve(__dirname, '../..');
const UTILS_DIR = path.join(PKG_ROOT, 'utils');

function ensureDir(dir: string) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

export async function extractUtils(): Promise<void> {
  ensureDir(UTILS_DIR);
  
  // Copy protocolUtils.ts (contains Currency definitions and hash functions)
  const sourceFile = path.join(ROOT, 'utils', 'protocolUtils.ts');
  const destFile = path.join(UTILS_DIR, 'protocolUtils.ts');
  
  // Read and process the file to remove any local imports that won't work in the package
  let content = fs.readFileSync(sourceFile, 'utf8');
  
  // Replace relative imports with package-relative imports if needed
  // For now, the protocolUtils.ts seems self-contained with only ethers imports
  
  fs.writeFileSync(destFile, content);
  
  // Create index file for clean exports
  const indexContent = `// Auto-generated by extract-all.ts
// Protocol utilities export

export * from './protocolUtils';

// Re-export commonly used items for convenience
export { 
  Currency, 
  getKeccak256Hash, 
  getCurrencyCodeFromHash,
  calculateIntentHash
} from './protocolUtils';
`;
  
  fs.writeFileSync(
    path.join(UTILS_DIR, 'index.ts'),
    indexContent
  );
  
  console.log(`âœ… Utils written to ${UTILS_DIR}`);
}
