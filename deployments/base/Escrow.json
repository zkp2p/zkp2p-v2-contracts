{
  "address": "0xCA38607D85E8F6294Dc10728669605E6664C2D70",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intentExpirationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sustainabilityFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sustainabilityFeeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "acceptAllPaymentVerifiers",
          "type": "bool"
        }
      ],
      "name": "AcceptAllPaymentVerifiersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "DepositClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newConversionRate",
          "type": "uint256"
        }
      ],
      "name": "DepositConversionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "name": "DepositCurrencyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IEscrow.Range",
          "name": "intentAmountRange",
          "type": "tuple"
        }
      ],
      "name": "DepositReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "payeeDetailsHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "intentGatingService",
          "type": "address"
        }
      ],
      "name": "DepositVerifierAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "intentExpirationPeriod",
          "type": "uint256"
        }
      ],
      "name": "IntentExpirationPeriodSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sustainabilityFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "verifierFee",
          "type": "uint256"
        }
      ],
      "name": "IntentFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "name": "IntentPruned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "fiatCurrency",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "IntentSignaled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDepositAmount",
          "type": "uint256"
        }
      ],
      "name": "MinDepositAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeShare",
          "type": "uint256"
        }
      ],
      "name": "PaymentVerifierAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeShare",
          "type": "uint256"
        }
      ],
      "name": "PaymentVerifierFeeShareUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "PaymentVerifierRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "SustainabilityFeeRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SustainabilityFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptAllPaymentVerifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountIntent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeShare",
          "type": "uint256"
        }
      ],
      "name": "addWhitelistedPaymentVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        }
      ],
      "name": "cancelIntent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEscrow.Range",
          "name": "_intentAmountRange",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "_verifiers",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "intentGatingService",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "payeeDetails",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IEscrow.DepositVerifierData[]",
          "name": "_verifierData",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "conversionRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEscrow.Currency[][]",
          "name": "_currencies",
          "type": "tuple[][]"
        }
      ],
      "name": "createDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositCurrencies",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "depositCurrencyConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositVerifierData",
      "outputs": [
        {
          "internalType": "address",
          "name": "intentGatingService",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "payeeDetails",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositVerifiers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEscrow.Range",
          "name": "intentAmountRange",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "acceptingIntents",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "remainingDeposits",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outstandingIntentAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_paymentProof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        }
      ],
      "name": "fulfillIntent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountDeposits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "depositor",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "min",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "max",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IEscrow.Range",
                  "name": "intentAmountRange",
                  "type": "tuple"
                },
                {
                  "internalType": "bool",
                  "name": "acceptingIntents",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingDeposits",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "outstandingIntentAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "intentHashes",
                  "type": "bytes32[]"
                }
              ],
              "internalType": "struct IEscrow.Deposit",
              "name": "deposit",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "verifier",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "intentGatingService",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "payeeDetails",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct IEscrow.DepositVerifierData",
                  "name": "verificationData",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "code",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "conversionRate",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IEscrow.Currency[]",
                  "name": "currencies",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IEscrow.VerifierDataView[]",
              "name": "verifiers",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IEscrow.DepositView[]",
          "name": "depositArray",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountIntent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "intentHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "depositId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentVerifier",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "fiatCurrency",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "conversionRate",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IEscrow.Intent",
              "name": "intent",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "depositId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "depositor",
                      "type": "address"
                    },
                    {
                      "internalType": "contract IERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "min",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "max",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IEscrow.Range",
                      "name": "intentAmountRange",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bool",
                      "name": "acceptingIntents",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingDeposits",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "outstandingIntentAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "intentHashes",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct IEscrow.Deposit",
                  "name": "deposit",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "availableLiquidity",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "verifier",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "intentGatingService",
                          "type": "address"
                        },
                        {
                          "internalType": "string",
                          "name": "payeeDetails",
                          "type": "string"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct IEscrow.DepositVerifierData",
                      "name": "verificationData",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bytes32",
                          "name": "code",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "uint256",
                          "name": "conversionRate",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IEscrow.Currency[]",
                      "name": "currencies",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct IEscrow.VerifierDataView[]",
                  "name": "verifiers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IEscrow.DepositView",
              "name": "deposit",
              "type": "tuple"
            }
          ],
          "internalType": "struct IEscrow.IntentView",
          "name": "intentView",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getDeposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "depositor",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "min",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "max",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IEscrow.Range",
                  "name": "intentAmountRange",
                  "type": "tuple"
                },
                {
                  "internalType": "bool",
                  "name": "acceptingIntents",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingDeposits",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "outstandingIntentAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "intentHashes",
                  "type": "bytes32[]"
                }
              ],
              "internalType": "struct IEscrow.Deposit",
              "name": "deposit",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "verifier",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "intentGatingService",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "payeeDetails",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct IEscrow.DepositVerifierData",
                  "name": "verificationData",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "code",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "conversionRate",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IEscrow.Currency[]",
                  "name": "currencies",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IEscrow.VerifierDataView[]",
              "name": "verifiers",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IEscrow.DepositView",
          "name": "depositView",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_depositIds",
          "type": "uint256[]"
        }
      ],
      "name": "getDepositFromIds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "depositId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "depositor",
                  "type": "address"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "min",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "max",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IEscrow.Range",
                  "name": "intentAmountRange",
                  "type": "tuple"
                },
                {
                  "internalType": "bool",
                  "name": "acceptingIntents",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingDeposits",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "outstandingIntentAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "intentHashes",
                  "type": "bytes32[]"
                }
              ],
              "internalType": "struct IEscrow.Deposit",
              "name": "deposit",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "verifier",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "intentGatingService",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "payeeDetails",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct IEscrow.DepositVerifierData",
                  "name": "verificationData",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "code",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "conversionRate",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IEscrow.Currency[]",
                  "name": "currencies",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IEscrow.VerifierDataView[]",
              "name": "verifiers",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IEscrow.DepositView[]",
          "name": "depositArray",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        }
      ],
      "name": "getIntent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "intentHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "depositId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentVerifier",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "fiatCurrency",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "conversionRate",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IEscrow.Intent",
              "name": "intent",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "depositId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "depositor",
                      "type": "address"
                    },
                    {
                      "internalType": "contract IERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "min",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "max",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IEscrow.Range",
                      "name": "intentAmountRange",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bool",
                      "name": "acceptingIntents",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingDeposits",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "outstandingIntentAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "intentHashes",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct IEscrow.Deposit",
                  "name": "deposit",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "availableLiquidity",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "verifier",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "intentGatingService",
                          "type": "address"
                        },
                        {
                          "internalType": "string",
                          "name": "payeeDetails",
                          "type": "string"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct IEscrow.DepositVerifierData",
                      "name": "verificationData",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bytes32",
                          "name": "code",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "uint256",
                          "name": "conversionRate",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IEscrow.Currency[]",
                      "name": "currencies",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct IEscrow.VerifierDataView[]",
                  "name": "verifiers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IEscrow.DepositView",
              "name": "deposit",
              "type": "tuple"
            }
          ],
          "internalType": "struct IEscrow.IntentView",
          "name": "intentView",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_intentHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "getIntents",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "intentHash",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "depositId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentVerifier",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "fiatCurrency",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "conversionRate",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IEscrow.Intent",
              "name": "intent",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "depositId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "depositor",
                      "type": "address"
                    },
                    {
                      "internalType": "contract IERC20",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "min",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "max",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IEscrow.Range",
                      "name": "intentAmountRange",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bool",
                      "name": "acceptingIntents",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "remainingDeposits",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "outstandingIntentAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "intentHashes",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct IEscrow.Deposit",
                  "name": "deposit",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "availableLiquidity",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "verifier",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "intentGatingService",
                          "type": "address"
                        },
                        {
                          "internalType": "string",
                          "name": "payeeDetails",
                          "type": "string"
                        },
                        {
                          "internalType": "bytes",
                          "name": "data",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct IEscrow.DepositVerifierData",
                      "name": "verificationData",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bytes32",
                          "name": "code",
                          "type": "bytes32"
                        },
                        {
                          "internalType": "uint256",
                          "name": "conversionRate",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IEscrow.Currency[]",
                      "name": "currencies",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct IEscrow.VerifierDataView[]",
                  "name": "verifiers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IEscrow.DepositView",
              "name": "deposit",
              "type": "tuple"
            }
          ],
          "internalType": "struct IEscrow.IntentView[]",
          "name": "intentArray",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getPrunableIntents",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "prunableIntents",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "reclaimedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "intentExpirationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "intents",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentVerifier",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "fiatCurrency",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "paymentVerifierFeeShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        }
      ],
      "name": "releaseFundsToPayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedPaymentVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_intentExpirationPeriod",
          "type": "uint256"
        }
      ],
      "name": "setIntentExpirationPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setSustainabilityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setSustainabilityFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_fiatCurrency",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_gatingServiceSignature",
          "type": "bytes"
        }
      ],
      "name": "signalIntent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sustainabilityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sustainabilityFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_acceptAllPaymentVerifiers",
          "type": "bool"
        }
      ],
      "name": "updateAcceptAllPaymentVerifiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_fiatCurrency",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_newConversionRate",
          "type": "uint256"
        }
      ],
      "name": "updateDepositConversionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feeShare",
          "type": "uint256"
        }
      ],
      "name": "updatePaymentVerifierFeeShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedPaymentVerifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "withdrawDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x755b3114ffd963e617465b7f121bcff4089efa7abb84b2db6b73b934a3078a4b",
  "receipt": {
    "to": null,
    "from": "0x84e113087C97Cd80eA9D78983D4B8Ff61ECa1929",
    "contractAddress": "0xCA38607D85E8F6294Dc10728669605E6664C2D70",
    "transactionIndex": 65,
    "gasUsed": "4892936",
    "logsBloom": "0x
    "blockHash": "0xaca63f501fa085e2d973cfa2fd152dd391ff4f174d89905821a3ba08ccbf508f",
    "transactionHash": "0x755b3114ffd963e617465b7f121bcff4089efa7abb84b2db6b73b934a3078a4b",
    "logs": [
      {
        "transactionIndex": 65,
        "blockNumber": 25303495,
        "transactionHash": "0x755b3114ffd963e617465b7f121bcff4089efa7abb84b2db6b73b934a3078a4b",
        "address": "0xCA38607D85E8F6294Dc10728669605E6664C2D70",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929"
        ],
        "data": "0x",
        "logIndex": 168,
        "blockHash": "0xaca63f501fa085e2d973cfa2fd152dd391ff4f174d89905821a3ba08ccbf508f"
      },
      {
        "transactionIndex": 65,
        "blockNumber": 25303495,
        "transactionHash": "0x755b3114ffd963e617465b7f121bcff4089efa7abb84b2db6b73b934a3078a4b",
        "address": "0xCA38607D85E8F6294Dc10728669605E6664C2D70",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929"
        ],
        "data": "0x",
        "logIndex": 169,
        "blockHash": "0xaca63f501fa085e2d973cfa2fd152dd391ff4f174d89905821a3ba08ccbf508f"
      }
    ],
    "blockNumber": 25303495,
    "cumulativeGasUsed": "15045602",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x84e113087C97Cd80eA9D78983D4B8Ff61ECa1929",
    8453,
    "86400",
    "0",
    "0x0bC26FF515411396DD588Abd6Ef6846E04470227"
  ],
  "numDeployments": 1,
  "solcInputHash": "1b0acf40c949b1fba220fcd148ed12c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intentExpirationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sustainabilityFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sustainabilityFeeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptAllPaymentVerifiers\",\"type\":\"bool\"}],\"name\":\"AcceptAllPaymentVerifiersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"DepositClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newConversionRate\",\"type\":\"uint256\"}],\"name\":\"DepositConversionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"name\":\"DepositCurrencyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IEscrow.Range\",\"name\":\"intentAmountRange\",\"type\":\"tuple\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"payeeDetailsHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"}],\"name\":\"DepositVerifierAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intentExpirationPeriod\",\"type\":\"uint256\"}],\"name\":\"IntentExpirationPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sustainabilityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"verifierFee\",\"type\":\"uint256\"}],\"name\":\"IntentFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"IntentPruned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fiatCurrency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IntentSignaled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"MinDepositAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeShare\",\"type\":\"uint256\"}],\"name\":\"PaymentVerifierAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeShare\",\"type\":\"uint256\"}],\"name\":\"PaymentVerifierFeeShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"PaymentVerifierRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"SustainabilityFeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SustainabilityFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptAllPaymentVerifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountIntent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeShare\",\"type\":\"uint256\"}],\"name\":\"addWhitelistedPaymentVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"}],\"name\":\"cancelIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Range\",\"name\":\"_intentAmountRange\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_verifiers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"payeeDetails\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEscrow.DepositVerifierData[]\",\"name\":\"_verifierData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Currency[][]\",\"name\":\"_currencies\",\"type\":\"tuple[][]\"}],\"name\":\"createDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositCurrencies\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"depositCurrencyConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositVerifierData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"payeeDetails\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositVerifiers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Range\",\"name\":\"intentAmountRange\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"acceptingIntents\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_paymentProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"}],\"name\":\"fulfillIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Range\",\"name\":\"intentAmountRange\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"acceptingIntents\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IEscrow.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"payeeDetails\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEscrow.DepositVerifierData\",\"name\":\"verificationData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Currency[]\",\"name\":\"currencies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IEscrow.VerifierDataView[]\",\"name\":\"verifiers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IEscrow.DepositView[]\",\"name\":\"depositArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountIntent\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"fiatCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Range\",\"name\":\"intentAmountRange\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"acceptingIntents\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IEscrow.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"payeeDetails\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEscrow.DepositVerifierData\",\"name\":\"verificationData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Currency[]\",\"name\":\"currencies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IEscrow.VerifierDataView[]\",\"name\":\"verifiers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IEscrow.DepositView\",\"name\":\"deposit\",\"type\":\"tuple\"}],\"internalType\":\"struct IEscrow.IntentView\",\"name\":\"intentView\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Range\",\"name\":\"intentAmountRange\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"acceptingIntents\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IEscrow.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"payeeDetails\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEscrow.DepositVerifierData\",\"name\":\"verificationData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Currency[]\",\"name\":\"currencies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IEscrow.VerifierDataView[]\",\"name\":\"verifiers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IEscrow.DepositView\",\"name\":\"depositView\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_depositIds\",\"type\":\"uint256[]\"}],\"name\":\"getDepositFromIds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Range\",\"name\":\"intentAmountRange\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"acceptingIntents\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IEscrow.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"payeeDetails\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEscrow.DepositVerifierData\",\"name\":\"verificationData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Currency[]\",\"name\":\"currencies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IEscrow.VerifierDataView[]\",\"name\":\"verifiers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IEscrow.DepositView[]\",\"name\":\"depositArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"}],\"name\":\"getIntent\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"fiatCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Range\",\"name\":\"intentAmountRange\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"acceptingIntents\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IEscrow.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"payeeDetails\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEscrow.DepositVerifierData\",\"name\":\"verificationData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Currency[]\",\"name\":\"currencies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IEscrow.VerifierDataView[]\",\"name\":\"verifiers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IEscrow.DepositView\",\"name\":\"deposit\",\"type\":\"tuple\"}],\"internalType\":\"struct IEscrow.IntentView\",\"name\":\"intentView\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_intentHashes\",\"type\":\"bytes32[]\"}],\"name\":\"getIntents\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"fiatCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Range\",\"name\":\"intentAmountRange\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"acceptingIntents\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"intentHashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IEscrow.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"payeeDetails\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEscrow.DepositVerifierData\",\"name\":\"verificationData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Currency[]\",\"name\":\"currencies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IEscrow.VerifierDataView[]\",\"name\":\"verifiers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IEscrow.DepositView\",\"name\":\"deposit\",\"type\":\"tuple\"}],\"internalType\":\"struct IEscrow.IntentView[]\",\"name\":\"intentArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getPrunableIntents\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"prunableIntents\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"reclaimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intentExpirationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"intents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentVerifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"fiatCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentVerifierFeeShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"}],\"name\":\"releaseFundsToPayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"removeWhitelistedPaymentVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_intentExpirationPeriod\",\"type\":\"uint256\"}],\"name\":\"setIntentExpirationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setSustainabilityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setSustainabilityFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_fiatCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_gatingServiceSignature\",\"type\":\"bytes\"}],\"name\":\"signalIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sustainabilityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sustainabilityFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_acceptAllPaymentVerifiers\",\"type\":\"bool\"}],\"name\":\"updateAcceptAllPaymentVerifiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_fiatCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newConversionRate\",\"type\":\"uint256\"}],\"name\":\"updateDepositConversionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeShare\",\"type\":\"uint256\"}],\"name\":\"updatePaymentVerifierFeeShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedPaymentVerifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addWhitelistedPaymentVerifier(address,uint256)\":{\"params\":{\"_feeShare\":\"The fee share for the payment verifier\",\"_verifier\":\"The payment verifier address to add\"}},\"cancelIntent(bytes32)\":{\"params\":{\"_intentHash\":\"Hash of intent being cancelled\"}},\"createDeposit(address,uint256,(uint256,uint256),address[],(address,string,bytes)[],(bytes32,uint256)[][])\":{\"params\":{\"_amount\":\"The amount of token to deposit\",\"_currencies\":\"The currencies for each verifier that deposit supports\",\"_intentAmountRange\":\"The max and min take amount for each intent\",\"_token\":\"The token to be deposited\",\"_verifierData\":\"The payment verification data for each verifier that deposit supports\",\"_verifiers\":\"The payment verifiers that deposit supports\"}},\"fulfillIntent(bytes,bytes32)\":{\"params\":{\"_intentHash\":\"Identifier of intent being fulfilled\",\"_paymentProof\":\"Payment proof. Can be Groth16 Proof, TLSNotary proof, TLSProxy proof, attestation etc.\"}},\"getPrunableIntents(uint256)\":{\"params\":{\"_depositId\":\"The deposit ID\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"releaseFundsToPayer(bytes32)\":{\"params\":{\"_intentHash\":\"Hash of intent to resolve by releasing the funds\"}},\"removeWhitelistedPaymentVerifier(address)\":{\"params\":{\"_verifier\":\"The payment verifier address to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setIntentExpirationPeriod(uint256)\":{\"params\":{\"_intentExpirationPeriod\":\"New intent expiration period\"}},\"setSustainabilityFee(uint256)\":{\"params\":{\"_fee\":\"The new sustainability fee in precise units (10**18, ie 10% = 1e17)\"}},\"setSustainabilityFeeRecipient(address)\":{\"params\":{\"_feeRecipient\":\"The new fee recipient address\"}},\"signalIntent(uint256,uint256,address,address,bytes32,bytes)\":{\"params\":{\"_amount\":\"The amount of deposit.token the user wants to take\",\"_depositId\":\"The ID of the deposit the taker intends to use for taking onchain liquidity\",\"_fiatCurrency\":\"The currency code that the user is paying in offchain\",\"_gatingServiceSignature\":\"The signature from the deposit's gating service on intent parameters\",\"_to\":\"Address to forward funds to (can be same as owner)\",\"_verifier\":\"The payment verifier corresponding to the payment service the user is going to pay with                                   offchain (e.g. Venmo, Revolut, Mercado, etc.)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAcceptAllPaymentVerifiers(bool)\":{\"params\":{\"_acceptAllPaymentVerifiers\":\"True to accept all payment verifiers, false to require whitelisting\"}},\"updateDepositConversionRate(uint256,address,bytes32,uint256)\":{\"params\":{\"_depositId\":\"The deposit ID\",\"_fiatCurrency\":\"The fiat currency code to update the conversion rate for\",\"_newConversionRate\":\"The new conversion rate. Must be greater than 0.\",\"_verifier\":\"The payment verifier address to update the conversion rate for\"}},\"updatePaymentVerifierFeeShare(address,uint256)\":{\"params\":{\"_feeShare\":\"The new fee share\",\"_verifier\":\"The payment verifier address to update\"}},\"withdrawDeposit(uint256)\":{\"params\":{\"_depositId\":\"DepositId the depositor is attempting to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWhitelistedPaymentVerifier(address,uint256)\":{\"notice\":\"GOVERNANCE ONLY: Adds a payment verifier to the whitelist.\"},\"cancelIntent(bytes32)\":{\"notice\":\"Only callable by the originator of the intent. Cancels an outstanding intent. Deposit state is  updated to reflect the cancelled intent.\"},\"createDeposit(address,uint256,(uint256,uint256),address[],(address,string,bytes)[],(bytes32,uint256)[][])\":{\"notice\":\"Creates a deposit entry by locking liquidity in the escrow contract that can be taken by signaling intents. This function will  not add to previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount of deposit token. Every deposit specifies the payment services it supports by specifying their corresponding verifier addresses and  verification data, supported currencies and their conversion rates for each payment service. Note that the order of the verifiers, verification data, and currency data must match.\"},\"fulfillIntent(bytes,bytes32)\":{\"notice\":\"Anyone can submit a fulfill intent transaction, even if caller isn't the intent owner. Upon submission the offchain payment proof is verified, payment details are validated, intent is removed, and deposit state is updated.  Deposit token is transferred to the intent.to address.\"},\"getPrunableIntents(uint256)\":{\"notice\":\"Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired the outstanding amounts are summed up to get the reclaimable amount and returned alongside the intentHashes.\"},\"pauseEscrow()\":{\"notice\":\"GOVERNANCE ONLY: Pauses deposit creation, intent creation and intent fulfillment functionality for the escrow. Functionalities that are paused: - Deposit creation - Updating conversion rates - Intent creation - Intent fulfillment Functionalities that remain unpaused to allow users to retrieve funds in contract: - Intent cancellation - Deposit withdrawal - Manual intent fulfillment\"},\"releaseFundsToPayer(bytes32)\":{\"notice\":\"Allows depositor to release funds to the payer in case of a failed fulfill intent or because of some other arrangement between the two parties. Upon submission we check to make sure the msg.sender is the depositor, the  intent is removed, and  deposit state is updated. Deposit token is transferred to the payer.\"},\"removeWhitelistedPaymentVerifier(address)\":{\"notice\":\"GOVERNANCE ONLY: Removes a payment verifier from the whitelist.\"},\"setIntentExpirationPeriod(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent locking up a depositor's funds.\"},\"setSustainabilityFee(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to takers upon a successful  fulfillment of an intent.\"},\"setSustainabilityFeeRecipient(address)\":{\"notice\":\"GOVERNANCE ONLY: Updates the recepient of sustainability fees.\"},\"signalIntent(uint256,uint256,address,address,bytes32,bytes)\":{\"notice\":\"Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain in order to unlock _amount of funds on-chain. Caller must provide a signature from the deposit's gating service to prove their eligibility to take liquidity. The offchain gating service can perform any additional verification, for example,  verifying the payer's identity, checking the payer's KYC status, etc. If there are prunable intents then they will be  deleted from the deposit to be able to maintain state hygiene.\"},\"unpauseEscrow()\":{\"notice\":\"GOVERNANCE ONLY: Restarts paused functionality for the escrow.\"},\"updateAcceptAllPaymentVerifiers(bool)\":{\"notice\":\"GOVERNANCE ONLY: Sets whether all payment verifiers can be used without whitelisting.\"},\"updateDepositConversionRate(uint256,address,bytes32,uint256)\":{\"notice\":\"Only callable by the depositor for a deposit. Allows depositor to update the conversion rate for a currency for a  payment verifier. Since intent's store the conversion rate at the time of intent, changing the conversion rate will not affect any intents that have already been signaled.\"},\"updatePaymentVerifierFeeShare(address,uint256)\":{\"notice\":\"GOVERNANCE ONLY: Updates the fee share for a payment verifier.\"},\"withdrawDeposit(uint256)\":{\"notice\":\"Caller must be the depositor for depositId, if not revert. Depositor is returned all remaining deposits and any outstanding intents that are expired. If an intent is not expired then those funds will not be returned. Deposit is marked  as to not accept new intents and the funds locked due to intents can be withdrawn once they expire by calling this function again. Deposit will be deleted as long as there are no more outstanding intents.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Escrow.sol\":\"Escrow\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Escrow.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { SignatureChecker } from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"./external/AddressArrayUtils.sol\\\";\\nimport { Bytes32ArrayUtils } from \\\"./external/Bytes32ArrayUtils.sol\\\";\\nimport { StringArrayUtils } from \\\"./external/StringArrayUtils.sol\\\";\\nimport { Uint256ArrayUtils } from \\\"./external/Uint256ArrayUtils.sol\\\";\\n\\nimport { IEscrow } from \\\"./interfaces/IEscrow.sol\\\";\\nimport { IPaymentVerifier } from \\\"./verifiers/interfaces/IPaymentVerifier.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract Escrow is Ownable, Pausable, IEscrow {\\n\\n    using AddressArrayUtils for address[];\\n    using Bytes32ArrayUtils for bytes32[];\\n    using ECDSA for bytes32;\\n    using SignatureChecker for address;\\n    using StringArrayUtils for string[];\\n    using Uint256ArrayUtils for uint256[];\\n\\n    /* ============ Events ============ */\\n\\n    event DepositReceived(\\n        uint256 indexed depositId,\\n        address indexed depositor,\\n        IERC20 indexed token,\\n        uint256 amount,\\n        Range intentAmountRange\\n    );\\n\\n    event DepositVerifierAdded(\\n        uint256 indexed depositId,\\n        address indexed verifier,\\n        bytes32 indexed payeeDetailsHash,\\n        address intentGatingService\\n    );\\n\\n    event DepositCurrencyAdded(\\n        uint256 indexed depositId,\\n        address indexed verifier,\\n        bytes32 indexed currency,\\n        uint256 conversionRate\\n    );\\n\\n    event DepositConversionRateUpdated(\\n        uint256 indexed depositId,\\n        address indexed verifier,\\n        bytes32 indexed currency,\\n        uint256 newConversionRate\\n    );\\n\\n    event IntentSignaled(\\n        bytes32 indexed intentHash,\\n        uint256 indexed depositId,\\n        address indexed verifier,\\n        address owner,\\n        address to,\\n        uint256 amount,\\n        bytes32 fiatCurrency,\\n        uint256 conversionRate,\\n        uint256 timestamp\\n    );\\n\\n    event IntentPruned(\\n        bytes32 indexed intentHash,\\n        uint256 indexed depositId\\n    );\\n\\n    event IntentFulfilled(\\n        bytes32 indexed intentHash,\\n        uint256 indexed depositId,\\n        address indexed verifier,\\n        address owner,\\n        address to,\\n        uint256 amount,\\n        uint256 sustainabilityFee,\\n        uint256 verifierFee\\n    );\\n\\n    event DepositWithdrawn(\\n        uint256 indexed depositId,\\n        address indexed depositor,\\n        uint256 amount\\n    );\\n\\n    event DepositClosed(uint256 depositId, address depositor);\\n    \\n    event MinDepositAmountSet(uint256 minDepositAmount);\\n    event SustainabilityFeeUpdated(uint256 fee);\\n    event SustainabilityFeeRecipientUpdated(address feeRecipient);\\n    event AcceptAllPaymentVerifiersUpdated(bool acceptAllPaymentVerifiers);\\n    event IntentExpirationPeriodSet(uint256 intentExpirationPeriod);\\n    \\n    event PaymentVerifierAdded(address verifier, uint256 feeShare);\\n    event PaymentVerifierFeeShareUpdated(address verifier, uint256 feeShare);\\n    event PaymentVerifierRemoved(address verifier);\\n\\n    /* ============ Constants ============ */\\n    uint256 internal constant PRECISE_UNIT = 1e18;\\n    uint256 constant CIRCOM_PRIME_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant MAX_SUSTAINABILITY_FEE = 5e16;   // 5% max sustainability fee\\n    \\n    /* ============ State Variables ============ */\\n\\n    uint256 immutable public chainId;                                      // chainId of the chain the escrow is deployed on\\n\\n    mapping(address => uint256[]) public accountDeposits;           // Mapping of address to depositIds\\n    mapping(address => bytes32) public accountIntent;               // Mapping of address to intentHash (Only one intent per address at a given time)\\n    \\n    // Mapping of depositId to verifier address to deposit's verification data. A single deposit can support multiple payment \\n    // services. Each payment service has it's own verification data which includes the payee details hash and the data used for \\n    // payment verification.\\n    // Example: Deposit 1 => Venmo => payeeDetails: 0x123, data: 0x456\\n    //                    => Revolut => payeeDetails: 0x789, data: 0xabc\\n    mapping(uint256 => mapping(address => DepositVerifierData)) public depositVerifierData;\\n    mapping(uint256 => address[]) public depositVerifiers;          // Handy mapping to get all verifiers for a deposit\\n    \\n    // Mapping of depositId to verifier address to mapping of fiat currency to conversion rate. Each payment service can support\\n    // multiple currencies. Depositor can specify list of currencies and conversion rates for each payment service.\\n    // Example: Deposit 1 => Venmo => USD: 1e18\\n    //                    => Revolut => USD: 1e18, EUR: 1.2e18, SGD: 1.5e18\\n    mapping(uint256 => mapping(address => mapping(bytes32 => uint256))) public depositCurrencyConversionRate;\\n    mapping(uint256 => mapping(address => bytes32[])) public depositCurrencies; // Handy mapping to get all currencies for a deposit and verifier\\n\\n    mapping(uint256 => Deposit) public deposits;                    // Mapping of depositIds to deposit structs\\n    mapping(bytes32 => Intent) public intents;                      // Mapping of intentHashes to intent structs\\n\\n    // Governance controlled\\n    bool public acceptAllPaymentVerifiers;                            // True if all payment verifiers are accepted, False otherwise\\n    mapping(address => bool) public whitelistedPaymentVerifiers;      // Mapping of payment verifier addresses to boolean indicating if they are whitelisted\\n    mapping(address => uint256) public paymentVerifierFeeShare;       // Mapping of payment verifier addresses to their fee share\\n\\n    uint256 public intentExpirationPeriod;                          // Time period after which an intent can be pruned from the system\\n    uint256 public sustainabilityFee;                               // Fee charged to takers in preciseUnits (1e16 = 1%)\\n    address public sustainabilityFeeRecipient;                      // Address that receives the sustainability fee\\n\\n    uint256 public depositCounter;                                  // Counter for depositIds\\n\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _owner,\\n        uint256 _chainId,\\n        uint256 _intentExpirationPeriod,\\n        uint256 _sustainabilityFee,\\n        address _sustainabilityFeeRecipient\\n    )\\n        Ownable()\\n    {\\n        chainId = _chainId;\\n        intentExpirationPeriod = _intentExpirationPeriod;\\n        sustainabilityFee = _sustainabilityFee;\\n        sustainabilityFeeRecipient = _sustainabilityFeeRecipient;\\n\\n        transferOwnership(_owner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Creates a deposit entry by locking liquidity in the escrow contract that can be taken by signaling intents. This function will \\n     * not add to previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount\\n     * of deposit token. Every deposit specifies the payment services it supports by specifying their corresponding verifier addresses and \\n     * verification data, supported currencies and their conversion rates for each payment service.\\n     * Note that the order of the verifiers, verification data, and currency data must match.\\n     *\\n     * @param _token                     The token to be deposited\\n     * @param _amount                    The amount of token to deposit\\n     * @param _intentAmountRange         The max and min take amount for each intent\\n     * @param _verifiers                 The payment verifiers that deposit supports\\n     * @param _verifierData              The payment verification data for each verifier that deposit supports\\n     * @param _currencies                The currencies for each verifier that deposit supports\\n     */\\n    function createDeposit(\\n        IERC20 _token,\\n        uint256 _amount,\\n        Range calldata _intentAmountRange,\\n        address[] calldata _verifiers,\\n        DepositVerifierData[] calldata _verifierData,\\n        Currency[][] calldata _currencies\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        _validateCreateDeposit(_amount, _intentAmountRange, _verifiers, _verifierData, _currencies);\\n\\n        uint256 depositId = depositCounter++;\\n\\n        accountDeposits[msg.sender].push(depositId);\\n\\n        deposits[depositId] = Deposit({\\n            depositor: msg.sender,\\n            token: _token,\\n            amount: _amount,\\n            intentAmountRange: _intentAmountRange,\\n            acceptingIntents: true,\\n            intentHashes: new bytes32[](0),\\n            remainingDeposits: _amount,\\n            outstandingIntentAmount: 0\\n        });\\n\\n        emit DepositReceived(depositId, msg.sender, _token, _amount, _intentAmountRange);\\n\\n        for (uint256 i = 0; i < _verifiers.length; i++) {\\n            address verifier = _verifiers[i];\\n            require(\\n                bytes(depositVerifierData[depositId][verifier].payeeDetails).length == 0,\\n                \\\"Verifier data already exists\\\"\\n            );\\n            depositVerifierData[depositId][verifier] = _verifierData[i];\\n            depositVerifiers[depositId].push(verifier);\\n\\n            bytes32 payeeDetailsHash = keccak256(abi.encodePacked(_verifierData[i].payeeDetails));\\n            emit DepositVerifierAdded(depositId, verifier, payeeDetailsHash, _verifierData[i].intentGatingService);\\n        \\n            for (uint256 j = 0; j < _currencies[i].length; j++) {\\n                Currency memory currency = _currencies[i][j];\\n                require(\\n                    depositCurrencyConversionRate[depositId][verifier][currency.code] == 0,\\n                    \\\"Currency conversion rate already exists\\\"\\n                );\\n                depositCurrencyConversionRate[depositId][verifier][currency.code] = currency.conversionRate;\\n                depositCurrencies[depositId][verifier].push(currency.code);\\n\\n                emit DepositCurrencyAdded(depositId, verifier, currency.code, currency.conversionRate);\\n            }\\n        }\\n\\n        _token.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @notice Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain\\n     * in order to unlock _amount of funds on-chain. Caller must provide a signature from the deposit's gating service to prove\\n     * their eligibility to take liquidity. The offchain gating service can perform any additional verification, for example, \\n     * verifying the payer's identity, checking the payer's KYC status, etc. If there are prunable intents then they will be \\n     * deleted from the deposit to be able to maintain state hygiene.\\n     *\\n     * @param _depositId                The ID of the deposit the taker intends to use for taking onchain liquidity\\n     * @param _amount                   The amount of deposit.token the user wants to take\\n     * @param _to                       Address to forward funds to (can be same as owner)\\n     * @param _verifier                 The payment verifier corresponding to the payment service the user is going to pay with \\n     *                                  offchain (e.g. Venmo, Revolut, Mercado, etc.)\\n     * @param _fiatCurrency             The currency code that the user is paying in offchain\\n     * @param _gatingServiceSignature   The signature from the deposit's gating service on intent parameters\\n     */\\n    function signalIntent(\\n        uint256 _depositId,\\n        uint256 _amount,\\n        address _to,\\n        address _verifier,\\n        bytes32 _fiatCurrency,\\n        bytes calldata _gatingServiceSignature\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        Deposit storage deposit = deposits[_depositId];\\n        \\n        _validateIntent(_depositId, deposit, _amount, _to, _verifier, _fiatCurrency, _gatingServiceSignature);\\n\\n        bytes32 intentHash = _calculateIntentHash(msg.sender, _verifier, _depositId);\\n\\n        if (deposit.remainingDeposits < _amount) {\\n            (\\n                bytes32[] memory prunableIntents,\\n                uint256 reclaimableAmount\\n            ) = _getPrunableIntents(_depositId);\\n\\n            require(deposit.remainingDeposits + reclaimableAmount >= _amount, \\\"Not enough liquidity\\\");\\n\\n            _pruneIntents(deposit, prunableIntents);\\n            deposit.remainingDeposits += reclaimableAmount;\\n            deposit.outstandingIntentAmount -= reclaimableAmount;\\n        }\\n\\n        uint256 conversionRate = depositCurrencyConversionRate[_depositId][_verifier][_fiatCurrency];\\n        intents[intentHash] = Intent({\\n            owner: msg.sender,\\n            to: _to,\\n            depositId: _depositId,\\n            amount: _amount,\\n            paymentVerifier: _verifier,\\n            fiatCurrency: _fiatCurrency,\\n            conversionRate: conversionRate,\\n            timestamp: block.timestamp\\n        });\\n\\n        accountIntent[msg.sender] = intentHash;\\n\\n        deposit.remainingDeposits -= _amount;\\n        deposit.outstandingIntentAmount += _amount;\\n        deposit.intentHashes.push(intentHash);\\n\\n        emit IntentSignaled(intentHash, _depositId, _verifier, msg.sender, _to, _amount, _fiatCurrency, conversionRate, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Only callable by the originator of the intent. Cancels an outstanding intent. Deposit state is \\n     * updated to reflect the cancelled intent.\\n     *\\n     * @param _intentHash    Hash of intent being cancelled\\n     */\\n    function cancelIntent(bytes32 _intentHash) external {\\n        Intent memory intent = intents[_intentHash];\\n        \\n        require(intent.timestamp != 0, \\\"Intent does not exist\\\");\\n        require(intent.owner == msg.sender, \\\"Sender must be the intent owner\\\");\\n\\n        Deposit storage deposit = deposits[intent.depositId];\\n\\n        _pruneIntent(deposit, _intentHash);\\n\\n        deposit.remainingDeposits += intent.amount;\\n        deposit.outstandingIntentAmount -= intent.amount;\\n    }\\n\\n    /**\\n     * @notice Anyone can submit a fulfill intent transaction, even if caller isn't the intent owner. Upon submission the\\n     * offchain payment proof is verified, payment details are validated, intent is removed, and deposit state is updated. \\n     * Deposit token is transferred to the intent.to address.\\n     *\\n     * @param _paymentProof         Payment proof. Can be Groth16 Proof, TLSNotary proof, TLSProxy proof, attestation etc.\\n     * @param _intentHash           Identifier of intent being fulfilled\\n     */\\n    function fulfillIntent( \\n        bytes calldata _paymentProof,\\n        bytes32 _intentHash\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        Intent memory intent = intents[_intentHash];\\n        Deposit storage deposit = deposits[intent.depositId];\\n        \\n        address verifier = intent.paymentVerifier;\\n        require(verifier != address(0), \\\"Intent does not exist\\\");\\n        \\n        DepositVerifierData memory verifierData = depositVerifierData[intent.depositId][verifier];\\n        (bool success, bytes32 intentHash) = IPaymentVerifier(verifier).verifyPayment(\\n            IPaymentVerifier.VerifyPaymentData({\\n                paymentProof: _paymentProof,\\n                depositToken: address(deposit.token),\\n                intentAmount: intent.amount,\\n                intentTimestamp: intent.timestamp,\\n                payeeDetails: verifierData.payeeDetails,\\n                fiatCurrency: intent.fiatCurrency,\\n                conversionRate: intent.conversionRate,\\n                data: verifierData.data\\n            })\\n        );\\n        require(success, \\\"Payment verification failed\\\");\\n        require(intentHash == _intentHash, \\\"Invalid intent hash\\\");\\n\\n        _pruneIntent(deposit, _intentHash);\\n\\n        deposit.outstandingIntentAmount -= intent.amount;\\n        IERC20 token = deposit.token;\\n        _closeDepositIfNecessary(intent.depositId, deposit);\\n\\n        _transferFunds(token, intentHash, intent, verifier);\\n    }\\n\\n\\n    /**\\n     * @notice Allows depositor to release funds to the payer in case of a failed fulfill intent or because of some other arrangement\\n     * between the two parties. Upon submission we check to make sure the msg.sender is the depositor, the  intent is removed, and \\n     * deposit state is updated. Deposit token is transferred to the payer.\\n     *\\n     * @param _intentHash        Hash of intent to resolve by releasing the funds\\n     */\\n    function releaseFundsToPayer(bytes32 _intentHash) external {\\n        Intent memory intent = intents[_intentHash];\\n        Deposit storage deposit = deposits[intent.depositId];\\n\\n        require(intent.owner != address(0), \\\"Intent does not exist\\\");\\n        require(deposit.depositor == msg.sender, \\\"Caller must be the depositor\\\");\\n\\n        _pruneIntent(deposit, _intentHash);\\n\\n        deposit.outstandingIntentAmount -= intent.amount;\\n        IERC20 token = deposit.token;\\n        _closeDepositIfNecessary(intent.depositId, deposit);\\n\\n        _transferFunds(token, _intentHash, intent, address(0));\\n    }\\n\\n    /**\\n     * @notice Only callable by the depositor for a deposit. Allows depositor to update the conversion rate for a currency for a \\n     * payment verifier. Since intent's store the conversion rate at the time of intent, changing the conversion rate will not affect\\n     * any intents that have already been signaled.\\n     *\\n     * @param _depositId                The deposit ID\\n     * @param _verifier                 The payment verifier address to update the conversion rate for\\n     * @param _fiatCurrency             The fiat currency code to update the conversion rate for\\n     * @param _newConversionRate        The new conversion rate. Must be greater than 0.\\n     */\\n    function updateDepositConversionRate(\\n        uint256 _depositId, \\n        address _verifier, \\n        bytes32 _fiatCurrency, \\n        uint256 _newConversionRate\\n    )\\n        external\\n        whenNotPaused\\n    {\\n        Deposit storage deposit = deposits[_depositId];\\n        uint256 oldConversionRate = depositCurrencyConversionRate[_depositId][_verifier][_fiatCurrency];\\n\\n        require(deposit.depositor == msg.sender, \\\"Caller must be the depositor\\\");\\n        require(oldConversionRate != 0, \\\"Currency or verifier not supported\\\");\\n        require(_newConversionRate > 0, \\\"Conversion rate must be greater than 0\\\");\\n\\n        depositCurrencyConversionRate[_depositId][_verifier][_fiatCurrency] = _newConversionRate;\\n\\n        emit DepositConversionRateUpdated(_depositId, _verifier, _fiatCurrency, _newConversionRate);\\n    }\\n\\n    /**\\n     * @notice Caller must be the depositor for depositId, if not revert. Depositor is returned all remaining deposits and any\\n     * outstanding intents that are expired. If an intent is not expired then those funds will not be returned. Deposit is marked \\n     * as to not accept new intents and the funds locked due to intents can be withdrawn once they expire by calling this function\\n     * again. Deposit will be deleted as long as there are no more outstanding intents.\\n     *\\n     * @param _depositId   DepositId the depositor is attempting to withdraw\\n     */\\n    function withdrawDeposit(uint256 _depositId) external {\\n        Deposit storage deposit = deposits[_depositId];\\n\\n        require(deposit.depositor == msg.sender, \\\"Caller must be the depositor\\\");\\n\\n        (\\n            bytes32[] memory prunableIntents,\\n            uint256 reclaimableAmount\\n        ) = _getPrunableIntents(_depositId);\\n\\n        _pruneIntents(deposit, prunableIntents);\\n\\n        uint256 returnAmount = deposit.remainingDeposits + reclaimableAmount;\\n        \\n        deposit.outstandingIntentAmount -= reclaimableAmount;\\n\\n        emit DepositWithdrawn(_depositId, deposit.depositor, returnAmount);\\n        \\n        delete deposit.remainingDeposits;\\n        delete deposit.acceptingIntents;\\n        IERC20 token = deposit.token;\\n        _closeDepositIfNecessary(_depositId, deposit);\\n        \\n        token.transfer(msg.sender, returnAmount);\\n    }\\n\\n    /* ============ Governance Functions ============ */\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Adds a payment verifier to the whitelist.\\n     *\\n     * @param _verifier   The payment verifier address to add\\n     * @param _feeShare   The fee share for the payment verifier\\n     */\\n    function addWhitelistedPaymentVerifier(address _verifier, uint256 _feeShare) external onlyOwner {\\n        require(_verifier != address(0), \\\"Payment verifier cannot be zero address\\\");\\n        require(!whitelistedPaymentVerifiers[_verifier], \\\"Payment verifier already whitelisted\\\");\\n        \\n        whitelistedPaymentVerifiers[_verifier] = true;\\n        paymentVerifierFeeShare[_verifier] = _feeShare;\\n        \\n        emit PaymentVerifierAdded(_verifier, _feeShare);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Removes a payment verifier from the whitelist.\\n     *\\n     * @param _verifier   The payment verifier address to remove\\n     */\\n    function removeWhitelistedPaymentVerifier(address _verifier) external onlyOwner {\\n        require(whitelistedPaymentVerifiers[_verifier], \\\"Payment verifier not whitelisted\\\");\\n        \\n        whitelistedPaymentVerifiers[_verifier] = false;\\n        emit PaymentVerifierRemoved(_verifier);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the fee share for a payment verifier.\\n     *\\n     * @param _verifier   The payment verifier address to update\\n     * @param _feeShare   The new fee share\\n     */\\n    function updatePaymentVerifierFeeShare(address _verifier, uint256 _feeShare) external onlyOwner {\\n        require(whitelistedPaymentVerifiers[_verifier], \\\"Payment verifier not whitelisted\\\");\\n\\n        paymentVerifierFeeShare[_verifier] = _feeShare;\\n        emit PaymentVerifierFeeShareUpdated(_verifier, _feeShare);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Sets whether all payment verifiers can be used without whitelisting.\\n     *\\n     * @param _acceptAllPaymentVerifiers   True to accept all payment verifiers, false to require whitelisting\\n     */\\n    function updateAcceptAllPaymentVerifiers(bool _acceptAllPaymentVerifiers) external onlyOwner {\\n        acceptAllPaymentVerifiers = _acceptAllPaymentVerifiers;\\n        emit AcceptAllPaymentVerifiersUpdated(_acceptAllPaymentVerifiers);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to takers upon a successful \\n     * fulfillment of an intent.\\n     *\\n     * @param _fee   The new sustainability fee in precise units (10**18, ie 10% = 1e17)\\n     */\\n    function setSustainabilityFee(uint256 _fee) external onlyOwner {\\n        require(_fee <= MAX_SUSTAINABILITY_FEE, \\\"Fee cannot be greater than max fee\\\");\\n\\n        sustainabilityFee = _fee;\\n        emit SustainabilityFeeUpdated(_fee);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the recepient of sustainability fees.\\n     *\\n     * @param _feeRecipient   The new fee recipient address\\n     */\\n    function setSustainabilityFeeRecipient(address _feeRecipient) external onlyOwner {\\n        require(_feeRecipient != address(0), \\\"Fee recipient cannot be zero address\\\");\\n\\n        sustainabilityFeeRecipient = _feeRecipient;\\n        emit SustainabilityFeeRecipientUpdated(_feeRecipient);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent\\n     * locking up a depositor's funds.\\n     *\\n     * @param _intentExpirationPeriod   New intent expiration period\\n     */\\n    function setIntentExpirationPeriod(uint256 _intentExpirationPeriod) external onlyOwner {\\n        require(_intentExpirationPeriod != 0, \\\"Max intent expiration period cannot be zero\\\");\\n\\n        intentExpirationPeriod = _intentExpirationPeriod;\\n        emit IntentExpirationPeriodSet(_intentExpirationPeriod);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Pauses deposit creation, intent creation and intent fulfillment functionality for the escrow.\\n     * Functionalities that are paused:\\n     * - Deposit creation\\n     * - Updating conversion rates\\n     * - Intent creation\\n     * - Intent fulfillment\\n     *\\n     * Functionalities that remain unpaused to allow users to retrieve funds in contract:\\n     * - Intent cancellation\\n     * - Deposit withdrawal\\n     * - Manual intent fulfillment\\n     */\\n    function pauseEscrow() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Restarts paused functionality for the escrow.\\n     */\\n    function unpauseEscrow() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    \\n    /* ============ External View Functions ============ */\\n\\n    /**\\n     * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\\n     * the outstanding amounts are summed up to get the reclaimable amount and returned alongside the intentHashes.\\n     *\\n     * @param _depositId   The deposit ID\\n     */\\n    function getPrunableIntents(uint256 _depositId) external view returns (bytes32[] memory prunableIntents, uint256 reclaimedAmount) {\\n        return _getPrunableIntents(_depositId);\\n    }\\n\\n    function getDeposit(uint256 _depositId) public view returns (DepositView memory depositView) {\\n        Deposit memory deposit = deposits[_depositId];\\n        ( , uint256 reclaimableAmount) = _getPrunableIntents(_depositId);\\n\\n        VerifierDataView[] memory verifiers = new VerifierDataView[](depositVerifiers[_depositId].length);\\n        for (uint256 i = 0; i < verifiers.length; ++i) {\\n            address verifier = depositVerifiers[_depositId][i];\\n            Currency[] memory currencies = new Currency[](depositCurrencies[_depositId][verifier].length);\\n            for (uint256 j = 0; j < currencies.length; ++j) {\\n                bytes32 code = depositCurrencies[_depositId][verifier][j];\\n                currencies[j] = Currency({\\n                    code: code,\\n                    conversionRate: depositCurrencyConversionRate[_depositId][verifier][code]\\n                });\\n            }\\n            verifiers[i] = VerifierDataView({\\n                verifier: verifier,\\n                verificationData: depositVerifierData[_depositId][verifier],\\n                currencies: currencies\\n            });\\n        }\\n\\n        depositView = DepositView({\\n            depositId: _depositId,\\n            deposit: deposit,\\n            availableLiquidity: deposit.remainingDeposits + reclaimableAmount,\\n            verifiers: verifiers\\n        });\\n    }\\n\\n    function getAccountDeposits(address _account) external view returns (DepositView[] memory depositArray) {\\n        uint256[] memory accountDepositIds = accountDeposits[_account];\\n        depositArray = new DepositView[](accountDepositIds.length);\\n        \\n        for (uint256 i = 0; i < accountDepositIds.length; ++i) {\\n            uint256 depositId = accountDepositIds[i];\\n            depositArray[i] = getDeposit(depositId);\\n        }\\n    }\\n\\n    function getDepositFromIds(uint256[] memory _depositIds) external view returns (DepositView[] memory depositArray) {\\n        depositArray = new DepositView[](_depositIds.length);\\n\\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\\n            uint256 depositId = _depositIds[i];\\n            depositArray[i] = getDeposit(depositId);\\n        }\\n    }\\n\\n    function getIntent(bytes32 _intentHash) public view returns (IntentView memory intentView) {\\n        Intent memory intent = intents[_intentHash];\\n        DepositView memory deposit = getDeposit(intent.depositId);\\n        intentView = IntentView({\\n            intentHash: _intentHash,\\n            intent: intent,\\n            deposit: deposit\\n        });\\n    }\\n\\n    function getIntents(bytes32[] calldata _intentHashes) external view returns (IntentView[] memory intentArray) {\\n        intentArray = new IntentView[](_intentHashes.length);\\n\\n        for (uint256 i = 0; i < _intentHashes.length; ++i) {\\n            intentArray[i] = getIntent(_intentHashes[i]);\\n        }\\n    }\\n\\n    function getAccountIntent(address _account) external view returns (IntentView memory intentView) {\\n        bytes32 intentHash = accountIntent[_account];\\n        intentView = getIntent(intentHash);\\n    }\\n\\n \\n    /* ============ Internal Functions ============ */\\n\\n    function _validateCreateDeposit(\\n        uint256 _amount,\\n        Range memory _intentAmountRange,\\n        address[] calldata _verifiers,\\n        DepositVerifierData[] calldata _verifierData,\\n        Currency[][] calldata _currencies\\n    ) internal view {\\n\\n        require(_intentAmountRange.min != 0, \\\"Min intent amount cannot be zero\\\");\\n        require(_intentAmountRange.min <= _intentAmountRange.max, \\\"Min intent amount must be less than max intent amount\\\");\\n        require(_amount >= _intentAmountRange.min, \\\"Amount must be greater than min intent amount\\\");\\n\\n        // Check that the length of the verifiers, depositVerifierData, and currencies arrays are the same\\n        require(_verifiers.length == _verifierData.length, \\\"Verifiers and depositVerifierData length mismatch\\\");\\n        require(_verifiers.length == _currencies.length, \\\"Verifiers and currencies length mismatch\\\");\\n\\n        for (uint256 i = 0; i < _verifiers.length; i++) {\\n            address verifier = _verifiers[i];\\n            \\n            require(verifier != address(0), \\\"Verifier cannot be zero address\\\");\\n            require(whitelistedPaymentVerifiers[verifier] || acceptAllPaymentVerifiers, \\\"Payment verifier not whitelisted\\\");\\n\\n            // _verifierData.intentGatingService can be zero address, _verifierData.data can be empty\\n            require(bytes(_verifierData[i].payeeDetails).length != 0, \\\"Payee details cannot be empty\\\");\\n\\n            for (uint256 j = 0; j < _currencies[i].length; j++) {\\n                require(\\n                    IPaymentVerifier(verifier).isCurrency(_currencies[i][j].code), \\n                    \\\"Currency not supported by verifier\\\"\\n                );\\n                require(_currencies[i][j].conversionRate > 0, \\\"Conversion rate must be greater than 0\\\");\\n            }\\n        }\\n    }\\n\\n    function _validateIntent(\\n        uint256 _depositId,\\n        Deposit storage _deposit,\\n        uint256 _amount,\\n        address _to,\\n        address _verifier,\\n        bytes32 _fiatCurrency,\\n        bytes calldata _gatingServiceSignature\\n    ) internal view {\\n        require(accountIntent[msg.sender] == bytes32(0), \\\"Account has unfulfilled intent\\\");\\n        require(_deposit.depositor != address(0), \\\"Deposit does not exist\\\");\\n        require(_deposit.acceptingIntents, \\\"Deposit is not accepting intents\\\");\\n        require(_amount >= _deposit.intentAmountRange.min, \\\"Signaled amount must be greater than min intent amount\\\");\\n        require(_amount <= _deposit.intentAmountRange.max, \\\"Signaled amount must be less than max intent amount\\\");\\n        require(_to != address(0), \\\"Cannot send to zero address\\\");\\n        \\n        DepositVerifierData memory verifierData = depositVerifierData[_depositId][_verifier];\\n        require(bytes(verifierData.payeeDetails).length != 0, \\\"Payment verifier not supported\\\");\\n        require(depositCurrencyConversionRate[_depositId][_verifier][_fiatCurrency] != 0, \\\"Currency not supported\\\");\\n\\n        address intentGatingService = verifierData.intentGatingService;\\n        if (intentGatingService != address(0)) {\\n            require(\\n                _isValidSignature(\\n                    abi.encodePacked(_depositId, _amount, _to, _verifier, _fiatCurrency, chainId),\\n                    _gatingServiceSignature,\\n                    intentGatingService\\n                ),\\n                \\\"Invalid gating service signature\\\"\\n            );\\n        }\\n    }\\n\\n    function _calculateIntentHash(\\n        address _intentOwner,\\n        address _verifier,\\n        uint256 _depositId\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (bytes32 intentHash)\\n    {\\n        // Mod with circom prime field to make sure it fits in a 254-bit field\\n        uint256 intermediateHash = uint256(keccak256(abi.encodePacked(_intentOwner, _verifier, _depositId, block.timestamp)));\\n        intentHash = bytes32(intermediateHash % CIRCOM_PRIME_FIELD);\\n    }\\n\\n    /**\\n     * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\\n     * the outstanding amounts are summed and returned alongside the intentHashes\\n     */\\n    function _getPrunableIntents(\\n        uint256 _depositId\\n    )\\n        internal\\n        view\\n        returns(bytes32[] memory prunableIntents, uint256 reclaimedAmount)\\n    {\\n        bytes32[] memory intentHashes = deposits[_depositId].intentHashes;\\n        prunableIntents = new bytes32[](intentHashes.length);\\n\\n        for (uint256 i = 0; i < intentHashes.length; ++i) {\\n            Intent memory intent = intents[intentHashes[i]];\\n            if (intent.timestamp + intentExpirationPeriod < block.timestamp) {\\n                prunableIntents[i] = intentHashes[i];\\n                reclaimedAmount += intent.amount;\\n            }\\n        }\\n    }\\n\\n    function _pruneIntents(Deposit storage _deposit, bytes32[] memory _intents) internal {\\n        for (uint256 i = 0; i < _intents.length; ++i) {\\n            if (_intents[i] != bytes32(0)) {\\n                _pruneIntent(_deposit, _intents[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Pruning an intent involves deleting its state from the intents mapping, deleting the intent from it's owners intents \\n     * array, and deleting the intentHash from the deposit's intentHashes array.\\n     */\\n    function _pruneIntent(Deposit storage _deposit, bytes32 _intentHash) internal {\\n        Intent memory intent = intents[_intentHash];\\n\\n        delete accountIntent[intent.owner];\\n        delete intents[_intentHash];\\n        _deposit.intentHashes.removeStorage(_intentHash);\\n\\n        emit IntentPruned(_intentHash, intent.depositId);\\n    }\\n\\n    /**\\n     * @notice Removes a deposit if no outstanding intents AND no remaining deposits. Deleting a deposit deletes it from the\\n     * deposits mapping and removes tracking it in the user's accountDeposits mapping. Also deletes the verification data for the\\n     * deposit.\\n     */\\n    function _closeDepositIfNecessary(uint256 _depositId, Deposit storage _deposit) internal {\\n        uint256 openDepositAmount = _deposit.outstandingIntentAmount + _deposit.remainingDeposits;\\n        if (openDepositAmount == 0) {\\n            accountDeposits[_deposit.depositor].removeStorage(_depositId);\\n            _deleteDepositVerifierAndCurrencyData(_depositId);\\n            emit DepositClosed(_depositId, _deposit.depositor);\\n            delete deposits[_depositId];\\n        }\\n    }\\n\\n    /**\\n     * @notice Iterates through all verifiers for a deposit and deletes the corresponding verifier data and currencies.\\n     */\\n    function _deleteDepositVerifierAndCurrencyData(uint256 _depositId) internal {\\n        address[] memory verifiers = depositVerifiers[_depositId];\\n        for (uint256 i = 0; i < verifiers.length; i++) {\\n            address verifier = verifiers[i];\\n            delete depositVerifierData[_depositId][verifier];\\n            bytes32[] memory currencies = depositCurrencies[_depositId][verifier];\\n            for (uint256 j = 0; j < currencies.length; j++) {\\n                delete depositCurrencyConversionRate[_depositId][verifier][currencies[j]];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if sustainability fee has been defined, if so sends fee to the respective fee recipients, and intent amount\\n     * minus total fee to the taker. Total fee is split between the sustainability fee recipient and the payment verifier. To \\n     * skip payment verifier fee split, set _verifier to zero address. If sustainability fee is undefined then full intent amount \\n     * is transferred to taker. \\n     */\\n    function _transferFunds(IERC20 _token, bytes32 _intentHash, Intent memory _intent, address _verifier) internal {\\n        uint256 fee;\\n        uint256 verifierFee;\\n        if (sustainabilityFee != 0) {\\n            fee = (_intent.amount * sustainabilityFee) / PRECISE_UNIT;\\n            if (_verifier != address(0)) {\\n                verifierFee = (fee * paymentVerifierFeeShare[_verifier]) / PRECISE_UNIT;\\n                _token.transfer(_verifier, verifierFee);\\n            }\\n            _token.transfer(sustainabilityFeeRecipient, fee - verifierFee);\\n        }\\n\\n        uint256 transferAmount = _intent.amount - fee;\\n        _token.transfer(_intent.to, transferAmount);\\n\\n        emit IntentFulfilled(\\n            _intentHash, \\n            _intent.depositId, \\n            _verifier, \\n            _intent.owner, \\n            _intent.to, \\n            transferAmount, \\n            fee - verifierFee, \\n            verifierFee\\n        );\\n    }\\n\\n    function _isValidSignature(\\n        bytes memory _message,\\n        bytes memory _signature,\\n        address _signer\\n    )\\n        internal\\n        view\\n        returns(bool)\\n    {\\n        bytes32 verifierPayload = keccak256(_message).toEthSignedMessageHash();\\n\\n        return _signer.isValidSignatureNow(verifierPayload, _signature);\\n    }\\n}\\n\",\"keccak256\":\"0xd116259b82924415da34a6c7f20aace7985ff05676bf1bf1955aa642ab60fac9\",\"license\":\"MIT\"},\"contracts/external/AddressArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG:\\n * - 4/21/21: Added validatePairsWithArray methods\\n */\\nlibrary AddressArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x486f1a373f33aa167227600ac2d0bf95b37685413d98a3e745107188f00ae405\",\"license\":\"MIT\"},\"contracts/external/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"},\"contracts/external/StringArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title StringArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle String Arrays\\n */\\nlibrary StringArrayUtils {\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input string to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(string[] memory A, string memory a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (keccak256(bytes(A[i])) == keccak256(bytes(a))) {\\n                return (i, true);\\n            }\\n        }\\n        return (type(uint256).max, false);\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The string to remove\\n     */\\n    function removeStorage(string[] storage A, string memory a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"String not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n}\",\"keccak256\":\"0x249b6dc922e7e1602f3c2e77075d3b9d259d3badc744241ecf2ca2ee1cbcd56c\",\"license\":\"Apache-2.0\"},\"contracts/external/Uint256ArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title Uint256ArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Uint256 Arrays\\n */\\nlibrary Uint256ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        uint256[] memory newUints = new uint256[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newUints[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newUints[aLength + j] = B[j];\\n        }\\n        return newUints;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(uint256[] storage A, uint256 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"uint256 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x102021415f8444ff563fc6d0082f39296f47c09ce73fb4cd642e700ac489eefe\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEscrow {\\n    \\n    /* ============ Structs ============ */\\n\\n    struct Range {\\n        uint256 min;                                // Minimum value\\n        uint256 max;                                // Maximum value\\n    }\\n\\n    struct Deposit {\\n        address depositor;                          // Address of depositor\\n        IERC20 token;                               // Address of deposit token\\n        uint256 amount;                             // Amount of deposit token\\n        Range intentAmountRange;                    // Range of take amount per intent\\n        // Deposit state\\n        bool acceptingIntents;                      // State: True if the deposit is accepting intents, False otherwise\\n        uint256 remainingDeposits;                  // State: Amount of remaining deposited liquidity\\n        uint256 outstandingIntentAmount;            // State: Amount of outstanding intents (may include expired intents)\\n        bytes32[] intentHashes;                     // State: Array of hashes of all open intents (may include some expired if not pruned)\\n    }\\n\\n    struct Currency {\\n        bytes32 code;                               // Currency code (keccak256 hash of the currency code)\\n        uint256 conversionRate;                     // Conversion rate of deposit token to fiat currency\\n    }\\n\\n    struct DepositVerifierData {\\n        address intentGatingService;                // Public key of gating service that will be used to verify intents\\n        string payeeDetails;                        // Payee details, could be both hash or raw details; verifier will decide how to parse it\\n        bytes data;                                 // Verification Data: Additional data used for payment verification; Can hold attester address\\n                                                    // in case of TLS proofs, domain key hash in case of zkEmail proofs, currency code etc.\\n    }\\n\\n    struct Intent {\\n        address owner;                              // Address of the intent owner  \\n        address to;                                 // Address to forward funds to (can be same as owner)\\n        uint256 depositId;                          // ID of the deposit the intent is associated with\\n        uint256 amount;                             // Amount of the deposit.token the owner wants to take\\n        uint256 timestamp;                          // Timestamp of the intent\\n        address paymentVerifier;                    // Address of the payment verifier corresponding to payment service the owner is \\n                                                    // going to pay with offchain\\n        bytes32 fiatCurrency;                       // Currency code that the owner is paying in offchain (keccak256 hash of the currency code)\\n        uint256 conversionRate;                     // Conversion rate of deposit token to fiat currency at the time of intent\\n    }\\n\\n    struct VerifierDataView {\\n        address verifier;\\n        DepositVerifierData verificationData;\\n        Currency[] currencies;\\n    }\\n\\n    struct DepositView {\\n        uint256 depositId;\\n        Deposit deposit;\\n        uint256 availableLiquidity;                 // Amount of liquidity available to signal intents (net of expired intents)\\n        VerifierDataView[] verifiers;\\n    }\\n\\n    struct IntentView {\\n        bytes32 intentHash;\\n        Intent intent;\\n        DepositView deposit;\\n    }\\n\\n    function getDepositFromIds(uint256[] memory _depositIds) external view returns (DepositView[] memory depositArray);\\n}\\n\",\"keccak256\":\"0xf6423407c5c106b1a09b60394eb9195350a2ee15395342a8ce2b7947413e235e\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/IBasePaymentVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IBasePaymentVerifier {\\n    function getCurrencies() external view returns (bytes32[] memory currencyCodes);\\n    function isCurrency(bytes32 _currencyCode) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc86aee71e72fa09c91d589971194cc67907e3e097f6c7c40d506c56d91dfce\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/IPaymentVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { IBasePaymentVerifier } from \\\"./IBasePaymentVerifier.sol\\\";\\n\\ninterface IPaymentVerifier is IBasePaymentVerifier {\\n\\n    /* ============ Structs ============ */\\n\\n    struct VerifyPaymentData {\\n        bytes paymentProof;                     // Payment proof\\n        address depositToken;                   // Address of deposit token locked in escrow\\n        uint256 intentAmount;                   // Amount of deposit token that offchain payer wants to take\\n        uint256 intentTimestamp;                // Timestamp at which intent was created. Offchain payment must be made after this timestamp.\\n        string payeeDetails;                    // Payee details (hash of payee's payment platform ID OR just raw ID)\\n        bytes32 fiatCurrency;                   // Fiat currency the offchain payer paid in\\n        uint256 conversionRate;                 // Conversion rate of deposit token to fiat currency\\n        bytes data;                             // Additional data required for verification (e.g. attester address)\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function verifyPayment(\\n        VerifyPaymentData calldata _verifyPaymentData\\n    )   \\n        external\\n        returns(bool success, bytes32 intentHash);\\n\\n}\\n\",\"keccak256\":\"0x9d0e63abc1ca7831fbd26a31e5732a77a5da5a5de465f89b749ea2ad65da4f62\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162005858380380620058588339810160408190526200003491620001da565b6200003f336200008c565b6000805460ff60a01b191690556080849052600c839055600d829055600e80546001600160a01b0319166001600160a01b0383161790556200008185620000dc565b50505050506200022f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000e66200015f565b6001600160a01b038116620001515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200015c816200008c565b50565b6000546001600160a01b03163314620001bb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000148565b565b80516001600160a01b0381168114620001d557600080fd5b919050565b600080600080600060a08688031215620001f357600080fd5b620001fe86620001bd565b94506020860151935060408601519250606086015191506200022360808701620001bd565b90509295509295909350565b60805161560662000252600039600081816105440152612ef301526156066000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c80638da5cb5b11610151578063b44e3d06116100c3578063d55f960d11610087578063d55f960d146106d6578063d9478d20146106e9578063da6b7f5d146106fc578063ecb3dc881461071d578063f13c46aa14610726578063f2fde38b1461073957600080fd5b8063b44e3d0614610660578063b55bca1714610673578063ba7ae4af14610696578063bbc06c95146106b6578063bf8d3f59146106c957600080fd5b8063a1a954b711610115578063a1a954b714610586578063a97ee9a41461058f578063b02c43d0146105a2578063b06f7f8f14610627578063b1626ebb1461063a578063b3fa4c011461064d57600080fd5b80638da5cb5b146104765780639021578a1461048757806395fe9a5e146105375780639a8a05921461053f5780639f9fb9681461056657600080fd5b80633b2fc295116101ea5780635efc5e7e116101ae5780635efc5e7e146103e65780636f9fa5ff14610406578063715018a61461042657806371a28f691461042e57806382e2dfee1461044157806388f5d53a1461045457600080fd5b80633b2fc2951461036f57806342987349146103825780635081d952146103955780635c975abb146103b55780635dd76515146103d357600080fd5b80632e2b4396116102315780632e2b4396146102f057806333289a461461030357806337a6b5e21461031657806337d124201461031e5780633a06ff6b1461033e57600080fd5b80631c0dbdf21461026e578063238c84941461029e57806329ec8996146102b55780632b8fcd88146102ca5780632c6bc3e5146102dd575b600080fd5b61028161027c366004614624565b61074c565b6040516001600160a01b0390911681526020015b60405180910390f35b6102a7600d5481565b604051908152602001610295565b6102c86102c336600461465b565b610784565b005b6102c86102d83660046146c8565b610826565b6102c86102eb36600461474d565b610b6b565b6102c86102fe36600461478a565b610cb1565b6102c86103113660046147d5565b6110dd565b6102c8611243565b61033161032c3660046147ee565b611255565b6040516102959190614ad9565b6102a761034c366004614aec565b600560209081526000938452604080852082529284528284209052825290205481565b6102a761037d366004614aec565b611286565b6102c86103903660046147d5565b6112c4565b6103a86103a33660046147ee565b61136c565b6040516102959190614b24565b600054600160a01b900460ff165b6040519015158152602001610295565b6102c86103e13660046147d5565b611490565b6102a76103f43660046147ee565b60026020526000908152604090205481565b6102a76104143660046147ee565b600b6020526000908152604090205481565b6102c861152f565b6103a861043c366004614bf4565b611541565b6102c861044f3660046147d5565b611600565b610467610462366004614c99565b611722565b60405161029593929190614cc9565b6000546001600160a01b0316610281565b6104e76104953660046147d5565b600860205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b039687169795871696949593949293919092169188565b604080516001600160a01b03998a16815297891660208901528701959095526060860193909352608085019190915290931660a083015260c082019290925260e081019190915261010001610295565b6102c861186a565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b6105796105743660046147d5565b61187a565b6040516102959190614cff565b6102a7600c5481565b6102c861059d366004614d20565b611d1e565b6106146105b03660046147d5565b6007602081815260009283526040928390208054600182015460028301548651808801909752600384015487526004840154948701949094526005830154600684015493909501546001600160a01b03928316969190921694909260ff9091169187565b6040516102959796959493929190614d3d565b6102c8610635366004614dd6565b611d67565b6102a761064836600461465b565b6123a0565b6102c861065b3660046147ee565b6123d1565b6102c861066e36600461465b565b612489565b6103c36106813660046147ee565b600a6020526000908152604090205460ff1681565b6106a96106a4366004614eaa565b6125cf565b6040516102959190614eeb565b6102c86106c43660046147ee565b612686565b6009546103c39060ff1681565b6102c86106e43660046147d5565b612716565b600e54610281906001600160a01b031681565b61070f61070a3660046147d5565b612861565b604051610295929190614f40565b6102a7600f5481565b6103316107343660046147d5565b612877565b6102c86107473660046147ee565b612924565b6004602052816000526040600020818154811061076857600080fd5b6000918252602090912001546001600160a01b03169150829050565b61078c61299d565b6001600160a01b0382166000908152600a602052604090205460ff166107cd5760405162461bcd60e51b81526004016107c490614f88565b60405180910390fd5b6001600160a01b0382166000818152600b6020908152604091829020849055815192835282018390527ff9ce6495a12707b205517748b8b564c44d048ea4b8e0ec4c4504edb7cf179e7c91015b60405180910390a15050565b61082e6129f7565b600087815260076020526040902061084c8882898989898989612a44565b600061085933878b612fb0565b9050878260060154101561090e576000806108738b613038565b91509150898185600601546108889190614fd3565b10156108cd5760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f756768206c697175696469747960601b60448201526064016107c4565b6108d78483613203565b808460060160008282546108eb9190614fd3565b92505081905550808460070160008282546109069190614fec565b909155505050505b6000600560008b81526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000878152602001908152602001600020549050604051806101000160405280336001600160a01b03168152602001896001600160a01b031681526020018b81526020018a8152602001428152602001886001600160a01b03168152602001878152602001828152506008600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c0820151816006015560e082015181600701559050508160026000336001600160a01b03166001600160a01b031681526020019081526020016000208190555088836006016000828254610abc9190614fec565b9250508190555088836007016000828254610ad79190614fd3565b9091555050600883018054600181018255600091825260209182902001839055604080513381526001600160a01b038b8116938201939093529081018b905260608101889052608081018390524260a0820152908816908b9084907fc2a37468e454b839a2cff965f5933f675c886d1304fa1d29ce661503166874f59060c00160405180910390a450505050505050505050565b610b736129f7565b6000848152600760209081526040808320600583528184206001600160a01b03808916865290845282852087865290935292205482549091163314610bca5760405162461bcd60e51b81526004016107c490614fff565b80600003610c255760405162461bcd60e51b815260206004820152602260248201527f43757272656e6379206f72207665726966696572206e6f7420737570706f7274604482015261195960f21b60648201526084016107c4565b60008311610c455760405162461bcd60e51b81526004016107c490615036565b60008681526005602090815260408083206001600160a01b0389168085529083528184208885528352928190208690555185815286929189917f4596f41d8373f6191a26628c8a22c2bfc58fda2c24b5db361f564592ab798d78910160405180910390a4505050505050565b610cb96129f7565b600081815260086020908152604080832081516101008101835281546001600160a01b0390811682526001830154811682860152600283015482850181905260038401546060840152600484015460808401526005840154821660a08401908152600685015460c085015260079485015460e0850152908752929094529190932092519092918116610d5d5760405162461bcd60e51b81526004016107c49061507c565b6040808401516000908152600360209081528282206001600160a01b038086168452908252838320845160608101909552805490911684526001810180549394939192840191610dac906150ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd8906150ab565b8015610e255780601f10610dfa57610100808354040283529160200191610e25565b820191906000526020600020905b815481529060010190602001808311610e0857829003601f168201915b50505050508152602001600282018054610e3e906150ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6a906150ab565b8015610eb75780601f10610e8c57610100808354040283529160200191610eb7565b820191906000526020600020905b815481529060010190602001808311610e9a57829003601f168201915b5050505050815250509050600080836001600160a01b03166384c7b4396040518061010001604052808c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018860010160009054906101000a90046001600160a01b03166001600160a01b031681526020018960600151815260200189608001518152602001866020015181526020018960c0015181526020018960e00151815260200186604001518152506040518263ffffffff1660e01b8152600401610fa691906150df565b60408051808303816000875af1158015610fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe8919061517c565b91509150816110395760405162461bcd60e51b815260206004820152601b60248201527f5061796d656e7420766572696669636174696f6e206661696c6564000000000060448201526064016107c4565b86811461107e5760405162461bcd60e51b8152602060048201526013602482015272092dcecc2d8d2c840d2dce8cadce840d0c2e6d606b1b60448201526064016107c4565b611088858861326a565b85606001518560070160008282546110a09190614fec565b9091555050600185015460408701516001600160a01b03909116906110c5908761336d565b6110d18183898861346b565b50505050505050505050565b600081815260076020526040902080546001600160a01b031633146111145760405162461bcd60e51b81526004016107c490614fff565b60008061112084613038565b9150915061112e8383613203565b60008184600601546111409190614fd3565b9050818460070160008282546111569190614fec565b909155505083546040518281526001600160a01b039091169086907fae1f357660ab777dcfd38c0ab6357834684ec26289ecfa07ec65dbf6c3c643129060200160405180910390a36000600685015560058401805460ff1916905560018401546001600160a01b03166111c9868661336d565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b0382169063a9059cbb906044016020604051808303816000875af1158015611216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123a91906151aa565b50505050505050565b61124b61299d565b611253613703565b565b61125d61443b565b6001600160a01b03821660009081526002602052604090205461127f81612877565b9392505050565b600660205282600052604060002060205281600052604060002081815481106112ae57600080fd5b9060005260206000200160009250925050505481565b6112cc61299d565b806000036113305760405162461bcd60e51b815260206004820152602b60248201527f4d617820696e74656e742065787069726174696f6e20706572696f642063616e60448201526a6e6f74206265207a65726f60a81b60648201526084016107c4565b600c8190556040518181527f55e3f6b95de9a0ec782f892e93fafe4e56be0696df204ddf8e0a40a9a713a803906020015b60405180910390a150565b6001600160a01b03811660009081526001602090815260408083208054825181850281018501909352808352606094938301828280156113cb57602002820191906000526020600020905b8154815260200190600101908083116113b7575b5050505050905080516001600160401b038111156113eb576113eb614b86565b60405190808252806020026020018201604052801561142457816020015b61141161449c565b8152602001906001900390816114095790505b50915060005b8151811015611489576000828281518110611447576114476151c7565b6020026020010151905061145a8161187a565b84838151811061146c5761146c6151c7565b60200260200101819052505080611482906151dd565b905061142a565b5050919050565b61149861299d565b66b1a2bc2ec500008111156114fa5760405162461bcd60e51b815260206004820152602260248201527f4665652063616e6e6f742062652067726561746572207468616e206d61782066604482015261656560f01b60648201526084016107c4565b600d8190556040518181527f44f48e1b871e6db1e909a7b253b054b7150a0b4ddf4d59b159c827d82e72567090602001611361565b61153761299d565b6112536000613758565b606081516001600160401b0381111561155c5761155c614b86565b60405190808252806020026020018201604052801561159557816020015b61158261449c565b81526020019060019003908161157a5790505b50905060005b82518110156115fa5760008382815181106115b8576115b86151c7565b602002602001015190506115cb8161187a565b8383815181106115dd576115dd6151c7565b602002602001018190525050806115f3906151dd565b905061159b565b50919050565b600081815260086020908152604080832081516101008101835281546001600160a01b0390811682526001830154811682860152600283015482850181905260038401546060840152600484015460808401526005840154821660a0840152600684015460c084015260079384015460e084015286529190935292208151919290911661169f5760405162461bcd60e51b81526004016107c49061507c565b80546001600160a01b031633146116c85760405162461bcd60e51b81526004016107c490614fff565b6116d2818461326a565b81606001518160070160008282546116ea9190614fec565b9091555050600181015460408301516001600160a01b039091169061170f908361336d565b61171c818585600061346b565b50505050565b6003602090815260009283526040808420909152908252902080546001820180546001600160a01b039092169291611759906150ab565b80601f0160208091040260200160405190810160405280929190818152602001828054611785906150ab565b80156117d25780601f106117a7576101008083540402835291602001916117d2565b820191906000526020600020905b8154815290600101906020018083116117b557829003601f168201915b5050505050908060020180546117e7906150ab565b80601f0160208091040260200160405190810160405280929190818152602001828054611813906150ab565b80156118605780601f1061183557610100808354040283529160200191611860565b820191906000526020600020905b81548152906001019060200180831161184357829003601f168201915b5050505050905083565b61187261299d565b6112536137a8565b61188261449c565b600082815260076020818152604080842081516101008101835281546001600160a01b0390811682526001830154168185015260028201548184015282518084018452600383015481526004830154818601526060820152600582015460ff1615156080820152600682015460a08201529381015460c0850152600881018054835181860281018601909452808452919360e0860193929083018282801561194957602002820191906000526020600020905b815481526020019060010190808311611935575b5050505050815250509050600061195f84613038565b60008681526004602052604081205491935091506001600160401b0381111561198a5761198a614b86565b6040519080825280602002602001820160405280156119c357816020015b6119b061451b565b8152602001906001900390816119a85790505b50905060005b8151811015611ce55760008681526004602052604081208054839081106119f2576119f26151c7565b60009182526020808320909101548983526006825260408084206001600160a01b0390921680855291909252908220549092506001600160401b03811115611a3c57611a3c614b86565b604051908082528060200260200182016040528015611a8157816020015b6040805180820190915260008082526020820152815260200190600190039081611a5a5790505b50905060005b8151811015611b3c5760008981526006602090815260408083206001600160a01b03871684529091528120805483908110611ac457611ac46151c7565b60009182526020808320909101546040805180820182528281528e8552600584528185206001600160a01b038a16865284528185208386528452932054918301919091528451909250849084908110611b1f57611b1f6151c7565b60200260200101819052505080611b35906151dd565b9050611a87565b5060408051606080820183526001600160a01b0380861680845260008d815260036020908152868220928252918252859020855193840190955284549091168252600184018054939482860194909284019190611b98906150ab565b80601f0160208091040260200160405190810160405280929190818152602001828054611bc4906150ab565b8015611c115780601f10611be657610100808354040283529160200191611c11565b820191906000526020600020905b815481529060010190602001808311611bf457829003601f168201915b50505050508152602001600282018054611c2a906150ab565b80601f0160208091040260200160405190810160405280929190818152602001828054611c56906150ab565b8015611ca35780601f10611c7857610100808354040283529160200191611ca3565b820191906000526020600020905b815481529060010190602001808311611c8657829003601f168201915b505050505081525050815260200182815250848481518110611cc757611cc76151c7565b6020026020010181905250505080611cde906151dd565b90506119c9565b506040518060800160405280868152602001848152602001838560a00151611d0d9190614fd3565b815260200191909152949350505050565b611d2661299d565b6009805460ff19168215159081179091556040519081527fe8fef795bfb273899eace8cca02af6e81c21dd9e983e86fbb565f2d5263b74b690602001611361565b611d6f6129f7565b611d8d88611d82368a90038a018a6151f6565b8888888888886137eb565b600f805460009182611d9e836151dd565b90915550336000818152600160208181526040808420805493840181558452928190209091018490558151610100810183529283526001600160a01b038e169083015281018b905290915060608101611dfc368b90038b018b6151f6565b8152600160208083019190915260408083018d90526000606084018190528151818152928301909152608090920191509052600082815260076020818152604092839020845181546001600160a01b039182166001600160a01b0319918216178355868401516001840180549190931691161790559284015160028401556060840151805160038501558101516004840155608084015160058401805491151560ff1990921691909117905560a0840151600684015560c08401519183019190915560e08301518051611ed59260088501920190614570565b50905050896001600160a01b0316336001600160a01b0316827f68a835da25522a6767ad280764ce2daed02507359a889e4a18219458d2f356b48c8c604051611f3592919091825280356020808401919091520135604082015260600190565b60405180910390a460005b8681101561231b576000888883818110611f5c57611f5c6151c7565b9050602002016020810190611f7191906147ee565b60008481526003602090815260408083206001600160a01b03851684529091529020600101805491925090611fa5906150ab565b159050611ff45760405162461bcd60e51b815260206004820152601c60248201527f5665726966696572206461746120616c7265616479206578697374730000000060448201526064016107c4565b868683818110612006576120066151c7565b90506020028101906120189190615228565b60008481526003602090815260408083206001600160a01b03861684529091529020612044828261539b565b50506000838152600460209081526040822080546001810182559083529082200180546001600160a01b0319166001600160a01b038416179055878784818110612090576120906151c7565b90506020028101906120a29190615228565b6120b0906020810190615248565b6040516020016120c19291906154aa565b60405160208183030381529060405280519060200120905080826001600160a01b0316857ff3974774ee5983730c946903fcd556c6cce507f5ac938d7cc01dfef68b27c4c88b8b88818110612118576121186151c7565b905060200281019061212a9190615228565b6121389060208101906147ee565b6040516001600160a01b03909116815260200160405180910390a460005b868685818110612168576121686151c7565b905060200281019061217a91906154ba565b9050811015612305576000878786818110612197576121976151c7565b90506020028101906121a991906154ba565b838181106121b9576121b96151c7565b9050604002018036038101906121cf91906151f6565b60008781526005602090815260408083206001600160a01b03891684528252808320845184529091529020549091501561225b5760405162461bcd60e51b815260206004820152602760248201527f43757272656e637920636f6e76657273696f6e207261746520616c72656164796044820152662065786973747360c81b60648201526084016107c4565b6020818101805160008981526005845260408082206001600160a01b038a16808452908652818320875184528652818320939093558a8252600685528082208383528552808220865181546001810183559184529286902001919091558451925190519081529192909189917f074bccd7762d78b7ef74448569e5c21e47ec220937f028a23b14f2eb0caf39aa910160405180910390a450806122fd816151dd565b915050612156565b5050508080612313906151dd565b915050611f40565b506040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b038b16906323b872dd906064016020604051808303816000875af115801561236f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239391906151aa565b5050505050505050505050565b600160205281600052604060002081815481106123bc57600080fd5b90600052602060002001600091509150505481565b6123d961299d565b6001600160a01b03811661243b5760405162461bcd60e51b8152602060048201526024808201527f46656520726563697069656e742063616e6e6f74206265207a65726f206164646044820152637265737360e01b60648201526084016107c4565b600e80546001600160a01b0319166001600160a01b0383169081179091556040519081527f594ad6ee98bfc0c73e6d15fd4e762502f359e05d26907b7fa1ff82eb5e99f6e490602001611361565b61249161299d565b6001600160a01b0382166124f75760405162461bcd60e51b815260206004820152602760248201527f5061796d656e742076657269666965722063616e6e6f74206265207a65726f206044820152666164647265737360c81b60648201526084016107c4565b6001600160a01b0382166000908152600a602052604090205460ff161561256c5760405162461bcd60e51b8152602060048201526024808201527f5061796d656e7420766572696669657220616c72656164792077686974656c696044820152631cdd195960e21b60648201526084016107c4565b6001600160a01b0382166000818152600a60209081526040808320805460ff19166001179055600b825291829020849055815192835282018390527f809f3bf19255b5a32028899f5e2a31dbf53d245838172acb4a3eb8ef8b19f4d6910161081a565b6060816001600160401b038111156125e9576125e9614b86565b60405190808252806020026020018201604052801561262257816020015b61260f61443b565b8152602001906001900390816126075790505b50905060005b8281101561267f57612651848483818110612645576126456151c7565b90506020020135612877565b828281518110612663576126636151c7565b602002602001018190525080612678906151dd565b9050612628565b5092915050565b61268e61299d565b6001600160a01b0381166000908152600a602052604090205460ff166126c65760405162461bcd60e51b81526004016107c490614f88565b6001600160a01b0381166000818152600a6020908152604091829020805460ff1916905590519182527efcc74f6f8ff0545ccd7e12a70bac45037644546df378bc3bd52973fcd7c05c9101611361565b600081815260086020908152604080832081516101008101835281546001600160a01b039081168252600183015481169482019490945260028201549281019290925260038101546060830152600481015460808301819052600582015490931660a0830152600681015460c08301526007015460e082015291036127ad5760405162461bcd60e51b81526004016107c49061507c565b80516001600160a01b031633146128065760405162461bcd60e51b815260206004820152601f60248201527f53656e646572206d7573742062652074686520696e74656e74206f776e65720060448201526064016107c4565b6040808201516000908152600760205220612821818461326a565b81606001518160060160008282546128399190614fd3565b90915550506060820151600782018054600090612857908490614fec565b9091555050505050565b6060600061286e83613038565b91509150915091565b61287f61443b565b600082815260086020908152604080832081516101008101835281546001600160a01b039081168252600183015481169482019490945260028201549281018390526003820154606082015260048201546080820152600582015490931660a0840152600681015460c08401526007015460e08301529091906129019061187a565b604080516060810182529586526020860193909352918401919091525090919050565b61292c61299d565b6001600160a01b0381166129915760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107c4565b61299a81613758565b50565b6000546001600160a01b031633146112535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c4565b600054600160a01b900460ff16156112535760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107c4565b3360009081526002602052604090205415612aa15760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742068617320756e66756c66696c6c656420696e74656e74000060448201526064016107c4565b86546001600160a01b0316612af15760405162461bcd60e51b815260206004820152601660248201527511195c1bdcda5d08191bd95cc81b9bdd08195e1a5cdd60521b60448201526064016107c4565b600587015460ff16612b455760405162461bcd60e51b815260206004820181905260248201527f4465706f736974206973206e6f7420616363657074696e6720696e74656e747360448201526064016107c4565b6003870154861015612bb85760405162461bcd60e51b815260206004820152603660248201527f5369676e616c656420616d6f756e74206d7573742062652067726561746572206044820152751d1a185b881b5a5b881a5b9d195b9d08185b5bdd5b9d60521b60648201526084016107c4565b6004870154861115612c285760405162461bcd60e51b815260206004820152603360248201527f5369676e616c656420616d6f756e74206d757374206265206c657373207468616044820152721b881b585e081a5b9d195b9d08185b5bdd5b9d606a1b60648201526084016107c4565b6001600160a01b038516612c7e5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742073656e6420746f207a65726f2061646472657373000000000060448201526064016107c4565b60008881526003602090815260408083206001600160a01b038089168552908352818420825160608101909352805490911682526001810180549293919291840191612cc9906150ab565b80601f0160208091040260200160405190810160405280929190818152602001828054612cf5906150ab565b8015612d425780601f10612d1757610100808354040283529160200191612d42565b820191906000526020600020905b815481529060010190602001808311612d2557829003601f168201915b50505050508152602001600282018054612d5b906150ab565b80601f0160208091040260200160405190810160405280929190818152602001828054612d87906150ab565b8015612dd45780601f10612da957610100808354040283529160200191612dd4565b820191906000526020600020905b815481529060010190602001808311612db757829003601f168201915b5050505050815250509050806020015151600003612e345760405162461bcd60e51b815260206004820152601e60248201527f5061796d656e74207665726966696572206e6f7420737570706f72746564000060448201526064016107c4565b60008981526005602090815260408083206001600160a01b038916845282528083208784529091528120549003612ea65760405162461bcd60e51b815260206004820152601660248201527510dd5c9c995b98de481b9bdd081cdd5c1c1bdc9d195960521b60448201526064016107c4565b80516001600160a01b038116156110d15760408051602081018c90529081018990526bffffffffffffffffffffffff19606089811b82168184015288901b166074820152608881018690527f000000000000000000000000000000000000000000000000000000000000000060a8820152612f649060c80160408051601f198184030181526020601f880181900481028401810190925286835291908790879081908401838280828437600092019190915250869250613cf5915050565b6110d15760405162461bcd60e51b815260206004820181905260248201527f496e76616c696420676174696e672073657276696365207369676e617475726560448201526064016107c4565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b16603482015260488101829052426068820152600090819060880160408051601f198184030181529190528051602090910120905061302f7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182615519565b95945050505050565b6000818152600760209081526040808320600801805482518185028101850190935280835260609493849392919083018282801561309557602002820191906000526020600020905b815481526020019060010190808311613081575b5050505050905080516001600160401b038111156130b5576130b5614b86565b6040519080825280602002602001820160405280156130de578160200160208202803683370190505b50925060005b81518110156131fc57600060086000848481518110613105576131056151c7565b602090810291909101810151825281810192909252604090810160002081516101008101835281546001600160a01b039081168252600183015481169482019490945260028201549281019290925260038101546060830152600481015460808301819052600582015490931660a0830152600681015460c08301526007015460e0820152600c54909250429161319c9190614fd3565b10156131eb578282815181106131b4576131b46151c7565b60200260200101518583815181106131ce576131ce6151c7565b602090810291909101015260608101516131e89085614fd3565b93505b506131f5816151dd565b90506130e4565b5050915091565b60005b8151811015613265576000801b828281518110613225576132256151c7565b6020026020010151146132555761325583838381518110613248576132486151c7565b602002602001015161326a565b61325e816151dd565b9050613206565b505050565b600081815260086020818152604080842081516101008101835281546001600160a01b0390811680835260018401805483168488015260028086018054868901526003870180546060880152600488018054608089015260058901805490971660a089015260068901805460c08a015260078a01805460e08b0152968e52938b52988c208c90558c8c52988a905286546001600160a01b0319908116909755825487169092559089905595889055938790558054909216909155918490559290925561333890840183613d40565b604080820151905183907fe8a865b4bab023c399cbd1f2cdd0df2199beb6e5012a4bd2d7691cf7e4199d5a90600090a3505050565b6000816006015482600701546133839190614fd3565b9050806000036132655781546001600160a01b031660009081526001602052604090206133b09084613e68565b6133b983613f0d565b8154604080518581526001600160a01b0390921660208301527f8ac07cc6e38c6222dd0309c80353c1962354bacf222b825d7401cc80e93ff3cc910160405180910390a16000838152600760208190526040822080546001600160a01b03199081168255600182018054909116905560028101839055600381018390556004810183905560058101805460ff19169055600681018390559081018290559061346460088301826145bb565b5050505050565b600080600d546000146135ef57670de0b6b3a7640000600d548560600151613493919061552d565b61349d9190615544565b91506001600160a01b0383161561355e576001600160a01b0383166000908152600b6020526040902054670de0b6b3a7640000906134db908461552d565b6134e59190615544565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390529192509087169063a9059cbb906044016020604051808303816000875af1158015613538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061355c91906151aa565b505b600e546001600160a01b038088169163a9059cbb911661357e8486614fec565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156135c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ed91906151aa565b505b60008285606001516136019190614fec565b602086015160405163a9059cbb60e01b81526001600160a01b0391821660048201526024810183905291925088169063a9059cbb906044016020604051808303816000875af1158015613658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367c91906151aa565b50836001600160a01b03168560400151877fa14478886b7c7d8bcb5da958a490bef7c9ef76654d2f4b65a04d94533bf25dc98860000151896020015186888a6136c59190614fec565b604080516001600160a01b0395861681529490931660208501529183015260608201526080810187905260a00160405180910390a450505050505050565b61370b6140e5565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6137b06129f7565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861373b3390565b865160000361383c5760405162461bcd60e51b815260206004820181905260248201527f4d696e20696e74656e7420616d6f756e742063616e6e6f74206265207a65726f60448201526064016107c4565b6020870151875111156138af5760405162461bcd60e51b815260206004820152603560248201527f4d696e20696e74656e7420616d6f756e74206d757374206265206c65737320746044820152741a185b881b585e081a5b9d195b9d08185b5bdd5b9d605a1b60648201526084016107c4565b86518810156139165760405162461bcd60e51b815260206004820152602d60248201527f416d6f756e74206d7573742062652067726561746572207468616e206d696e2060448201526c1a5b9d195b9d08185b5bdd5b9d609a1b60648201526084016107c4565b84831461397f5760405162461bcd60e51b815260206004820152603160248201527f56657269666965727320616e64206465706f73697456657269666965724461746044820152700c240d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084016107c4565b8481146139df5760405162461bcd60e51b815260206004820152602860248201527f56657269666965727320616e642063757272656e63696573206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016107c4565b60005b85811015613cea5760008787838181106139fe576139fe6151c7565b9050602002016020810190613a1391906147ee565b90506001600160a01b038116613a6b5760405162461bcd60e51b815260206004820152601f60248201527f56657269666965722063616e6e6f74206265207a65726f20616464726573730060448201526064016107c4565b6001600160a01b0381166000908152600a602052604090205460ff1680613a94575060095460ff165b613ab05760405162461bcd60e51b81526004016107c490614f88565b858583818110613ac257613ac26151c7565b9050602002810190613ad49190615228565b613ae2906020810190615248565b9050600003613b335760405162461bcd60e51b815260206004820152601d60248201527f50617965652064657461696c732063616e6e6f7420626520656d70747900000060448201526064016107c4565b60005b848484818110613b4857613b486151c7565b9050602002810190613b5a91906154ba565b9050811015613cd557816001600160a01b0316633e1d0edc868686818110613b8457613b846151c7565b9050602002810190613b9691906154ba565b84818110613ba657613ba66151c7565b905060400201600001356040518263ffffffff1660e01b8152600401613bce91815260200190565b602060405180830381865afa158015613beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c0f91906151aa565b613c665760405162461bcd60e51b815260206004820152602260248201527f43757272656e6379206e6f7420737570706f727465642062792076657269666960448201526132b960f11b60648201526084016107c4565b6000858585818110613c7a57613c7a6151c7565b9050602002810190613c8c91906154ba565b83818110613c9c57613c9c6151c7565b9050604002016020013511613cc35760405162461bcd60e51b81526004016107c490615036565b80613ccd816151dd565b915050613b36565b50508080613ce2906151dd565b9150506139e2565b505050505050505050565b825160208401207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c812061302f6001600160a01b0384168286614135565b600080613d9c84805480602002602001604051908101604052809291908181526020018280548015613d9157602002820191906000526020600020905b815481526020019060010190808311613d7d575b505050505084614196565b9150915080613de55760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b60448201526064016107c4565b8354600090613df690600190614fec565b9050808314613e3b57848181548110613e1157613e116151c7565b9060005260206000200154858481548110613e2e57613e2e6151c7565b6000918252602090912001555b84805480613e4b57613e4b615558565b600190038181906000526020600020016000905590555050505050565b600080613ec484805480602002602001604051908101604052809291908181526020018280548015613eb957602002820191906000526020600020905b815481526020019060010190808311613ea5575b5050505050846141f9565b9150915080613de55760405162461bcd60e51b81526020600482015260156024820152743ab4b73a191a9b103737ba1034b71030b93930bc9760591b60448201526064016107c4565b600081815260046020908152604080832080548251818502810185019093528083529192909190830182828015613f6d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613f4f575b5050505050905060005b8151811015613265576000828281518110613f9457613f946151c7565b60209081029190910181015160008681526003835260408082206001600160a01b038416835290935291822080546001600160a01b031916815590925090613fdf60018301826145d9565b613fed6002830160006145d9565b505060008481526006602090815260408083206001600160a01b038516845282528083208054825181850281018501909352808352919290919083018282801561405657602002820191906000526020600020905b815481526020019060010190808311614042575b5050505050905060005b81518110156140cf5760008681526005602090815260408083206001600160a01b0387168452909152812083519091908490849081106140a2576140a26151c7565b602002602001015181526020019081526020016000206000905580806140c7906151dd565b915050614060565b50505080806140dd906151dd565b915050613f77565b600054600160a01b900460ff166112535760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107c4565b60008060006141448585614249565b9092509050600081600481111561415d5761415d61556e565b14801561417b5750856001600160a01b0316826001600160a01b0316145b8061418c575061418c86868661428b565b9695505050505050565b81516000908190815b818110156141e657848682815181106141ba576141ba6151c7565b6020026020010151036141d4579250600191506141f29050565b806141de816151dd565b91505061419f565b50600019600092509250505b9250929050565b81516000908190815b818110156141e6578486828151811061421d5761421d6151c7565b602002602001015103614237579250600191506141f29050565b80614241816151dd565b915050614202565b600080825160410361427f5760208301516040840151606085015160001a61427387828585614377565b945094505050506141f2565b506000905060026141f2565b6000806000856001600160a01b0316631626ba7e60e01b86866040516024016142b5929190615584565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516142f391906155a5565b600060405180830381855afa9150503d806000811461432e576040519150601f19603f3d011682016040523d82523d6000602084013e614333565b606091505b509150915081801561434757506020815110155b801561418c57508051630b135d3f60e11b9061436c90830160209081019084016155b7565b149695505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156143ae5750600090506003614432565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614402573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661442b57600060019250925050614432565b9150600090505b94509492505050565b6040805160608082018352600080835283516101008101855281815260208181018390529481018290529182018190526080820181905260a0820181905260c0820181905260e08201529091820190815260200161449761449c565b905290565b604051806080016040528060008152602001614507604080516101008101825260008082526020808301829052828401829052835180850190945281845283015290606082019081526020016000151581526020016000815260200160008152602001606081525090565b815260200160008152602001606081525090565b604051806060016040528060006001600160a01b03168152602001614563604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001606081525090565b8280548282559060005260206000209081019282156145ab579160200282015b828111156145ab578251825591602001919060010190614590565b506145b792915061460f565b5090565b508054600082559060005260206000209081019061299a919061460f565b5080546145e5906150ab565b6000825580601f106145f5575050565b601f01602090049060005260206000209081019061299a91905b5b808211156145b75760008155600101614610565b6000806040838503121561463757600080fd5b50508035926020909101359150565b6001600160a01b038116811461299a57600080fd5b6000806040838503121561466e57600080fd5b823561467981614646565b946020939093013593505050565b60008083601f84011261469957600080fd5b5081356001600160401b038111156146b057600080fd5b6020830191508360208285010111156141f257600080fd5b600080600080600080600060c0888a0312156146e357600080fd5b873596506020880135955060408801356146fc81614646565b9450606088013561470c81614646565b93506080880135925060a08801356001600160401b0381111561472e57600080fd5b61473a8a828b01614687565b989b979a50959850939692959293505050565b6000806000806080858703121561476357600080fd5b84359350602085013561477581614646565b93969395505050506040820135916060013590565b60008060006040848603121561479f57600080fd5b83356001600160401b038111156147b557600080fd5b6147c186828701614687565b909790965060209590950135949350505050565b6000602082840312156147e757600080fd5b5035919050565b60006020828403121561480057600080fd5b813561127f81614646565b600081518084526020808501945080840160005b8381101561483b5781518752958201959082019060010161481f565b509495945050505050565b60005b83811015614861578181015183820152602001614849565b50506000910152565b60008151808452614882816020860160208601614846565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b810191508286016000805b8681101561497e578385038a52825180516001600160a01b03908116875287820151606089890181905281519092168289015280890151608089018390529061490160c08a018361486a565b6040918201518a8203605f190160a08c0152909350909150614923838261486a565b938201518985038a8401528051808652908b01948794508b0191505b80841015614968578451805183528b01518b830152938a0193600193909301929082019061493f565b509c89019c9750505092860192506001016148b5565b509298975050505050505050565b80518252600060208201516080602085015260018060a01b03815116608085015260208101516149c760a08601826001600160a01b03169052565b50604081015160c08501526060810151805160e086015260208101516101008601525060808101516101206149ff8187018315159052565b60a083015161014087015260c083015161016087015260e08301519250806101808701525050614a336101a085018261480b565b9050604083015160408501526060830151848203606086015261302f8282614896565b600061014082518452602083015160018060a01b038082511660208701528060208301511660408701526040820151606087015260608201516080870152608082015160a08701528060a08301511660c08701525060c081015160e086015260e08101516101008601525060408301518161012086015261302f8286018261498c565b60208152600061127f6020830184614a56565b600080600060608486031215614b0157600080fd5b833592506020840135614b1381614646565b929592945050506040919091013590565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614b7957603f19888603018452614b6785835161498c565b94509285019290850190600101614b4b565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715614bbe57614bbe614b86565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614bec57614bec614b86565b604052919050565b60006020808385031215614c0757600080fd5b82356001600160401b0380821115614c1e57600080fd5b818501915085601f830112614c3257600080fd5b813581811115614c4457614c44614b86565b8060051b9150614c55848301614bc4565b8181529183018401918481019088841115614c6f57600080fd5b938501935b83851015614c8d57843582529385019390850190614c74565b98975050505050505050565b60008060408385031215614cac57600080fd5b823591506020830135614cbe81614646565b809150509250929050565b6001600160a01b0384168152606060208201819052600090614ced9083018561486a565b828103604084015261418c818561486a565b60208152600061127f602083018461498c565b801515811461299a57600080fd5b600060208284031215614d3257600080fd5b813561127f81614d12565b6001600160a01b03888116825287166020820152604081018690526101008101614d74606083018780518252602090810151910152565b93151560a082015260c081019290925260e090910152949350505050565b60008083601f840112614da457600080fd5b5081356001600160401b03811115614dbb57600080fd5b6020830191508360208260051b85010111156141f257600080fd5b6000806000806000806000806000898b0360e0811215614df557600080fd5b8a35614e0081614646565b995060208b013598506040603f1982011215614e1b57600080fd5b5060408a01965060808a01356001600160401b0380821115614e3c57600080fd5b614e488d838e01614d92565b909850965060a08c0135915080821115614e6157600080fd5b614e6d8d838e01614d92565b909650945060c08c0135915080821115614e8657600080fd5b50614e938c828d01614d92565b915080935050809150509295985092959850929598565b60008060208385031215614ebd57600080fd5b82356001600160401b03811115614ed357600080fd5b614edf85828601614d92565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614b7957603f19888603018452614f2e858351614a56565b94509285019290850190600101614f12565b604080825283519082018190526000906020906060840190828701845b82811015614f7957815184529284019290840190600101614f5d565b50505092019290925292915050565b6020808252818101527f5061796d656e74207665726966696572206e6f742077686974656c6973746564604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115614fe657614fe6614fbd565b92915050565b81810381811115614fe657614fe6614fbd565b6020808252601c908201527f43616c6c6572206d75737420626520746865206465706f7369746f7200000000604082015260600190565b60208082526026908201527f436f6e76657273696f6e2072617465206d75737420626520677265617465722060408201526507468616e20360d41b606082015260800190565b602080825260159082015274125b9d195b9d08191bd95cc81b9bdd08195e1a5cdd605a1b604082015260600190565b600181811c908216806150bf57607f821691505b6020821081036115fa57634e487b7160e01b600052602260045260246000fd5b60208152600082516101008060208501526150fe61012085018361486a565b9150602085015161511a60408601826001600160a01b03169052565b5060408501516060850152606085015160808501526080850151601f19808685030160a087015261514b848361486a565b935060a087015160c087015260c087015160e087015260e087015191508086850301838701525061418c838261486a565b6000806040838503121561518f57600080fd5b825161519a81614d12565b6020939093015192949293505050565b6000602082840312156151bc57600080fd5b815161127f81614d12565b634e487b7160e01b600052603260045260246000fd5b6000600182016151ef576151ef614fbd565b5060010190565b60006040828403121561520857600080fd5b615210614b9c565b82358152602083013560208201528091505092915050565b60008235605e1983360301811261523e57600080fd5b9190910192915050565b6000808335601e1984360301811261525f57600080fd5b8301803591506001600160401b0382111561527957600080fd5b6020019150368190038213156141f257600080fd5b601f82111561326557600081815260208120601f850160051c810160208610156152b55750805b601f850160051c820191505b818110156152d4578281556001016152c1565b505050505050565b6001600160401b038311156152f3576152f3614b86565b6153078361530183546150ab565b8361528e565b6000601f84116001811461533b57600085156153235750838201355b600019600387901b1c1916600186901b178355613464565b600083815260209020601f19861690835b8281101561536c578685013582556020948501946001909201910161534c565b50868210156153895760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81356153a681614646565b81546001600160a01b0319166001600160a01b0391909116178155600181810160206153d485820186615248565b6001600160401b038111156153eb576153eb614b86565b6153ff816153f986546150ab565b8661528e565b6000601f821160018114615433576000831561541b5750838201355b600019600385901b1c1916600184901b178655615488565b600086815260209020601f19841690835b828110156154615786850135825593870193908901908701615444565b508482101561547e5760001960f88660031b161c19848701351681555b50508683881b0186555b5050505050505061549c6040830183615248565b61171c8183600286016152dc565b8183823760009101908152919050565b6000808335601e198436030181126154d157600080fd5b8301803591506001600160401b038211156154eb57600080fd5b6020019150600681901b36038213156141f257600080fd5b634e487b7160e01b600052601260045260246000fd5b60008261552857615528615503565b500690565b8082028115828204841417614fe657614fe6614fbd565b60008261555357615553615503565b500490565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b82815260406020820152600061559d604083018461486a565b949350505050565b6000825161523e818460208701614846565b6000602082840312156155c957600080fd5b505191905056fea264697066735822122001b6bd96bd51b27342ee9a9751de118d76208960366a4c9218c404f8ca65f0cd64736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addWhitelistedPaymentVerifier(address,uint256)": {
        "params": {
          "_feeShare": "The fee share for the payment verifier",
          "_verifier": "The payment verifier address to add"
        }
      },
      "cancelIntent(bytes32)": {
        "params": {
          "_intentHash": "Hash of intent being cancelled"
        }
      },
      "createDeposit(address,uint256,(uint256,uint256),address[],(address,string,bytes)[],(bytes32,uint256)[][])": {
        "params": {
          "_amount": "The amount of token to deposit",
          "_currencies": "The currencies for each verifier that deposit supports",
          "_intentAmountRange": "The max and min take amount for each intent",
          "_token": "The token to be deposited",
          "_verifierData": "The payment verification data for each verifier that deposit supports",
          "_verifiers": "The payment verifiers that deposit supports"
        }
      },
      "fulfillIntent(bytes,bytes32)": {
        "params": {
          "_intentHash": "Identifier of intent being fulfilled",
          "_paymentProof": "Payment proof. Can be Groth16 Proof, TLSNotary proof, TLSProxy proof, attestation etc."
        }
      },
      "getPrunableIntents(uint256)": {
        "params": {
          "_depositId": "The deposit ID"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "releaseFundsToPayer(bytes32)": {
        "params": {
          "_intentHash": "Hash of intent to resolve by releasing the funds"
        }
      },
      "removeWhitelistedPaymentVerifier(address)": {
        "params": {
          "_verifier": "The payment verifier address to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setIntentExpirationPeriod(uint256)": {
        "params": {
          "_intentExpirationPeriod": "New intent expiration period"
        }
      },
      "setSustainabilityFee(uint256)": {
        "params": {
          "_fee": "The new sustainability fee in precise units (10**18, ie 10% = 1e17)"
        }
      },
      "setSustainabilityFeeRecipient(address)": {
        "params": {
          "_feeRecipient": "The new fee recipient address"
        }
      },
      "signalIntent(uint256,uint256,address,address,bytes32,bytes)": {
        "params": {
          "_amount": "The amount of deposit.token the user wants to take",
          "_depositId": "The ID of the deposit the taker intends to use for taking onchain liquidity",
          "_fiatCurrency": "The currency code that the user is paying in offchain",
          "_gatingServiceSignature": "The signature from the deposit's gating service on intent parameters",
          "_to": "Address to forward funds to (can be same as owner)",
          "_verifier": "The payment verifier corresponding to the payment service the user is going to pay with                                   offchain (e.g. Venmo, Revolut, Mercado, etc.)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAcceptAllPaymentVerifiers(bool)": {
        "params": {
          "_acceptAllPaymentVerifiers": "True to accept all payment verifiers, false to require whitelisting"
        }
      },
      "updateDepositConversionRate(uint256,address,bytes32,uint256)": {
        "params": {
          "_depositId": "The deposit ID",
          "_fiatCurrency": "The fiat currency code to update the conversion rate for",
          "_newConversionRate": "The new conversion rate. Must be greater than 0.",
          "_verifier": "The payment verifier address to update the conversion rate for"
        }
      },
      "updatePaymentVerifierFeeShare(address,uint256)": {
        "params": {
          "_feeShare": "The new fee share",
          "_verifier": "The payment verifier address to update"
        }
      },
      "withdrawDeposit(uint256)": {
        "params": {
          "_depositId": "DepositId the depositor is attempting to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWhitelistedPaymentVerifier(address,uint256)": {
        "notice": "GOVERNANCE ONLY: Adds a payment verifier to the whitelist."
      },
      "cancelIntent(bytes32)": {
        "notice": "Only callable by the originator of the intent. Cancels an outstanding intent. Deposit state is  updated to reflect the cancelled intent."
      },
      "createDeposit(address,uint256,(uint256,uint256),address[],(address,string,bytes)[],(bytes32,uint256)[][])": {
        "notice": "Creates a deposit entry by locking liquidity in the escrow contract that can be taken by signaling intents. This function will  not add to previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount of deposit token. Every deposit specifies the payment services it supports by specifying their corresponding verifier addresses and  verification data, supported currencies and their conversion rates for each payment service. Note that the order of the verifiers, verification data, and currency data must match."
      },
      "fulfillIntent(bytes,bytes32)": {
        "notice": "Anyone can submit a fulfill intent transaction, even if caller isn't the intent owner. Upon submission the offchain payment proof is verified, payment details are validated, intent is removed, and deposit state is updated.  Deposit token is transferred to the intent.to address."
      },
      "getPrunableIntents(uint256)": {
        "notice": "Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired the outstanding amounts are summed up to get the reclaimable amount and returned alongside the intentHashes."
      },
      "pauseEscrow()": {
        "notice": "GOVERNANCE ONLY: Pauses deposit creation, intent creation and intent fulfillment functionality for the escrow. Functionalities that are paused: - Deposit creation - Updating conversion rates - Intent creation - Intent fulfillment Functionalities that remain unpaused to allow users to retrieve funds in contract: - Intent cancellation - Deposit withdrawal - Manual intent fulfillment"
      },
      "releaseFundsToPayer(bytes32)": {
        "notice": "Allows depositor to release funds to the payer in case of a failed fulfill intent or because of some other arrangement between the two parties. Upon submission we check to make sure the msg.sender is the depositor, the  intent is removed, and  deposit state is updated. Deposit token is transferred to the payer."
      },
      "removeWhitelistedPaymentVerifier(address)": {
        "notice": "GOVERNANCE ONLY: Removes a payment verifier from the whitelist."
      },
      "setIntentExpirationPeriod(uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent locking up a depositor's funds."
      },
      "setSustainabilityFee(uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the sustainability fee. This fee is charged to takers upon a successful  fulfillment of an intent."
      },
      "setSustainabilityFeeRecipient(address)": {
        "notice": "GOVERNANCE ONLY: Updates the recepient of sustainability fees."
      },
      "signalIntent(uint256,uint256,address,address,bytes32,bytes)": {
        "notice": "Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain in order to unlock _amount of funds on-chain. Caller must provide a signature from the deposit's gating service to prove their eligibility to take liquidity. The offchain gating service can perform any additional verification, for example,  verifying the payer's identity, checking the payer's KYC status, etc. If there are prunable intents then they will be  deleted from the deposit to be able to maintain state hygiene."
      },
      "unpauseEscrow()": {
        "notice": "GOVERNANCE ONLY: Restarts paused functionality for the escrow."
      },
      "updateAcceptAllPaymentVerifiers(bool)": {
        "notice": "GOVERNANCE ONLY: Sets whether all payment verifiers can be used without whitelisting."
      },
      "updateDepositConversionRate(uint256,address,bytes32,uint256)": {
        "notice": "Only callable by the depositor for a deposit. Allows depositor to update the conversion rate for a currency for a  payment verifier. Since intent's store the conversion rate at the time of intent, changing the conversion rate will not affect any intents that have already been signaled."
      },
      "updatePaymentVerifierFeeShare(address,uint256)": {
        "notice": "GOVERNANCE ONLY: Updates the fee share for a payment verifier."
      },
      "withdrawDeposit(uint256)": {
        "notice": "Caller must be the depositor for depositId, if not revert. Depositor is returned all remaining deposits and any outstanding intents that are expired. If an intent is not expired then those funds will not be returned. Deposit is marked  as to not accept new intents and the funds locked due to intents can be withdrawn once they expire by calling this function again. Deposit will be deleted as long as there are no more outstanding intents."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 144,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2817,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "accountDeposits",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2821,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "accountIntent",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 2828,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "depositVerifierData",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(DepositVerifierData)7037_storage))"
      },
      {
        "astId": 2833,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "depositVerifiers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2841,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "depositCurrencyConversionRate",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_bytes32,t_uint256)))"
      },
      {
        "astId": 2848,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "depositCurrencies",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_bytes32)dyn_storage))"
      },
      {
        "astId": 2853,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "deposits",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Deposit)7025_storage)"
      },
      {
        "astId": 2858,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "intents",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Intent)7054_storage)"
      },
      {
        "astId": 2860,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "acceptAllPaymentVerifiers",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 2864,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "whitelistedPaymentVerifiers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2868,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "paymentVerifierFeeShare",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2870,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "intentExpirationPeriod",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2872,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "sustainabilityFee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2874,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "sustainabilityFeeRecipient",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 2876,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "depositCounter",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)899": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_address,t_struct(DepositVerifierData)7037_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IEscrow.DepositVerifierData)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositVerifierData)7037_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Intent)7054_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IEscrow.Intent)",
        "numberOfBytes": "32",
        "value": "t_struct(Intent)7054_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_bytes32)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bytes32[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_bytes32,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(bytes32 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(DepositVerifierData)7037_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IEscrow.DepositVerifierData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(DepositVerifierData)7037_storage)"
      },
      "t_mapping(t_uint256,t_struct(Deposit)7025_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IEscrow.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)7025_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Deposit)7025_storage": {
        "encoding": "inplace",
        "label": "struct IEscrow.Deposit",
        "members": [
          {
            "astId": 7007,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "depositor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7010,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)899"
          },
          {
            "astId": 7012,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7015,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "intentAmountRange",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Range)7005_storage"
          },
          {
            "astId": 7017,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "acceptingIntents",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 7019,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "remainingDeposits",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7021,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "outstandingIntentAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7024,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "intentHashes",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(DepositVerifierData)7037_storage": {
        "encoding": "inplace",
        "label": "struct IEscrow.DepositVerifierData",
        "members": [
          {
            "astId": 7032,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "intentGatingService",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7034,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "payeeDetails",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 7036,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Intent)7054_storage": {
        "encoding": "inplace",
        "label": "struct IEscrow.Intent",
        "members": [
          {
            "astId": 7039,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7041,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7043,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "depositId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7045,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7047,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7049,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "paymentVerifier",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 7051,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "fiatCurrency",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 7053,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "conversionRate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Range)7005_storage": {
        "encoding": "inplace",
        "label": "struct IEscrow.Range",
        "members": [
          {
            "astId": 7002,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "min",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7004,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "max",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}