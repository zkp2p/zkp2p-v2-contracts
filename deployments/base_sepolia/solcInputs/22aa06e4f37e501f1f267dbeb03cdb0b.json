{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        return\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\n            isValidERC1271SignatureNow(signer, hash, signature);\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/archive/Quoter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { IEscrow } from \"../interfaces/IEscrow.sol\";\n\n/**\n * @title Quoter\n * @dev A contract to fetch the best quotes for taking token liquidity from the Escrow contract\n */\n// contract Quoter {\n\n//     /* ============ Structs ============ */\n\n//     struct QuoteData {\n//         uint256[] depositIds;           // Deposit IDs to consider\n//         address paymentVerifier;        // [Optional] Payment verifier address to filter by (E.g. VenmoReclaim, RevolutTLSN etc)\n//         address gatingService;          // [Optional] Gating service address to filter by (based on the client from which the intent was created)\n//         address receiveToken;           // Token address which the user wants to receive onchain\n//         bytes32 sendCurrency;           // Fiat currency code which the user wants to send offchain\n//         uint256 amount;                 // Either fiat amount or token amount\n//         bool isTokenAmount;             // True if amount is token amount, false if amount is fiat amount\n//                                         // If true, user has specified the exact amount of tokens they want to receive\n//                                         // If false, user has specified the exact amount of fiat they want to send\n//     }\n\n//     /* ============ Constants ============ */\n    \n//     uint256 internal constant PRECISE_UNIT = 1e18;\n\n//     /* ============ State Variables ============ */\n    \n//     IEscrow public immutable escrow;\n\n//     /* ============ Constructor ============ */\n\n//     constructor(IEscrow _escrow) {\n//         escrow = _escrow;\n//     }\n\n//     /* ============ External Getter Functions ============ */\n\n//     /**\n//      * @notice Finds the deposit that asks for the lowest amount of fiat for a exact amount of tokens the user wants to receive.\n//      * User can filter the deposits by their chosen payment service (aka verifier) and/or the client from which the intent was \n//      *created (aka gating service).\n//      *\n//      * @param _depositIds               An array of deposit IDs to consider.\n//      * @param _paymentVerifier          The verifier address the user has chosen. Use address(0) to ignore this filter.\n//      * @param _gatingService            The gating service address the user has chosen. Use address(0) to ignore this filter.\n//      * @param _receiveToken             The token address the user wants to receive onchain.\n//      * @param _sendCurrency             The currency code the user wants to send offchain. Must be provided in bytes32 format.\n//      * @param _exactTokenAmount         Exact amount of tokens the user wants to receive. Decimal precision depends on the token.\n//      *\n//      * @return bestDeposit              The deposit that asks for the lowest amount of fiat for the exact amount of tokens the user wants to receive.\n//      * @return minFiatAmount            The minimum amount of fiat the user needs to send to receive the exact amount of tokens\n//      */\n//     function quoteMinFiatInputForExactTokenOutput(\n//         uint256[] calldata _depositIds,\n//         address _paymentVerifier,\n//         address _gatingService,\n//         address _receiveToken,\n//         bytes32 _sendCurrency,\n//         uint256 _exactTokenAmount   \n//     )\n//         external\n//         view\n//         returns (IEscrow.DepositView memory bestDeposit, uint256 minFiatAmount)\n//     {\n//         QuoteData memory quoteData = QuoteData({\n//             depositIds: _depositIds,\n//             paymentVerifier: _paymentVerifier,\n//             gatingService: _gatingService,\n//             receiveToken: _receiveToken,\n//             sendCurrency: _sendCurrency,\n//             amount: _exactTokenAmount,\n//             isTokenAmount: true\n//         });\n        \n//         _validateQuoteData(quoteData);\n\n//         uint256 bestTokenToFiatConversionRate;\n//         (bestDeposit, bestTokenToFiatConversionRate) = _getBestRate(quoteData);\n\n//         minFiatAmount = _exactTokenAmount * bestTokenToFiatConversionRate / PRECISE_UNIT;\n//     }\n\n//     /**\n//      * @notice Finds the deposit that gives the maximum amount of tokens for a exact amount of fiat the user wants to send.\n//      * User can filter the deposits by their chosen payment service (aka verifier) and/or the client from which the intent was \n//      *created (aka gating service).\n//      *\n//      * @dev _exactFiatAmount MUST be same base units as token (if token is USDC, _exactFiatAmount is 10e6)\n//      *\n//      * @param _depositIds               An array of deposit IDs to consider.\n//      * @param _receiveToken             The token address the user wants to receive onchain.\n//      * @param _paymentVerifier          The payment service (aka verifier) the user has chosen. Use address(0) to ignore this filter.\n//      * @param _gatingService            The gating service (aka client) address the user has chosen. Use address(0) to ignore this filter.\n//      * @param _sendCurrency             The currency code the user wants to send offchain. Must be provided in bytes32 format.\n//      * @param _exactFiatAmount          Exact amount of fiat the user wants to send. Decimal precision depends on the token.\n//      *\n//      * @return bestDeposit              The deposit that gives the maximum amount of tokens for the exact amount of fiat the user wants to send.\n//      * @return maxTokenAmount           The maximum amount of tokens the user will receive.\n//      */\n//     function quoteMaxTokenOutputForExactFiatInput(\n//         uint256[] calldata _depositIds,\n//         address _paymentVerifier,\n//         address _gatingService,\n//         address _receiveToken,\n//         bytes32 _sendCurrency,\n//         uint256 _exactFiatAmount\n//     )\n//         external\n//         view\n//         returns (IEscrow.DepositView memory bestDeposit, uint256 maxTokenAmount)\n//     {\n//         QuoteData memory quoteData = QuoteData({\n//             depositIds: _depositIds,\n//             paymentVerifier: _paymentVerifier,\n//             gatingService: _gatingService,\n//             receiveToken: _receiveToken,\n//             sendCurrency: _sendCurrency,\n//             amount: _exactFiatAmount,\n//             isTokenAmount: false\n//         });\n        \n//         _validateQuoteData(quoteData);\n\n//         uint256 bestTokenToFiatConversionRate;\n//         (bestDeposit, bestTokenToFiatConversionRate) = _getBestRate(quoteData);\n\n//         maxTokenAmount = _exactFiatAmount * PRECISE_UNIT / bestTokenToFiatConversionRate;\n//     }\n\n//     /* ============ Internal Functions ============ */\n\n//     function _getBestRate(\n//         QuoteData memory _quoteData\n//     )\n//         internal\n//         view\n//         returns (IEscrow.DepositView memory bestDeposit, uint256 bestTokenToFiatConversionRate)\n//     {\n//         // As the user is taking token liquidity, we want to find the lowest tokenToFiatConversion rate. Hence, we initialize\n//         // bestTokenToFiatConversionRate to type(uint256).max.\n//         bestTokenToFiatConversionRate = type(uint256).max;\n\n//         IEscrow.DepositView[] memory deposits = escrow.getDepositFromIds(_quoteData.depositIds);\n\n//         for (uint256 i = 0; i < deposits.length; i++) {\n//             IEscrow.DepositView memory depositView = deposits[i];\n//             if (!_isDepositValid(depositView, _quoteData)) {\n//                 continue;\n//             }\n\n//             IEscrow.VerifierDataView[] memory verifiers = depositView.verifiers;\n\n//             for (uint256 j = 0; j < verifiers.length; j++) {\n//                 IEscrow.VerifierDataView memory verifierDataView = verifiers[j];\n//                 if (!_isVerifierValid(verifierDataView, _quoteData)) {\n//                     continue;\n//                 }\n\n//                 IEscrow.Currency[] memory currencies = verifierDataView.currencies;\n\n//                 for (uint256 k = 0; k < currencies.length; k++) {\n//                     IEscrow.Currency memory currency = currencies[k];\n//                     if (!_isCurrencyValid(currency, _quoteData)) {\n//                         continue;\n//                     }\n\n//                     uint256 tokenAmount = _quoteData.isTokenAmount ? \n//                         _quoteData.amount : \n//                         _getTokenAmount(_quoteData.amount, currency.conversionRate);\n\n//                     if (!_isValidTokenAmount(tokenAmount, depositView)) {\n//                         continue;\n//                     }\n\n//                     if (currency.conversionRate < bestTokenToFiatConversionRate) {\n//                         bestTokenToFiatConversionRate = currency.conversionRate;\n//                         bestDeposit = depositView;\n//                     }\n//                 }\n//             }\n//         }\n\n//         require(bestTokenToFiatConversionRate != type(uint256).max, \"No valid deposit found\");\n//     }\n\n//     function _validateQuoteData(QuoteData memory _quoteData) internal pure {\n//         require(_quoteData.depositIds.length > 0, \"Deposit IDs array cannot be empty\");\n//         require(_quoteData.sendCurrency != bytes32(0), \"Currency code must be provided\");\n//         require(_quoteData.receiveToken != address(0), \"Token address must be provided\");\n//         require(_quoteData.amount > 0, \"Amount must be greater than 0\");\n//     }\n\n//     function _isDepositValid(IEscrow.DepositView memory _depositView, QuoteData memory _quoteData) internal pure returns (bool) {\n//         // Skip deposit if it is not accepting intents\n//         if (!_depositView.deposit.acceptingIntents) {\n//             return false;\n//         }\n//         // Skip deposit if the token does not match the receive token\n//         if (address(_depositView.deposit.token) != _quoteData.receiveToken) {\n//             return false;\n//         }\n//         return true;\n//     }\n\n//     function _isVerifierValid(IEscrow.VerifierDataView memory _verifierDataView, QuoteData memory _quoteData) internal pure returns (bool) {\n//         // Skip verifier if verifier filter is provided and does not match\n//         if (_quoteData.paymentVerifier != address(0) && _verifierDataView.verifier != _quoteData.paymentVerifier) {\n//             return false;\n//         }\n//         // Skip verifier if gating service filter is provided and does not match\n//         if (_quoteData.gatingService != address(0) && _verifierDataView.verificationData.intentGatingService != _quoteData.gatingService) {\n//             return false;\n//         }\n//         return true;\n//     }\n\n//     function _isCurrencyValid(IEscrow.Currency memory _currency, QuoteData memory _quoteData) internal pure returns (bool) {\n//         // Skip currency if deposit currency does not match the send currency\n//         if (_currency.code != _quoteData.sendCurrency) {\n//             return false;\n//         }\n//         return true;\n//     }\n\n//     function _isValidTokenAmount(uint256 _tokenAmount, IEscrow.DepositView memory _depositView) internal pure returns (bool) {\n//         // Skip deposit if amount is not within the intent amount range\n//         if (_tokenAmount < _depositView.deposit.intentAmountRange.min || _tokenAmount > _depositView.deposit.intentAmountRange.max) {\n//             return false;\n//         }\n//         // Skip deposit if amount is greater than available liquidity\n//         if (_tokenAmount > _depositView.availableLiquidity) {\n//             return false;\n//         }\n//         return true;\n//     }\n\n//     /**\n//      * @notice Converts a token amount to a fiat amount given a token to fiat conversion rate\n//      */\n//     function _getFiatAmount(uint256 _tokenAmount, uint256 _tokenToFiatConversionRate) internal pure returns (uint256) {\n//         return _tokenAmount * _tokenToFiatConversionRate / PRECISE_UNIT;\n//     }\n\n//     /**\n//      * @notice Converts a fiat amount to a token amount given a token to fiat conversion rate\n//      */\n//     function _getTokenAmount(uint256 _fiatAmount, uint256 _tokenToFiatConversionRate) internal pure returns (uint256) {\n//         return _fiatAmount * PRECISE_UNIT / _tokenToFiatConversionRate;\n//     }\n// }\n"
    },
    "contracts/Escrow.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Pausable } from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport { SignatureChecker } from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\n\nimport { AddressArrayUtils } from \"./external/AddressArrayUtils.sol\";\nimport { Bytes32ArrayUtils } from \"./external/Bytes32ArrayUtils.sol\";\nimport { StringArrayUtils } from \"./external/StringArrayUtils.sol\";\nimport { Uint256ArrayUtils } from \"./external/Uint256ArrayUtils.sol\";\n\nimport { IEscrow } from \"./interfaces/IEscrow.sol\";\nimport { IOrchestrator } from \"./interfaces/IOrchestrator.sol\";  // NEW: Added for orchestrator calls\nimport { IPostIntentHook } from \"./interfaces/IPostIntentHook.sol\";\nimport { IBasePaymentVerifier } from \"./verifiers/interfaces/IBasePaymentVerifier.sol\";\nimport { IPaymentVerifier } from \"./verifiers/interfaces/IPaymentVerifier.sol\";\nimport { IPaymentVerifierRegistry } from \"./interfaces/IPaymentVerifierRegistry.sol\";\nimport { IPostIntentHookRegistry } from \"./interfaces/IPostIntentHookRegistry.sol\";\nimport { IRelayerRegistry } from \"./interfaces/IRelayerRegistry.sol\";\n\npragma solidity ^0.8.18;\n\n/**\n * @title Escrow\n * @notice Escrows deposits and manages deposit lifecycle.\n */\ncontract Escrow is Ownable, Pausable, IEscrow {\n\n    using AddressArrayUtils for address[];\n    using Bytes32ArrayUtils for bytes32[];\n    using ECDSA for bytes32;\n    using SignatureChecker for address;\n    using StringArrayUtils for string[];\n    using Uint256ArrayUtils for uint256[];\n\n    /* ============ Constants ============ */\n    uint256 internal constant PRECISE_UNIT = 1e18;\n    uint256 internal constant MAX_MAKER_FEE = 5e16;                 // 5% max maker fee\n    uint256 internal constant MAX_REFERRER_FEE = 5e16;             // 5% max referrer fee\n    uint256 internal constant MAX_DUST_THRESHOLD = 1e6;            // 1 USDC\n    uint256 internal constant MAX_TOTAL_INTENT_EXPIRATION_PERIOD = 86400 * 5; // 5 days\n    \n    /* ============ State Variables ============ */\n\n    IOrchestrator public orchestrator;                               // Address of the orchestrator contract\n    IPaymentVerifierRegistry public paymentVerifierRegistry;         // Address of the payment verifier registry contract\n    uint256 immutable public chainId;                                // chainId of the chain the escrow is deployed on\n\n    mapping(address => uint256[]) internal accountDeposits;          // Mapping of address to depositIds\n\n    // Mapping of depositId to verifier address to deposit's verification data. A single deposit can support multiple payment \n    // services. Each payment service has it's own verification data which includes the payee details hash and the data used for \n    // payment verification.\n    // Example: Deposit 1 => Venmo => payeeDetails: 0x123, data: 0x456\n    //                    => Revolut => payeeDetails: 0x789, data: 0xabc\n    mapping(uint256 => mapping(address => DepositVerifierData)) internal depositVerifierData;\n    mapping(uint256 => address[]) internal depositVerifiers;          // Handy mapping to get all verifiers for a deposit\n    \n    // Mapping of depositId to verifier address to mapping of fiat currency to min conversion rate. Each payment service can support\n    // multiple currencies. Depositor can specify list of currencies and min conversion rates for each payment service.\n    // Example: Deposit 1 => Venmo => USD: 1e18\n    //                    => Revolut => USD: 1e18, EUR: 1.2e18, SGD: 1.5e18\n    mapping(uint256 => mapping(address => mapping(bytes32 => uint256))) internal depositCurrencyMinRate;\n    mapping(uint256 => mapping(address => bytes32[])) internal depositCurrencies; // Handy mapping to get all currencies for a deposit and verifier\n\n    mapping(uint256 => Deposit) internal deposits;                          // Mapping of depositIds to deposit structs\n    mapping(uint256 => bytes32[]) internal depositIntentHashes;             // Mapping of depositId to array of intentHashes\n    mapping(uint256 => mapping(bytes32 => Intent)) internal depositIntents; // Mapping of depositId to intentHash to intent\n\n    uint256 public depositCounter;                                  // Counter for depositIds\n    \n    uint256 public makerProtocolFee;                                // Protocol fee taken from maker (in preciseUnits, 1e16 = 1%)\n    address public makerFeeRecipient;                               // Address that receives maker protocol fees\n    uint256 public dustThreshold;                                   // Amount below which deposits are considered dust and can be closed\n    uint256 public maxIntentsPerDeposit;                            // Maximum active intents per deposit\n    uint256 public intentExpirationPeriod;                          // Time period after which an intent expires\n\n    /* ============ Modifiers ============ */\n\n    /**\n     * @notice Modifier to check if caller is depositor or their delegate for a specific deposit\n     * @param _depositId The deposit ID to check authorization for\n     */\n    modifier onlyDepositorOrDelegate(uint256 _depositId) {\n        Deposit storage deposit = deposits[_depositId];\n        if (!(deposit.depositor == msg.sender || \n            (deposit.delegate != address(0) && deposit.delegate == msg.sender))) {\n            revert UnauthorizedCallerOrDelegate(msg.sender, deposit.depositor, deposit.delegate);\n        }\n        _;\n    }\n\n    /**\n     * @notice Modifier to restrict access to orchestrator-only functions\n     */\n    modifier onlyOrchestrator() {\n        if (msg.sender != address(orchestrator)) revert UnauthorizedCaller(msg.sender, address(orchestrator));\n        _;\n    }\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _owner,\n        uint256 _chainId,\n        address _paymentVerifierRegistry,\n        uint256 _makerProtocolFee,\n        address _makerFeeRecipient,\n        uint256 _dustThreshold,\n        uint256 _maxIntentsPerDeposit,\n        uint256 _intentExpirationPeriod\n    )\n        Ownable()\n    {\n        chainId = _chainId;\n        paymentVerifierRegistry = IPaymentVerifierRegistry(_paymentVerifierRegistry);\n        makerProtocolFee = _makerProtocolFee;\n        makerFeeRecipient = _makerFeeRecipient;\n        dustThreshold = _dustThreshold;\n        maxIntentsPerDeposit = _maxIntentsPerDeposit;\n        intentExpirationPeriod = _intentExpirationPeriod;\n\n        transferOwnership(_owner);\n    }\n\n    /* ============ Deposit Owner Only (External Functions) ============ */\n\n    /**\n     * @notice Creates a deposit entry by locking liquidity in the escrow contract that can be taken by signaling intents. This function will \n     * not add to previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount\n     * of deposit token. Every deposit specifies the payment services it supports by specifying their corresponding verifier addresses and \n     * verification data, supported currencies and their min conversion rates for each payment service. Optionally, a referrer and a referrer \n     * fee can be specified.\n     * Note that the order of the verifiers, verification data, and currency data must match.\n     */\n    function createDeposit(CreateDepositParams calldata _params) external whenNotPaused {\n        // Checks\n        if (_params.intentAmountRange.min == 0) revert ZeroMinValue();\n        if (_params.intentAmountRange.min > _params.intentAmountRange.max) { \n            revert InvalidRange(_params.intentAmountRange.min, _params.intentAmountRange.max);\n        }\n\n        // Validate referrer fee configuration\n        if (_params.referrerFee > MAX_REFERRER_FEE) revert FeeExceedsMaximum(_params.referrerFee, MAX_REFERRER_FEE);\n        if (_params.referrer == address(0) && _params.referrerFee != 0) revert InvalidReferrerFeeConfiguration();\n\n        // Calculate maker fees and net deposit amount\n        uint256 totalFees = 0;\n        if (makerProtocolFee > 0) {\n            totalFees += (_params.amount * makerProtocolFee) / PRECISE_UNIT;\n        }\n        if (_params.referrerFee > 0) {\n            totalFees += (_params.amount * _params.referrerFee) / PRECISE_UNIT;\n        }\n        uint256 netDepositAmount = _params.amount - totalFees;\n        if (netDepositAmount < _params.intentAmountRange.min) {\n            revert AmountBelowMin(netDepositAmount, _params.intentAmountRange.min);\n        }\n        \n        // Effects\n        uint256 depositId = depositCounter++;\n        accountDeposits[msg.sender].push(depositId);\n        deposits[depositId] = Deposit({\n            depositor: msg.sender,\n            delegate: _params.delegate,\n            token: _params.token,\n            amount: _params.amount,\n            intentAmountRange: _params.intentAmountRange,\n            acceptingIntents: true,\n            remainingDeposits: netDepositAmount,    // Net amount available for intents\n            outstandingIntentAmount: 0,\n            makerProtocolFee: makerProtocolFee,\n            reservedMakerFees: totalFees,\n            accruedMakerFees: 0,\n            accruedReferrerFees: 0,\n            intentGuardian: _params.intentGuardian,\n            referrer: _params.referrer,\n            referrerFee: _params.referrerFee\n        });\n\n        emit DepositReceived(\n            depositId, \n            msg.sender, \n            _params.token, \n            _params.amount, \n            _params.intentAmountRange, \n            _params.delegate, \n            _params.intentGuardian\n        );\n\n        _addVerifiersToDeposit(depositId, _params.verifiers, _params.verifierData, _params.currencies);\n\n        // Interactions\n        _params.token.transferFrom(msg.sender, address(this), _params.amount);\n    }\n\n    /**\n     * @notice Adds additional funds to an existing deposit. Only the depositor can add funds.\n     * The funds will be added to the remaining deposits amount, making it available for new intents.\n     *\n     * @param _depositId    The deposit ID to add funds to\n     * @param _amount       The amount of tokens to add\n     */\n    function addFundsToDeposit(uint256 _depositId, uint256 _amount)\n        external\n        whenNotPaused\n    {\n        // Checks\n        Deposit storage deposit = deposits[_depositId];\n        if (deposit.depositor != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.depositor);\n        if (_amount == 0) revert ZeroValue();\n        \n        // Effects\n        uint256 additionalMakerFees = 0;\n        uint256 additionalReferrerFees = 0;\n\n        if (deposit.makerProtocolFee > 0) {\n            additionalMakerFees = (_amount * deposit.makerProtocolFee) / PRECISE_UNIT;\n        }\n        if (deposit.referrerFee > 0) {\n            additionalReferrerFees = (_amount * deposit.referrerFee) / PRECISE_UNIT;\n        }\n\n        uint256 totalFees = additionalMakerFees + additionalReferrerFees;\n        uint256 netAdditionalAmount = _amount - totalFees;\n        \n        deposit.amount += _amount;\n        deposit.remainingDeposits += netAdditionalAmount;\n        deposit.reservedMakerFees += totalFees;\n        \n        emit DepositFundsAdded(_depositId, msg.sender, _amount);\n        \n        // Interactions\n        deposit.token.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    /**\n     * @notice Removes funds from an existing deposit. Only the depositor can remove funds. If the amount to remove is greater\n     * than the remaining deposits, then expired intents will be pruned to reclaim liquidity. If the remaining deposits is less than\n     * the min intent amount, then the deposit will be marked as not accepting intents. Reserved maker fees remain locked until full\n     * withdrawal via withdrawDeposit().\n     *\n     * @param _depositId    The deposit ID to remove funds from\n     * @param _amount       The amount of tokens to remove\n     */\n    function removeFundsFromDeposit(uint256 _depositId, uint256 _amount)\n        external\n        whenNotPaused\n    {\n        // Checks\n        Deposit storage deposit = deposits[_depositId];\n        if (deposit.depositor != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.depositor);\n        if (_amount == 0) revert ZeroValue();\n        \n        // Effects\n        if (deposit.remainingDeposits < _amount) {\n            _pruneExpiredIntents(deposit, _depositId, _amount);\n        }\n        \n        deposit.amount -= _amount;\n        deposit.remainingDeposits -= _amount;\n        \n        if (deposit.acceptingIntents && deposit.remainingDeposits < deposit.intentAmountRange.min) {\n            deposit.acceptingIntents = false;\n        }\n\n        emit DepositWithdrawn(_depositId, msg.sender, _amount, deposit.acceptingIntents);\n        \n        // Interactions\n        deposit.token.transfer(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Depositor is returned all remaining deposits, any outstanding intents that are expired, and unused maker fees.\n     * Only the depositor can withdraw. If an intent is not expired then those funds will not be returned. Deposit is marked\n     * as to not accept new intents and the funds locked due to intents can be withdrawn once they expire by calling this\n     * function again. Deposit will be deleted and accrued maker fees collected to protocol as long as there are no more\n     * outstanding intents.\n     *\n     * @param _depositId   DepositId the depositor is attempting to withdraw\n     */\n    function withdrawDeposit(uint256 _depositId) external {\n        // Checks\n        Deposit storage deposit = deposits[_depositId];\n        if (deposit.depositor != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.depositor);\n\n        // Effects\n        (\n            bytes32[] memory expiredIntents,\n            uint256 reclaimableAmount\n        ) = _getExpiredIntents(_depositId);\n\n        _pruneIntents(_depositId, expiredIntents);\n\n        uint256 unusedFees = deposit.reservedMakerFees - deposit.accruedMakerFees - deposit.accruedReferrerFees;\n        uint256 returnAmount = deposit.remainingDeposits + reclaimableAmount + unusedFees;\n        \n        _collectAccruedMakerFees(_depositId, deposit);\n        _collectAccruedReferrerFees(_depositId, deposit);\n\n        IERC20 token = deposit.token;\n        deposit.outstandingIntentAmount -= reclaimableAmount;\n        delete deposit.remainingDeposits;\n        delete deposit.acceptingIntents;\n        delete deposit.accruedMakerFees;\n        delete deposit.accruedReferrerFees;\n\n        emit DepositWithdrawn(_depositId, deposit.depositor, returnAmount, false);\n\n        if (deposit.outstandingIntentAmount == 0) {\n            _closeDeposit(_depositId, deposit);\n        }\n        \n        // Interactions\n        token.transfer(msg.sender, returnAmount);\n    }\n\n    /**\n     * @notice Allows depositor to set a delegate address that can manage a specific deposit\n     *\n     * @param _depositId    The deposit ID\n     * @param _delegate     The address to set as delegate (address(0) to remove delegate)\n     */\n    \n    function setDepositDelegate(uint256 _depositId, address _delegate) external {\n        Deposit storage deposit = deposits[_depositId];\n        if (deposit.depositor != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.depositor);\n        if (_delegate == address(0)) revert ZeroAddress();\n        \n        deposit.delegate = _delegate;\n        \n        emit DepositDelegateSet(_depositId, msg.sender, _delegate);\n    }\n\n    /**\n     * @notice Allows depositor to remove the delegate for a specific deposit\n     *\n     * @param _depositId    The deposit ID\n     */\n    function removeDepositDelegate(uint256 _depositId) external {\n        Deposit storage deposit = deposits[_depositId];\n        if (deposit.depositor != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.depositor);\n        if (deposit.delegate == address(0)) revert DelegateNotFound(_depositId);\n        \n        delete deposit.delegate;\n        \n        emit DepositDelegateRemoved(_depositId, msg.sender);\n    }\n\n    /* ============ Deposit Owner OR Delegate Only (External Functions) ============ */\n\n    /**\n     * @notice Only callable by the depositor for a deposit. Allows depositor to update the min conversion rate for a currency for a \n     * payment verifier. Since intent's store the conversion rate at the time of intent, changing the min conversion rate will not affect\n     * any intents that have already been signaled.\n     *\n     * @param _depositId                The deposit ID\n     * @param _verifier                 The payment verifier address to update the min conversion rate for\n     * @param _fiatCurrency             The fiat currency code to update the min conversion rate for\n     * @param _newMinConversionRate        The new min conversion rate. Must be greater than 0.\n     */\n    function updateDepositMinConversionRate(\n        uint256 _depositId, \n        address _verifier, \n        bytes32 _fiatCurrency, \n        uint256 _newMinConversionRate\n    )\n        external\n        whenNotPaused\n        onlyDepositorOrDelegate(_depositId)\n    {\n        uint256 oldMinConversionRate = depositCurrencyMinRate[_depositId][_verifier][_fiatCurrency];\n\n        if (oldMinConversionRate == 0) revert CurrencyNotSupported(_verifier, _fiatCurrency);\n        if (_newMinConversionRate == 0) revert ZeroConversionRate();\n\n        depositCurrencyMinRate[_depositId][_verifier][_fiatCurrency] = _newMinConversionRate;\n\n        emit DepositMinConversionRateUpdated(_depositId, _verifier, _fiatCurrency, _newMinConversionRate);\n    }\n\n    /**\n     * @notice Allows depositor to update the intent amount range for a deposit. Since intent's are already created within the\n     * previous intent amount range, changing the intent amount range will not affect any intents that have already been signaled.\n     *\n     * @param _depositId                The deposit ID\n     * @param _intentAmountRange        The new intent amount range\n     */\n    function updateDepositIntentAmountRange(\n        uint256 _depositId, \n        Range calldata _intentAmountRange\n    )\n        external\n        whenNotPaused\n        onlyDepositorOrDelegate(_depositId)\n    {\n        Deposit storage deposit = deposits[_depositId];\n        if (_intentAmountRange.min == 0) revert ZeroMinValue();\n        if (_intentAmountRange.min > _intentAmountRange.max) revert InvalidRange(_intentAmountRange.min, _intentAmountRange.max);\n\n        deposit.intentAmountRange = _intentAmountRange;\n\n        emit DepositIntentAmountRangeUpdated(_depositId, _intentAmountRange);\n    }\n\n    /**\n     * @notice Allows depositor to add a new payment verifier and its associated currencies to an existing deposit.\n     *\n     * @param _depositId             The deposit ID\n     * @param _verifiers             The payment verifiers to add\n     * @param _verifierData          The payment verification data for the verifiers\n     * @param _currencies            The currencies for the verifiers\n     */\n    function addVerifiersToDeposit(\n        uint256 _depositId,\n        address[] calldata _verifiers,\n        DepositVerifierData[] calldata _verifierData,\n        Currency[][] calldata _currencies\n    )\n        external\n        whenNotPaused\n        onlyDepositorOrDelegate(_depositId)\n    {\n        _addVerifiersToDeposit(_depositId, _verifiers, _verifierData, _currencies);\n    }\n\n    /**\n     * @notice Allows depositor to remove an existing payment verifier from a deposit. \n     * NOTE: This function does not delete the veirifier data, it only removes the verifier from the deposit.\n     *\n     * @param _depositId             The deposit ID\n     * @param _verifier              The payment verifier to remove\n     */\n    function removeVerifierFromDeposit(\n        uint256 _depositId,\n        address _verifier\n    )\n        external\n        whenNotPaused\n        onlyDepositorOrDelegate(_depositId)\n    {\n        if (bytes(depositVerifierData[_depositId][_verifier].payeeDetails).length == 0) {\n            revert VerifierNotFound(_depositId, _verifier);\n        }\n\n        depositVerifiers[_depositId].removeStorage(_verifier);\n\n        bytes32[] storage currenciesForVerifier = depositCurrencies[_depositId][_verifier];\n        for (uint256 i = 0; i < currenciesForVerifier.length; i++) {\n            bytes32 currencyCode = currenciesForVerifier[i];\n            delete depositCurrencyMinRate[_depositId][_verifier][currencyCode];\n        }\n        delete depositCurrencies[_depositId][_verifier];\n        \n        // Don't delete deposit verifier data to allow existing intents to be fulfilled        \n\n        emit DepositVerifierRemoved(_depositId, _verifier);\n    }\n\n    /**\n     * @notice Allows depositor to add a new currencies to an existing verifier for a deposit.\n     *\n     * @param _depositId             The deposit ID\n     * @param _verifier              The payment verifier\n     * @param _currencies            The currencies to add (code and conversion rate)\n     */\n    function addCurrenciesToDepositVerifier(\n        uint256 _depositId,\n        address _verifier,\n        Currency[] calldata _currencies\n    )\n        external\n        whenNotPaused\n        onlyDepositorOrDelegate(_depositId)\n    {\n        string memory payeeDetails = depositVerifierData[_depositId][_verifier].payeeDetails;\n        if (bytes(payeeDetails).length == 0) revert VerifierNotFound(_depositId, _verifier);\n        \n        for (uint256 i = 0; i < _currencies.length; i++) {\n            _addCurrencyToDeposit(\n                _depositId, \n                _verifier, \n                _currencies[i].code, \n                _currencies[i].minConversionRate\n            );\n        }\n    }\n\n    /**\n     * @notice Allows depositor to remove an existing currency from a verifier for a deposit.\n     *\n     * @param _depositId             The deposit ID\n     * @param _verifier              The payment verifier\n     * @param _currencyCode          The currency code to remove\n     */\n    function removeCurrencyFromDepositVerifier(\n        uint256 _depositId,\n        address _verifier,\n        bytes32 _currencyCode\n    )\n        external\n        whenNotPaused\n        onlyDepositorOrDelegate(_depositId)\n    {\n        string memory payeeDetails = depositVerifierData[_depositId][_verifier].payeeDetails;\n        if (bytes(payeeDetails).length == 0) revert VerifierNotFound(_depositId, _verifier);\n\n        uint256 currencyMinRate = depositCurrencyMinRate[_depositId][_verifier][_currencyCode];\n        if (currencyMinRate == 0) revert CurrencyNotFound(_verifier, _currencyCode);\n\n        depositCurrencies[_depositId][_verifier].removeStorage(_currencyCode);\n        delete depositCurrencyMinRate[_depositId][_verifier][_currencyCode];\n\n        emit DepositCurrencyRemoved(_depositId, _verifier, _currencyCode);\n    }\n\n    /**\n     * @notice Allows depositor or delegateto set the accepting intents state for a deposit.\n     *\n     * @param _depositId             The deposit ID\n     * @param _acceptingIntents      The new accepting intents state\n     */\n    function setDepositAcceptingIntents(\n        uint256 _depositId, \n        bool _acceptingIntents\n    )\n        external\n        whenNotPaused\n        onlyDepositorOrDelegate(_depositId)\n    {\n        Deposit storage deposit = deposits[_depositId];\n        if (deposit.acceptingIntents == _acceptingIntents) revert DepositAlreadyInState(_depositId, _acceptingIntents);\n        // Doesn't reclaim liquidity for gas savings\n        if (deposit.remainingDeposits == 0) revert InsufficientDepositLiquidity(_depositId, 0, 1);\n        \n        deposit.acceptingIntents = _acceptingIntents;\n        emit DepositAcceptingIntentsUpdated(_depositId, _acceptingIntents);\n    }\n\n    /* ============ Anyone callable (External Functions) ============ */\n\n    /**\n     * @notice ANYONE: Can be called by anyone to clean up expired intents.\n     * \n     * @param _depositId The deposit ID to prune expired intents for\n     */\n    function pruneExpiredIntents(uint256 _depositId) external {\n        _pruneExpiredIntents(deposits[_depositId], _depositId, 0);\n    }\n\n\n    /* ============ Orchestrator-Only Locking and Unlocking Functions ============ */\n\n    /**\n     * @notice ORCHESTRATOR ONLY: Locks funds for an intent with expiry time. Only callable by orchestrator.\n     *\n     * @param _depositId The deposit ID to lock funds from\n     * @param _amount The amount to lock\n     * @param _intentHash The intent hash this intent corresponds to\n     */\n    function lockFunds(\n        uint256 _depositId, \n        bytes32 _intentHash,\n        uint256 _amount\n    ) \n        external \n        onlyOrchestrator \n    {\n        // Checks\n        Deposit storage deposit = deposits[_depositId];\n        if (deposit.depositor == address(0)) revert DepositNotFound(_depositId);\n        if (!deposit.acceptingIntents) revert DepositNotAcceptingIntents(_depositId);\n        if (_amount < deposit.intentAmountRange.min) revert AmountBelowMin(_amount, deposit.intentAmountRange.min);\n        if (_amount > deposit.intentAmountRange.max) revert AmountAboveMax(_amount, deposit.intentAmountRange.max);\n        \n        // Effects\n        // Check if we need to reclaim expired liquidity first\n        uint256 currentIntentCount = depositIntentHashes[_depositId].length;\n        if (deposit.remainingDeposits < _amount || currentIntentCount >= maxIntentsPerDeposit) {\n            _pruneExpiredIntents(deposit, _depositId, _amount);\n\n            currentIntentCount = depositIntentHashes[_depositId].length;\n            if (currentIntentCount >= maxIntentsPerDeposit) {\n                revert MaxIntentsExceeded(_depositId, currentIntentCount, maxIntentsPerDeposit);\n            }\n        }\n        \n        // Update deposit state\n        deposit.remainingDeposits -= _amount;\n        deposit.outstandingIntentAmount += _amount;\n        \n        depositIntentHashes[_depositId].push(_intentHash);\n        uint256 expiryTime = block.timestamp + intentExpirationPeriod;\n        depositIntents[_depositId][_intentHash] = Intent({\n            intentHash: _intentHash,\n            amount: _amount,\n            timestamp: block.timestamp,\n            expiryTime: expiryTime\n        });\n\n        emit FundsLocked(_depositId, _intentHash, _amount, expiryTime);\n    }\n\n    /**\n     * @notice ORCHESTRATOR ONLY: Unlocks funds from a cancelled intent by removing the specific intent. \n     * Only callable by orchestrator.\n     * \n     * @param _depositId The deposit ID to unlock funds from\n     * @param _intentHash The intent hash to find and remove the intent for\n     */\n    function unlockFunds(uint256 _depositId, bytes32 _intentHash) \n        external \n        onlyOrchestrator \n    {\n        // Checks\n        Deposit storage deposit = deposits[_depositId];\n        Intent memory intent = depositIntents[_depositId][_intentHash];\n\n        if (deposit.depositor == address(0)) revert DepositNotFound(_depositId);\n        if (intent.intentHash == bytes32(0)) revert IntentNotFound(_intentHash);\n\n        // Effects\n        deposit.remainingDeposits += intent.amount;\n        deposit.outstandingIntentAmount -= intent.amount;\n\n        _pruneIntent(_depositId, _intentHash);\n\n        emit FundsUnlocked(_depositId, _intentHash, intent.amount);\n    }\n\n    /**\n     * @notice ORCHESTRATOR ONLY: Unlocks and transfers funds from a fulfilled intent by removing the specific intent.\n     * Only callable by orchestrator.\n     * \n     * @param _depositId The deposit ID to transfer from\n     * @param _intentHash The intent hash to find and remove the intent for\n     * @param _transferAmount The amount to actually transfer (may be less than intent amount)\n     * @param _to The address to transfer to (orchestrator)\n     */\n    function unlockAndTransferFunds(\n        uint256 _depositId, \n        bytes32 _intentHash,\n        uint256 _transferAmount, \n        address _to\n    ) \n        external \n        onlyOrchestrator \n    {\n        // Checks\n        Deposit storage deposit = deposits[_depositId];\n        Intent memory intent = depositIntents[_depositId][_intentHash];\n        \n        if (deposit.depositor == address(0)) revert DepositNotFound(_depositId);\n        if (intent.intentHash == bytes32(0)) revert IntentNotFound(_intentHash);\n        if (_transferAmount == 0) revert ZeroValue();\n        if (_transferAmount > intent.amount) revert AmountExceedsAvailable(_transferAmount, intent.amount);\n        \n        // Effects\n        uint256 makerFeeForThisTransfer = 0;\n        uint256 referrerFeeForThisTransfer = 0;\n\n        if (deposit.makerProtocolFee > 0) {\n            makerFeeForThisTransfer = (_transferAmount * deposit.makerProtocolFee) / PRECISE_UNIT;\n            deposit.accruedMakerFees += makerFeeForThisTransfer;\n        }\n        if (deposit.referrerFee > 0) {\n            referrerFeeForThisTransfer = (_transferAmount * deposit.referrerFee) / PRECISE_UNIT;\n            deposit.accruedReferrerFees += referrerFeeForThisTransfer;\n        }\n\n        deposit.outstandingIntentAmount -= intent.amount;\n        if (_transferAmount < intent.amount) {\n            // Return unused funds to remaining deposits (partial release)\n            deposit.remainingDeposits += (intent.amount - _transferAmount);\n        }\n\n        _pruneIntent(_depositId, _intentHash);\n        \n        IERC20 token = deposit.token;\n        _closeDepositIfNecessary(_depositId, deposit);\n        \n        emit FundsUnlockedAndTransferred(\n            _depositId, _intentHash, intent.amount, _transferAmount, makerFeeForThisTransfer, referrerFeeForThisTransfer, _to\n        );\n\n        // Interactions\n        token.transfer(_to, _transferAmount);\n    }\n\n    /* ============ Intent Guardian Only (External Functions) ============ */\n\n    /**\n     * @notice INTENT GUARDIAN ONLY: Extends the expiry time of an existing intent. Only callable by intent guardian.\n     * \n     * @param _depositId The deposit ID containing the intent\n     * @param _intentHash The intent hash to extend expiry for\n     * @param _additionalTime The additional time to extend the expiry by\n     */\n    function extendIntentExpiry(\n        uint256 _depositId, \n        bytes32 _intentHash,\n        uint256 _additionalTime\n    ) \n        external \n    {\n        Deposit storage deposit = deposits[_depositId];\n        Intent storage intent = depositIntents[_depositId][_intentHash];\n        \n        if (deposit.depositor == address(0)) revert DepositNotFound(_depositId);\n        if (intent.intentHash == bytes32(0)) revert IntentNotFound(_intentHash);\n        if (deposit.intentGuardian != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.intentGuardian);\n        if (_additionalTime == 0) revert ZeroValue();\n        if (intent.expiryTime + _additionalTime > intent.timestamp + MAX_TOTAL_INTENT_EXPIRATION_PERIOD) {\n            revert AmountAboveMax(_additionalTime, MAX_TOTAL_INTENT_EXPIRATION_PERIOD);\n        }\n        \n        intent.expiryTime += _additionalTime;\n        \n        emit IntentExpiryExtended(_depositId, _intentHash, intent.expiryTime);\n    }\n\n    /* ============ Governance Functions ============ */\n    \n    /**\n     * @notice NEW: Sets the orchestrator contract address. Only callable by owner.\n     *\n     * @param _orchestrator The orchestrator contract address\n     */\n    function setOrchestrator(address _orchestrator) external onlyOwner {\n        if (_orchestrator == address(0)) revert ZeroAddress();\n        \n        orchestrator = IOrchestrator(_orchestrator);\n        emit OrchestratorUpdated(_orchestrator);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the payment verifier registry address.\n     *\n     * @param _paymentVerifierRegistry   New payment verifier registry address\n     */\n    function setPaymentVerifierRegistry(address _paymentVerifierRegistry) external onlyOwner {\n        if (_paymentVerifierRegistry == address(0)) revert ZeroAddress();\n        \n        paymentVerifierRegistry = IPaymentVerifierRegistry(_paymentVerifierRegistry);\n        emit PaymentVerifierRegistryUpdated(_paymentVerifierRegistry);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Sets the maker protocol fee rate. This fee is charged to makers upon fulfillment of \n     * intents.\n     *\n     * @param _makerProtocolFee The maker protocol fee in preciseUnits (1e16 = 1%)\n     */\n    function setMakerProtocolFee(uint256 _makerProtocolFee) external onlyOwner {\n        if (_makerProtocolFee > MAX_MAKER_FEE) revert AmountAboveMax(_makerProtocolFee, MAX_MAKER_FEE);\n        \n        makerProtocolFee = _makerProtocolFee;\n        emit MakerProtocolFeeUpdated(_makerProtocolFee);\n    }\n    \n    /**\n     * @notice GOVERNANCE ONLY: Sets the address that receives maker protocol fees.\n     *\n     * @param _makerFeeRecipient The address to receive maker fees\n     */\n    function setMakerFeeRecipient(address _makerFeeRecipient) external onlyOwner {\n        if (_makerFeeRecipient == address(0)) revert ZeroAddress();\n        \n        makerFeeRecipient = _makerFeeRecipient;\n        emit MakerFeeRecipientUpdated(_makerFeeRecipient);\n    }\n    \n    /**\n     * @notice GOVERNANCE ONLY: Sets the dust threshold below which deposits can be closed automatically.\n     *\n     * @param _dustThreshold The new dust threshold amount\n     */\n    function setDustThreshold(uint256 _dustThreshold) external onlyOwner {\n        if (_dustThreshold > MAX_DUST_THRESHOLD) revert AmountAboveMax(_dustThreshold, MAX_DUST_THRESHOLD);\n        \n        dustThreshold = _dustThreshold;\n        emit DustThresholdUpdated(_dustThreshold);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Sets the maximum number of active intents per deposit.\n     *\n     * @param _maxIntentsPerDeposit The new maximum number of active intents per deposit\n     */\n    function setMaxIntentsPerDeposit(uint256 _maxIntentsPerDeposit) external onlyOwner {\n        if (_maxIntentsPerDeposit == 0) revert ZeroValue();\n        \n        maxIntentsPerDeposit = _maxIntentsPerDeposit;\n        emit MaxIntentsPerDepositUpdated(_maxIntentsPerDeposit);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Sets the intent expiration period.\n     *\n     * @param _intentExpirationPeriod The new intent expiration period in seconds\n     */\n    function setIntentExpirationPeriod(uint256 _intentExpirationPeriod) external onlyOwner {\n        if (_intentExpirationPeriod == 0) revert ZeroValue();\n        \n        intentExpirationPeriod = _intentExpirationPeriod;\n        emit IntentExpirationPeriodUpdated(_intentExpirationPeriod);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Pauses deposit creation, intent creation and intent fulfillment functionality for the escrow.\n     * Functionalities that are paused:\n     * - Deposit creation\n     * - Updating conversion rates\n     * TODO: Update this list.\n     *\n     * Functionalities that remain unpaused to allow users to retrieve funds in contract:\n     * - Deposit withdrawal\n     */\n    function pauseEscrow() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Restarts paused functionality for the escrow.\n     */\n    function unpauseEscrow() external onlyOwner {\n        _unpause();\n    }\n\n    /* ============ External View Functions ============ */\n\n    function getDeposit(uint256 _depositId) external view returns (Deposit memory) {\n        return deposits[_depositId];\n    }\n\n    function getDepositIntentHashes(uint256 _depositId) external view returns (bytes32[] memory) {\n        return depositIntentHashes[_depositId];\n    }\n\n    function getDepositIntent(uint256 _depositId, bytes32 _intentHash) external view returns (Intent memory) {\n        return depositIntents[_depositId][_intentHash];\n    }\n\n    function getDepositVerifiers(uint256 _depositId) external view returns (address[] memory) {\n        return depositVerifiers[_depositId];\n    }\n\n    function getDepositCurrencies(uint256 _depositId, address _verifier) external view returns (bytes32[] memory) {\n        return depositCurrencies[_depositId][_verifier];\n    }\n\n    function getDepositCurrencyMinRate(uint256 _depositId, address _verifier, bytes32 _currencyCode) external view returns (uint256) {\n        return depositCurrencyMinRate[_depositId][_verifier][_currencyCode];\n    }\n\n    function getDepositVerifierData(uint256 _depositId, address _verifier) external view returns (DepositVerifierData memory) {\n        return depositVerifierData[_depositId][_verifier];\n    }\n\n    function getAccountDeposits(address _account) external view returns (uint256[] memory) {\n        return accountDeposits[_account];\n    }\n    \n    function getExpiredIntents(uint256 _depositId) external view returns (bytes32[] memory expiredIntents, uint256 reclaimedAmount) {\n        return _getExpiredIntents(_depositId);\n    }\n\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\n     * the outstanding amounts are summed and returned alongside the intentHashes.\n     */\n    function _getExpiredIntents(\n        uint256 _depositId\n    )\n        internal\n        view\n        returns(bytes32[] memory expiredIntents, uint256 reclaimedAmount)\n    {\n        bytes32[] memory intentHashes = depositIntentHashes[_depositId];\n        expiredIntents = new bytes32[](intentHashes.length);\n\n        for (uint256 i = 0; i < intentHashes.length; ++i) {\n            Intent memory intent = depositIntents[_depositId][intentHashes[i]];\n            if (intent.expiryTime < block.timestamp) {\n                expiredIntents[i] = intentHashes[i];\n                reclaimedAmount += intent.amount;\n            }\n        }\n    }\n\n    /**\n     * @notice Free up deposit liquidity by removing intents that have expired. Tries to remove all expired intents that are expired\n     * and adds the reclaimable amount to the deposit's remaining deposits. If the remaining amount including the new recovered amount\n     * is less than the minimum required amount, this function will revert with a NotEnoughLiquidity error.\n     */\n    function _pruneExpiredIntents(Deposit storage _deposit, uint256 _depositId, uint256 _minRequiredAmount) internal {\n        (\n            bytes32[] memory expiredIntents,\n            uint256 reclaimableAmount\n        ) = _getExpiredIntents(_depositId);\n        \n        uint256 availableAmount = _deposit.remainingDeposits;\n        availableAmount += reclaimableAmount;\n        \n        if (availableAmount < _minRequiredAmount) revert InsufficientDepositLiquidity(_depositId, availableAmount, _minRequiredAmount);\n        \n        // Prune expired intents to free up funds\n        _pruneIntents(_depositId, expiredIntents);\n        _deposit.remainingDeposits += reclaimableAmount;\n        _deposit.outstandingIntentAmount -= reclaimableAmount;\n    }\n\n    /**\n     * @notice Prunes given intents from a deposit. Also calls orchestrator to clean up intents.\n     */\n    function _pruneIntents(uint256 _depositId, bytes32[] memory _intents) internal {\n        // Call orchestrator to clean up intents first\n        try IOrchestrator(orchestrator).pruneIntents(_intents) {} catch {}\n\n        for (uint256 i = 0; i < _intents.length; i++) {\n            Intent memory intent = depositIntents[_depositId][_intents[i]];\n            if (intent.intentHash != bytes32(0)) {\n                _pruneIntent(_depositId, intent.intentHash);\n                \n                emit FundsUnlocked(_depositId, intent.intentHash, intent.amount);\n            }\n        }\n    }\n\n    /**\n     * @notice Prunes an intent from a deposit. Does not call orchestrator.\n     */\n    function _pruneIntent(uint256 _depositId, bytes32 _intentHash) internal {\n        delete depositIntents[_depositId][_intentHash];\n        depositIntentHashes[_depositId].removeStorage(_intentHash);\n    }\n\n    /**\n     * @notice Removes a deposit if no outstanding intents AND remaining funds is dust. Before deletion, collects any \n     * accrued maker fees to the protocol fee recipient and transfers any remaining dust to the protocol fee recipient.\n     */\n    function _closeDepositIfNecessary(uint256 _depositId, Deposit storage _deposit) internal {\n        // If no remaining deposits, delete the acceptingIntents flag\n        if (_deposit.remainingDeposits == 0) {\n            delete _deposit.acceptingIntents;\n        }\n\n        // Close if no outstanding intents, no remaining deposits, and no reserved fees left\n        uint256 reservedFeesLeft = _deposit.reservedMakerFees - _deposit.accruedMakerFees - _deposit.accruedReferrerFees;\n        uint256 totalRemaining = _deposit.remainingDeposits + reservedFeesLeft;\n\n        if (_deposit.outstandingIntentAmount == 0 && totalRemaining <= dustThreshold) {\n            \n            _collectAccruedMakerFees(_depositId, _deposit);\n            _collectAccruedReferrerFees(_depositId, _deposit);\n            \n            if (totalRemaining > 0) {\n                _deposit.token.transfer(makerFeeRecipient, totalRemaining);\n                emit DustCollected(_depositId, totalRemaining, makerFeeRecipient);\n            }\n            \n            _closeDeposit(_depositId, _deposit);\n        }\n    }\n\n\n    /**\n     * @notice Collects any accrued maker fees to the protocol fee recipient.\n     */\n    function _collectAccruedMakerFees(uint256 _depositId, Deposit storage _deposit) internal {\n        if (_deposit.accruedMakerFees > 0) {\n            _deposit.token.transfer(makerFeeRecipient, _deposit.accruedMakerFees);\n            emit MakerFeesCollected(_depositId, _deposit.accruedMakerFees, makerFeeRecipient);\n        }\n    }\n\n    /**\n     * @notice Collects any accrued referrer fees to the referrer.\n     */\n    function _collectAccruedReferrerFees(uint256 _depositId, Deposit storage _deposit) internal {\n        if (_deposit.accruedReferrerFees > 0) {\n            _deposit.token.transfer(_deposit.referrer, _deposit.accruedReferrerFees);\n            emit ReferrerFeesCollected(_depositId, _deposit.accruedReferrerFees, _deposit.referrer);\n        }\n    }\n\n    /**\n     * @notice Closes a deposit. Deleting a deposit deletes it from the deposits mapping and removes tracking\n     * it in the user's accountDeposits mapping. Also deletes the verification and currency data for the deposit.\n     */\n    function _closeDeposit(uint256 _depositId, Deposit storage _deposit) internal {\n        address depositor = _deposit.depositor;\n        accountDeposits[depositor].removeStorage(_depositId);\n        \n        _deleteDepositVerifierAndCurrencyData(_depositId);\n        \n        delete deposits[_depositId];\n        \n        emit DepositClosed(_depositId, depositor);\n    }\n\n    /**\n     * @notice Iterates through all verifiers for a deposit and deletes the corresponding verifier data and currencies.\n     */\n    function _deleteDepositVerifierAndCurrencyData(uint256 _depositId) internal {\n        address[] memory verifiers = depositVerifiers[_depositId];\n        for (uint256 i = 0; i < verifiers.length; i++) {\n            address verifier = verifiers[i];\n            delete depositVerifierData[_depositId][verifier];\n            bytes32[] memory currencies = depositCurrencies[_depositId][verifier];\n            for (uint256 j = 0; j < currencies.length; j++) {\n                delete depositCurrencyMinRate[_depositId][verifier][currencies[j]];\n            }\n        }\n    }\n\n    /**\n     * @notice Adds list of verifiers and corresponding verification data and currencies to a deposit.\n     */\n    function _addVerifiersToDeposit(\n        uint256 _depositId,\n        address[] calldata _verifiers,\n        DepositVerifierData[] calldata _verifierData,\n        Currency[][] calldata _currencies\n    ) internal {\n\n        // Check that the length of the verifiers, depositVerifierData, and currencies arrays are the same\n        if (_verifiers.length != _verifierData.length) revert ArrayLengthMismatch(_verifiers.length, _verifierData.length);\n        if (_verifiers.length != _currencies.length) revert ArrayLengthMismatch(_verifiers.length, _currencies.length);\n\n        for (uint256 i = 0; i < _verifiers.length; i++) {\n            address verifier = _verifiers[i];\n            \n            if (verifier == address(0)) revert ZeroAddress();\n            if (!(paymentVerifierRegistry.isWhitelistedVerifier(verifier) || \n                paymentVerifierRegistry.isAcceptingAllVerifiers())) {\n                revert VerifierNotWhitelisted(verifier);\n            }\n            if (bytes(_verifierData[i].payeeDetails).length == 0) revert EmptyPayeeDetails();\n            if (bytes(depositVerifierData[_depositId][verifier].payeeDetails).length != 0) revert VerifierAlreadyExists(_depositId, verifier);\n\n            depositVerifierData[_depositId][verifier] = _verifierData[i];\n            depositVerifiers[_depositId].push(verifier);\n\n            bytes32 payeeDetailsHash = keccak256(abi.encodePacked(_verifierData[i].payeeDetails));\n            emit DepositVerifierAdded(_depositId, verifier, payeeDetailsHash, _verifierData[i].intentGatingService);\n\n            for (uint256 j = 0; j < _currencies[i].length; j++) {\n                Currency memory currency = _currencies[i][j];\n\n                _addCurrencyToDeposit(\n                    _depositId, \n                    verifier, \n                    currency.code, \n                    currency.minConversionRate\n                );\n            }\n        }\n    }\n\n    /**\n     * @notice Adds a currency to a deposit.\n     */\n    function _addCurrencyToDeposit(\n        uint256 _depositId,\n        address _verifier,\n        bytes32 _currencyCode,\n        uint256 _minConversionRate\n    ) internal {\n        if (!IBasePaymentVerifier(_verifier).isCurrency(_currencyCode)) {\n            revert CurrencyNotSupported(_verifier, _currencyCode);\n        }\n        if (_minConversionRate == 0) revert ZeroConversionRate();\n        if (depositCurrencyMinRate[_depositId][_verifier][_currencyCode] != 0) {\n            revert CurrencyAlreadyExists(_verifier, _currencyCode);\n        }\n        depositCurrencyMinRate[_depositId][_verifier][_currencyCode] = _minConversionRate;\n        depositCurrencies[_depositId][_verifier].push(_currencyCode);\n\n        emit DepositCurrencyAdded(_depositId, _verifier, _currencyCode, _minConversionRate);\n    }\n}\n"
    },
    "contracts/external/AddressArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: MIT\n*/\n\npragma solidity ^0.8.17;\n\n/**\n * @title AddressArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle Address Arrays\n *\n * CHANGELOG:\n * - 4/21/21: Added validatePairsWithArray methods\n */\nlibrary AddressArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(address[] memory A, address a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n    * Returns true if there are 2 elements that are the same in an array\n    * @param A The input array to search\n    * @return Returns boolean for the first occurrence of a duplicate\n    */\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\n        require(A.length > 0, \"A is empty\");\n\n        for (uint256 i = 0; i < A.length - 1; i++) {\n            address current = A[i];\n            for (uint256 j = i + 1; j < A.length; j++) {\n                if (current == A[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The address to remove\n     * @return Returns the array with the object removed.\n     */\n    function remove(address[] memory A, address a)\n        internal\n        pure\n        returns (address[] memory)\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"Address not in array.\");\n        } else {\n            (address[] memory _A,) = pop(A, index);\n            return _A;\n        }\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The address to remove\n     */\n    function removeStorage(address[] storage A, address a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"Address not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n\n    /**\n    * Removes specified index from array\n    * @param A The input array to search\n    * @param index The index to remove\n    * @return Returns the new array and the removed entry\n    */\n    function pop(address[] memory A, uint256 index)\n        internal\n        pure\n        returns (address[] memory, address)\n    {\n        uint256 length = A.length;\n        require(index < A.length, \"Index must be < A length\");\n        address[] memory newAddresses = new address[](length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newAddresses[i] = A[i];\n        }\n        for (uint256 j = index + 1; j < length; j++) {\n            newAddresses[j - 1] = A[j];\n        }\n        return (newAddresses, A[index]);\n    }\n}\n"
    },
    "contracts/external/Bytes32ArrayUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\n/**\n * @title Bytes32ArrayUtils\n * @author ZKP2P\n *\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\n */\nlibrary Bytes32ArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n    * Returns true if there are 2 elements that are the same in an array\n    * @param A The input array to search\n    * @return Returns boolean for the first occurrence of a duplicate\n    */\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\n        require(A.length > 0, \"A is empty\");\n\n        for (uint256 i = 0; i < A.length - 1; i++) {\n            bytes32 current = A[i];\n            for (uint256 j = i + 1; j < A.length; j++) {\n                if (current == A[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     * @return Returns the array with the object removed.\n     */\n    function remove(bytes32[] memory A, bytes32 a)\n        internal\n        pure\n        returns (bytes32[] memory)\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"bytes32 not in array.\");\n        } else {\n            (bytes32[] memory _A,) = pop(A, index);\n            return _A;\n        }\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     */\n    function removeStorage(bytes32[] storage A, bytes32 a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"bytes32 not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n\n    /**\n    * Removes specified index from array\n    * @param A The input array to search\n    * @param index The index to remove\n    * @return Returns the new array and the removed entry\n    */\n    function pop(bytes32[] memory A, uint256 index)\n        internal\n        pure\n        returns (bytes32[] memory, bytes32)\n    {\n        uint256 length = A.length;\n        require(index < A.length, \"Index must be < A length\");\n        bytes32[] memory newBytes = new bytes32[](length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newBytes[i] = A[i];\n        }\n        for (uint256 j = index + 1; j < length; j++) {\n            newBytes[j - 1] = A[j];\n        }\n        return (newBytes, A[index]);\n    }\n}\n"
    },
    "contracts/external/Claims.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./ReclaimStringUtils.sol\";\n\n// Imported from @reclaimprotocol/verifier-solidity-sdk\n\n/**\n * Library to assist with requesting,\n * serialising & verifying credentials\n */\nlibrary Claims {\n\t/** Data required to describe a claim */\n\tstruct CompleteClaimData {\n\t\tbytes32 identifier;\n\t\taddress owner;\n\t\tuint32 timestampS;\n\t\tuint32 epoch;\n\t}\n\n\tstruct ClaimInfo {\n\t\tstring provider;\n\t\tstring parameters;\n\t\tstring context;\n\t}\n\n\t/** Claim with signatures & signer */\n\tstruct SignedClaim {\n\t\tCompleteClaimData claim;\n\t\tbytes[] signatures;\n\t}\n\n\t/**\n\t * Asserts that the claim is signed by the expected witnesses\n\t */\n\tfunction assertValidSignedClaim(\n\t\tSignedClaim memory self,\n\t\taddress[] memory expectedWitnessAddresses\n\t) internal pure {\n\t\trequire(self.signatures.length > 0, \"No signatures\");\n\t\taddress[] memory signedWitnesses = recoverSignersOfSignedClaim(self);\n\t\tfor (uint256 i = 0; i < expectedWitnessAddresses.length; i++) {\n\t\t\tbool found = false;\n\t\t\tfor (uint256 j = 0; j < signedWitnesses.length; j++) {\n\t\t\t\tif (signedWitnesses[j] == expectedWitnessAddresses[i]) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\trequire(found, \"Missing witness signature\");\n\t\t}\n\t}\n\n\t/**\n\t * @dev recovers the signer of the claim\n\t */\n\tfunction recoverSignersOfSignedClaim(\n\t\tSignedClaim memory self\n\t) internal pure returns (address[] memory) {\n\t\tbytes memory serialised = serialise(self.claim);\n\t\taddress[] memory signers = new address[](self.signatures.length);\n\t\tfor (uint256 i = 0; i < self.signatures.length; i++) {\n\t\t\tsigners[i] = verifySignature(serialised, self.signatures[i]);\n\t\t}\n\n\t\treturn signers;\n\t}\n\n\t/**\n\t * @dev serialises the credential into a string;\n\t * the string is used to verify the signature\n\t *\n\t * the serialisation is the same as done by the TS library\n\t */\n\tfunction serialise(\n\t\tCompleteClaimData memory self\n\t) internal pure returns (bytes memory) {\n\t\treturn\n\t\t\tabi.encodePacked(\n\t\t\t\tStringUtils.bytes2str(abi.encodePacked(self.identifier)),\n\t\t\t\t\"\\n\",\n\t\t\t\tStringUtils.address2str(self.owner),\n\t\t\t\t\"\\n\",\n\t\t\t\tStringUtils.uint2str(self.timestampS),\n\t\t\t\t\"\\n\",\n\t\t\t\tStringUtils.uint2str(self.epoch)\n\t\t\t);\n\t}\n\n\t/**\n\t * @dev returns the address of the user that generated the signature\n\t */\n\tfunction verifySignature(\n\t\tbytes memory content,\n\t\tbytes memory signature\n\t) internal pure returns (address signer) {\n\t\tbytes32 signedHash = keccak256(\n\t\t\tabi.encodePacked(\n\t\t\t\t\"\\x19Ethereum Signed Message:\\n\",\n\t\t\t\tStringUtils.uint2str(content.length),\n\t\t\t\tcontent\n\t\t\t)\n\t\t);\n\t\treturn ECDSA.recover(signedHash, signature);\n\t}\n\n\tfunction hashClaimInfo(ClaimInfo memory claimInfo) internal pure returns (bytes32) {\n\t\tbytes memory serialised = abi.encodePacked(\n\t\t\tclaimInfo.provider,\n\t\t\t\"\\n\",\n\t\t\tclaimInfo.parameters,\n\t\t\t\"\\n\",\n\t\t\tclaimInfo.context\n\t\t);\n\t\treturn keccak256(serialised);\n\t}\n}\n"
    },
    "contracts/external/DateTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// ----------------------------------------------------------------------------\n// DateTime Library v2.0\n//\n// A gas-efficient Solidity date and time library\n//\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n//\n// Tested date range 1970/01/01 to 2345/12/31\n//\n// Conventions:\n// Unit      | Range         | Notes\n// :-------- |:-------------:|:-----\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n// year      | 1970 ... 2345 |\n// month     | 1 ... 12      |\n// day       | 1 ... 31      |\n// hour      | 0 ... 23      |\n// minute    | 0 ... 59      |\n// second    | 0 ... 59      |\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n//\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n//\n// NOTE: This library has been pruned to keep only functions needed by zkp2p\n// ----------------------------------------------------------------------------\n\nlibrary DateTime {\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\n    uint256 constant SECONDS_PER_MINUTE = 60;\n    int256 constant OFFSET19700101 = 2440588;\n\n    uint256 constant DOW_MON = 1;\n    uint256 constant DOW_TUE = 2;\n    uint256 constant DOW_WED = 3;\n    uint256 constant DOW_THU = 4;\n    uint256 constant DOW_FRI = 5;\n    uint256 constant DOW_SAT = 6;\n    uint256 constant DOW_SUN = 7;\n\n    // ------------------------------------------------------------------------\n    // Calculate the number of days from 1970/01/01 to year/month/day using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // days = day\n    //      - 32075\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\n    //      - offset\n    // ------------------------------------------------------------------------\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\n        require(year >= 1970);\n        int256 _year = int256(year);\n        int256 _month = int256(month);\n        int256 _day = int256(day);\n\n        int256 __days = _day - 32075 + (1461 * (_year + 4800 + (_month - 14) / 12)) / 4\n            + (367 * (_month - 2 - ((_month - 14) / 12) * 12)) / 12\n            - (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) / 4 - OFFSET19700101;\n\n        _days = uint256(__days);\n    }\n\n    function timestampFromDateTime(\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    )\n        internal\n        pure\n        returns (uint256 timestamp)\n    {\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR\n            + minute * SECONDS_PER_MINUTE + second;\n    }\n}\n"
    },
    "contracts/external/ReclaimStringUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// Imported from @reclaimprotocol/verifier-solidity-sdk\n\n/**\n * Utilities for string manipulation & conversion\n */\nlibrary StringUtils {\n\tfunction address2str(address x) internal pure returns (string memory) {\n\t\tbytes memory s = new bytes(40);\n\t\tfor (uint i = 0; i < 20; i++) {\n\t\t\tbytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\n\t\t\tbytes1 hi = bytes1(uint8(b) / 16);\n\t\t\tbytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n\t\t\ts[2 * i] = getChar(hi);\n\t\t\ts[2 * i + 1] = getChar(lo);\n\t\t}\n\t\treturn string(abi.encodePacked(\"0x\", s));\n\t}\n\n\tfunction bytes2str(bytes memory buffer) internal pure returns (string memory) {\n\t\t// Fixed buffer size for hexadecimal convertion\n\t\tbytes memory converted = new bytes(buffer.length * 2);\n\t\tbytes memory _base = \"0123456789abcdef\";\n\n\t\tfor (uint256 i = 0; i < buffer.length; i++) {\n\t\t\tconverted[i * 2] = _base[uint8(buffer[i]) / _base.length];\n\t\t\tconverted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\n\t\t}\n\n\t\treturn string(abi.encodePacked(\"0x\", converted));\n\t}\n\n\tfunction getChar(bytes1 b) internal pure returns (bytes1 c) {\n\t\tif (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n\t\telse return bytes1(uint8(b) + 0x57);\n\t}\n\n\tfunction bool2str(bool _b) internal pure returns (string memory _uintAsString) {\n\t\tif (_b) {\n\t\t\treturn \"true\";\n\t\t} else {\n\t\t\treturn \"false\";\n\t\t}\n\t}\n\n\tfunction uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n\t\tif (_i == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tuint j = _i;\n\t\tuint len;\n\t\twhile (j != 0) {\n\t\t\tlen++;\n\t\t\tj /= 10;\n\t\t}\n\t\tbytes memory bstr = new bytes(len);\n\t\tuint k = len;\n\t\twhile (_i != 0) {\n\t\t\tk = k - 1;\n\t\t\tuint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n\t\t\tbytes1 b1 = bytes1(temp);\n\t\t\tbstr[k] = b1;\n\t\t\t_i /= 10;\n\t\t}\n\t\treturn string(bstr);\n\t}\n\n\tfunction areEqual(\n\t\tstring calldata _a,\n\t\tstring storage _b\n\t) internal pure returns (bool) {\n\t\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\n\t}\n\n\tfunction areEqual(string memory _a, string memory _b) internal pure returns (bool) {\n\t\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\n\t}\n\n\tfunction toLower(string memory str) internal pure returns (string memory) {\n\t\tbytes memory bStr = bytes(str);\n\t\tbytes memory bLower = new bytes(bStr.length);\n\t\tfor (uint i = 0; i < bStr.length; i++) {\n\t\t\t// Uppercase character...\n\t\t\tif ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\n\t\t\t\t// So we add 32 to make it lowercase\n\t\t\t\tbLower[i] = bytes1(uint8(bStr[i]) + 32);\n\t\t\t} else {\n\t\t\t\tbLower[i] = bStr[i];\n\t\t\t}\n\t\t}\n\t\treturn string(bLower);\n\t}\n\n\tfunction substring(\n\t\tstring memory str,\n\t\tuint startIndex,\n\t\tuint endIndex\n\t) internal pure returns (string memory) {\n\t\tbytes memory strBytes = bytes(str);\n\t\tbytes memory result = new bytes(endIndex - startIndex);\n\t\tfor (uint i = startIndex; i < endIndex; i++) {\n\t\t\tresult[i - startIndex] = strBytes[i];\n\t\t}\n\t\treturn string(result);\n\t}\n}\n"
    },
    "contracts/external/StringArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache-2.0\n*/\n\npragma solidity ^0.8.18;\n\n/**\n * @title StringArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle String Arrays\n */\nlibrary StringArrayUtils {\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input string to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(string[] memory A, string memory a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (keccak256(bytes(A[i])) == keccak256(bytes(a))) {\n                return (i, true);\n            }\n        }\n        return (type(uint256).max, false);\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The string to remove\n     */\n    function removeStorage(string[] storage A, string memory a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"String not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n}"
    },
    "contracts/external/Uint256ArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache-2.0\n*/\n\npragma solidity ^0.8.18;\n\n/**\n * @title Uint256ArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle Uint256 Arrays\n */\nlibrary Uint256ArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n     * Returns the combination of the two arrays\n     * @param A The first array\n     * @param B The second array\n     * @return Returns A extended by B\n     */\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\n        uint256 aLength = A.length;\n        uint256 bLength = B.length;\n        uint256[] memory newUints = new uint256[](aLength + bLength);\n        for (uint256 i = 0; i < aLength; i++) {\n            newUints[i] = A[i];\n        }\n        for (uint256 j = 0; j < bLength; j++) {\n            newUints[aLength + j] = B[j];\n        }\n        return newUints;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     */\n    function removeStorage(uint256[] storage A, uint256 a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"uint256 not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IPostIntentHook } from \"./IPostIntentHook.sol\";\n\ninterface IEscrow {\n    \n    /* ============ Structs ============ */\n\n    struct Intent {\n        bytes32 intentHash;                        // Unique identifier for the intent\n        uint256 amount;                            // Amount locked\n        uint256 timestamp;                         // When this intent was created\n        uint256 expiryTime;                        // When this intent expires\n    }\n\n    struct Range {\n        uint256 min;                                // Minimum value\n        uint256 max;                                // Maximum value\n    }\n\n    struct Deposit {\n        address depositor;                          // Address of depositor\n        address delegate;                           // Address that can manage this deposit (address(0) if no delegate)\n        IERC20 token;                               // Address of deposit token\n        uint256 amount;                             // Amount of deposit token (gross amount including reserved fees)\n        Range intentAmountRange;                    // Range of take amount per intent\n        // Deposit state\n        bool acceptingIntents;                      // State: True if the deposit is accepting intents, False otherwise\n        uint256 remainingDeposits;                  // State: Amount of remaining deposited liquidity (net of reserved fees)\n        uint256 outstandingIntentAmount;            // State: Amount of outstanding intents (may include expired intents)\n        // Fee tracking\n        uint256 makerProtocolFee;                   // State: Maker protocol fee at the time of deposit creation in preciseUnits  (1e16 = 1%)\n        uint256 reservedMakerFees;                  // State: Total fees reserved from maker (calculated upfront)\n        uint256 accruedMakerFees;                   // State: Fees actually earned from fulfilled intents\n        uint256 accruedReferrerFees;               // State: Referrer fees actually earned from fulfilled intents\n        // Intent guardian\n        address intentGuardian;                     // Address that can extend intent expiry times (address(0) if no guardian)\n        // Referrer\n        address referrer;                           // Address of the referrer who brought this deposit (address(0) if no referrer)\n        uint256 referrerFee;                        // Fee to be paid to the referrer in preciseUnits (1e16 = 1%)\n    }\n\n    struct Currency {\n        bytes32 code;                               // Currency code (keccak256 hash of the currency code)\n        uint256 minConversionRate;                  // Minimum rate of deposit token to fiat currency (in preciseUnits)\n    }\n\n    struct DepositVerifierData {\n        address intentGatingService;                // Public key of gating service that will be used to verify intents\n        string payeeDetails;                        // Payee details, could be both hash or raw details; verifier will decide how to parse it\n        bytes data;                                 // Verification Data: Additional data used for payment verification; Can hold attester address\n                                                    // in case of TLS proofs, domain key hash in case of zkEmail proofs, currency code etc.\n    }\n\n    struct CreateDepositParams {\n        IERC20 token;                             // The token to be deposited\n        uint256 amount;                           // The amount of token to deposit\n        Range intentAmountRange;                  // The max and min take amount for each intent\n        address[] verifiers;                      // The payment verifiers that deposit supports\n        DepositVerifierData[] verifierData;       // The payment verification data for each verifier that deposit supports\n        Currency[][] currencies;                  // The currencies for each verifier that deposit supports\n        address delegate;                         // Optional delegate address that can manage this deposit (address(0) for no delegate)\n        address intentGuardian;                   // Optional intent guardian address that can extend intent expiry times (address(0) for no guardian)\n        address referrer;                         // Address of the referrer who brought this deposit (address(0) if no referrer)\n        uint256 referrerFee;                      // Fee to be paid to the referrer in preciseUnits (1e16 = 1%)\n    }\n\n    /* ============ Events ============ */\n\n    event DepositReceived(uint256 indexed depositId, address indexed depositor, IERC20 indexed token, uint256 amount, Range intentAmountRange, address delegate, address intentGuardian);\n\n    event DepositVerifierAdded(uint256 indexed depositId, address indexed verifier, bytes32 indexed payeeDetailsHash, address intentGatingService);\n    event DepositVerifierRemoved(uint256 indexed depositId, address indexed verifier);\n\n    event DepositCurrencyAdded(uint256 indexed depositId, address indexed verifier, bytes32 indexed currency, uint256 conversionRate);\n    event DepositCurrencyRemoved(uint256 indexed depositId, address indexed verifier, bytes32 indexed currencyCode);        \n\n    event DepositFundsAdded(uint256 indexed depositId, address indexed depositor, uint256 amount);\n    event DepositWithdrawn(uint256 indexed depositId, address indexed depositor, uint256 amount, bool acceptingIntents);\n    event DepositClosed(uint256 depositId, address depositor);\n\n    event DepositIntentAmountRangeUpdated(uint256 indexed depositId, Range intentAmountRange);\n    event DepositMinConversionRateUpdated(uint256 indexed depositId, address indexed verifier, bytes32 indexed currency, uint256 newMinConversionRate);\n    event DepositAcceptingIntentsUpdated(uint256 indexed depositId, bool acceptingIntents);\n\n    event DepositDelegateSet(uint256 indexed depositId, address indexed depositor, address indexed delegate);\n    event DepositDelegateRemoved(uint256 indexed depositId, address indexed depositor);\n\n    event MinDepositAmountSet(uint256 minDepositAmount);\n\n    event OrchestratorUpdated(address indexed orchestrator);\n    event PaymentVerifierRegistryUpdated(address indexed paymentVerifierRegistry);\n\n    event FundsLocked(uint256 indexed depositId, bytes32 indexed intentHash, uint256 amount, uint256 expiryTime);\n    event FundsUnlocked(uint256 indexed depositId, bytes32 indexed intentHash, uint256 amount);\n    event FundsUnlockedAndTransferred(\n        uint256 indexed depositId, \n        bytes32 indexed intentHash, \n        uint256 unlockedAmount, \n        uint256 transferredAmount, \n        uint256 makerFees, \n        uint256 referrerFees, \n        address to\n    );\n    event IntentExpiryExtended(uint256 indexed depositId, bytes32 indexed intentHash, uint256 newExpiryTime);\n\n    event MakerProtocolFeeUpdated(uint256 makerProtocolFee);\n    event MakerFeeRecipientUpdated(address indexed makerFeeRecipient);\n    event MakerFeesCollected(uint256 indexed depositId, uint256 collectedFees, address indexed makerFeeRecipient);\n    event ReferrerFeesCollected(uint256 indexed depositId, uint256 collectedFees, address indexed referrer);\n    event DustCollected(uint256 indexed depositId, uint256 dustAmount, address indexed makerFeeRecipient);\n    event DustThresholdUpdated(uint256 dustThreshold);\n    event MaxIntentsPerDepositUpdated(uint256 maxIntentsPerDeposit);\n    event IntentExpirationPeriodUpdated(uint256 intentExpirationPeriod);\n\n    /* ============ Standardized Custom Errors ============ */\n    \n    // Zero value errors\n    error ZeroAddress();\n    error ZeroValue();\n    error ZeroMinValue();\n    error ZeroConversionRate();\n\n    // Authorization errors\n    error UnauthorizedCaller(address caller, address authorized);\n    error UnauthorizedCallerOrDelegate(address caller, address owner, address delegate);\n\n    // Range and amount errors\n    error InvalidRange(uint256 min, uint256 max);\n    error AmountBelowMin(uint256 amount, uint256 min);\n    error AmountAboveMax(uint256 amount, uint256 max);\n    error AmountExceedsAvailable(uint256 requested, uint256 available);\n    error FeeExceedsMaximum(uint256 fee, uint256 maximum);\n\n    // Not found errors\n    error DepositNotFound(uint256 depositId);\n    error IntentNotFound(bytes32 intentHash);\n    error VerifierNotFound(uint256 depositId, address verifier);\n    error CurrencyNotFound(address verifier, bytes32 currency);\n    error DelegateNotFound(uint256 depositId);\n\n    // Already exists errors\n    error VerifierAlreadyExists(uint256 depositId, address verifier);\n    error CurrencyAlreadyExists(address verifier, bytes32 currency);\n\n    // State errors\n    error DepositNotAcceptingIntents(uint256 depositId);\n    error DepositAlreadyInState(uint256 depositId, bool currentState);\n    error InsufficientDepositLiquidity(uint256 depositId, uint256 available, uint256 required);\n    error MaxIntentsExceeded(uint256 depositId, uint256 current, uint256 max);\n\n    // Validation errors\n    error EmptyPayeeDetails();\n    error ArrayLengthMismatch(uint256 length1, uint256 length2);\n    error InvalidReferrerFeeConfiguration();\n\n    // Verifier errors\n    error VerifierNotWhitelisted(address verifier);\n    error CurrencyNotSupported(address verifier, bytes32 currency);\n\n    \n    /* ============ External Functions for Orchestrator ============ */\n\n    function lockFunds(uint256 _depositId, bytes32 _intentHash, uint256 _amount) external;\n    function unlockFunds(uint256 _depositId, bytes32 _intentHash) external;\n    function unlockAndTransferFunds(uint256 _depositId, bytes32 _intentHash, uint256 _transferAmount, address _to) external;\n    function extendIntentExpiry(uint256 _depositId, bytes32 _intentHash, uint256 _newExpiryTime) external;\n\n    /* ============ View Functions ============ */\n\n    function getDeposit(uint256 _depositId) external view returns (Deposit memory);\n    function getDepositIntent(uint256 _depositId, bytes32 _intentHash) external view returns (Intent memory);\n    function getDepositVerifiers(uint256 _depositId) external view returns (address[] memory);\n    function getDepositCurrencies(uint256 _depositId, address _verifier) external view returns (bytes32[] memory);\n    function getDepositCurrencyMinRate(uint256 _depositId, address _verifier, bytes32 _currencyCode) external view returns (uint256);\n    function getDepositVerifierData(uint256 _depositId, address _verifier) external view returns (DepositVerifierData memory);\n    function getAccountDeposits(address _account) external view returns (uint256[] memory);\n    function getDepositIntentHashes(uint256 _depositId) external view returns (bytes32[] memory);\n    function getExpiredIntents(uint256 _depositId) external view returns (bytes32[] memory expiredIntents, uint256 reclaimedAmount);\n}\n"
    },
    "contracts/interfaces/IEscrowRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IEscrowRegistry {\n    function isWhitelistedEscrow(address _escrow) external view returns (bool);\n    function isAcceptingAllEscrows() external view returns (bool);\n    function getWhitelistedEscrows() external view returns (address[] memory);\n}"
    },
    "contracts/interfaces/INullifierRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface INullifierRegistry {\n    function addNullifier(bytes32 _nullifier) external;\n    function isNullified(bytes32 _nullifier) external view returns(bool);\n}\n"
    },
    "contracts/interfaces/IOrchestrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IPostIntentHook } from \"./IPostIntentHook.sol\";\n\ninterface IOrchestrator {\n    \n    /* ============ Structs ============ */\n\n    struct Intent {\n        address owner;                              // Address of the intent owner  \n        address to;                                 // Address to forward funds to (can be same as owner)\n        address escrow;                             // Address of the escrow contract holding the deposit\n        uint256 depositId;                          // ID of the deposit the intent is associated with\n        uint256 amount;                             // Amount of the deposit.token the owner wants to take\n        uint256 timestamp;                          // Timestamp of the intent\n        address paymentVerifier;                    // Address of the payment verifier corresponding to payment service the owner is \n                                                    // going to pay with offchain\n        bytes32 fiatCurrency;                       // Currency code that the owner is paying in offchain (keccak256 hash of the currency code)\n        uint256 conversionRate;                     // Conversion rate of deposit token to fiat currency at the time of intent\n        address referrer;                           // Address of the referrer who brought this intent (if any)\n        uint256 referrerFee;                        // Fee to be paid to the referrer in preciseUnits (1e16 = 1%)\n        IPostIntentHook postIntentHook;             // Address of the post-intent hook that will execute any post-intent actions\n        bytes data;                                 // Additional data to be passed to the post-intent hook contract\n    }\n\n    struct SignalIntentParams {\n        address escrow;                             // The escrow contract where the deposit is held\n        uint256 depositId;                          // The ID of the deposit the taker intends to use\n        uint256 amount;                             // The amount of deposit.token the user wants to take\n        address to;                                 // Address to forward funds to\n        address verifier;                           // The payment verifier for the payment service\n        bytes32 fiatCurrency;                       // The currency code for offchain payment\n        uint256 conversionRate;                     // The conversion rate agreed offchain\n        address referrer;                           // Address of the referrer (address(0) if no referrer)\n        uint256 referrerFee;                        // Fee to be paid to the referrer\n        bytes gatingServiceSignature;               // Signature from the deposit's gating service\n        uint256 signatureExpiration;                // Timestamp when the gating service signature expires\n        IPostIntentHook postIntentHook;             // Optional post-intent hook (address(0) for no hook)\n        bytes data;                                 // Additional data for the intent\n    }\n\n    struct FulfillIntentParams {\n        bytes paymentProof;                         // Payment proof. Can be Groth16 Proof, TLSNotary proof, TLSProxy proof, attestation etc.\n        bytes32 intentHash;                         // Identifier of intent being fulfilled\n        bytes verificationData;                     // Additional data for payment verifier (e.g. currency resolution data)\n        bytes postIntentHookData;                   // Additional data for post intent hook\n    }\n\n    /* ============ Events ============ */\n\n    event IntentSignaled(\n        bytes32 indexed intentHash, \n        address indexed escrow,\n        uint256 indexed depositId, \n        address verifier, \n        address owner, \n        address to, \n        uint256 amount, \n        bytes32 fiatCurrency, \n        uint256 conversionRate, \n        uint256 timestamp\n    );\n\n    event IntentPruned(\n        bytes32 indexed intentHash\n    );\n\n    event IntentFulfilled(\n        bytes32 indexed intentHash,\n        address indexed fundsTransferredTo,   // Address that funds were transferred to; can be intent.to or postIntentHook address\n        uint256 amount,\n        bool isManualRelease,\n        bytes32 paymentCurrency,      // The currency that was actually paid\n        string paymentId              // The payment ID from the payment platform\n    );\n\n    event AllowMultipleIntentsUpdated(bool allowMultiple);\n\n    event PaymentVerifierRegistryUpdated(address indexed paymentVerifierRegistry);\n    event PostIntentHookRegistryUpdated(address indexed postIntentHookRegistry);\n    event RelayerRegistryUpdated(address indexed relayerRegistry);\n    event EscrowRegistryUpdated(address indexed escrowRegistry);\n\n    event ProtocolFeeUpdated(uint256 protocolFee);\n    event ProtocolFeeRecipientUpdated(address indexed protocolFeeRecipient);\n    event PartialManualReleaseDelayUpdated(uint256 partialManualReleaseDelay);\n\n    /* ============ Standardized Custom Errors ============ */\n    \n    // Zero value errors\n    error ZeroAddress();\n    error ZeroValue();\n    \n    // Authorization errors\n    error UnauthorizedEscrowCaller(address caller);\n    error UnauthorizedCaller(address caller, address authorized);\n    \n    // Not found errors\n    error IntentNotFound(bytes32 intentHash);\n    error VerifierNotSupported(uint256 depositId, address verifier);\n    error CurrencyNotSupported(address verifier, bytes32 currency);\n    \n    // Whitelist errors\n    error VerifierNotWhitelisted(address verifier);\n    error PostIntentHookNotWhitelisted(address hook);\n    error EscrowNotWhitelisted(address escrow);\n    \n    // Amount and fee errors\n    error AmountBelowMin(uint256 amount, uint256 min);\n    error AmountAboveMax(uint256 amount, uint256 max);\n    error AmountExceedsLimit(uint256 amount, uint256 limit);\n    error FeeExceedsMaximum(uint256 fee, uint256 maximum);\n    error RateBelowMinimum(uint256 rate, uint256 minRate);\n    \n    // Validation errors\n    error AccountHasActiveIntent(address account, bytes32 existingIntent);\n    error InvalidReferrerFeeConfiguration();\n    error InvalidSignature();\n    error SignatureExpired(uint256 expiration, uint256 currentTime);\n    error PartialReleaseNotAllowedYet(uint256 currentTime, uint256 allowedTime);\n\n    // Verification errors\n    error PaymentVerificationFailed();\n    error HashMismatch(bytes32 expected, bytes32 actual);\n     \n    // Transfer errors\n    error TransferFailed(address recipient, uint256 amount);\n    error EscrowLockFailed();\n\n    /* ============ View Functions ============ */\n\n    function getIntent(bytes32 intentHash) external view returns (Intent memory);\n    function getAccountIntents(address account) external view returns (bytes32[] memory);\n    \n    /* ============ External Functions for Users ============ */\n\n    function signalIntent(SignalIntentParams calldata params) external;\n\n    function cancelIntent(bytes32 intentHash) external;\n\n    function fulfillIntent(FulfillIntentParams calldata params) external;\n\n    function releaseFundsToPayer(\n        bytes32 intentHash, \n        uint256 releaseAmount, \n        bytes calldata releaseData\n    ) external;\n\n    /* ============ External Functions for Escrow ============ */\n\n    function pruneIntents(bytes32[] calldata intentIds) external;\n}"
    },
    "contracts/interfaces/IPaymentVerifierRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IPaymentVerifierRegistry {\n    function isWhitelistedVerifier(address _verifier) external view returns (bool);\n    function isAcceptingAllVerifiers() external view returns (bool);\n    function getWhitelistedVerifiers() external view returns (address[] memory);\n}\n"
    },
    "contracts/interfaces/IPostIntentHook.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport { IOrchestrator } from \"./IOrchestrator.sol\";\n\n/**\n * @title IPostIntentHook\n * @notice Interface for post-intent hooks\n */\ninterface IPostIntentHook {\n\n    /**\n     * @notice Post-intent hook\n     * @param _intent The intent data structure containing all intent information\n     * @param _fulfillIntentData The data passed to fulfillIntent\n     */\n    function execute(\n        IOrchestrator.Intent memory _intent,\n        uint256 _amountNetFees,\n        bytes calldata _fulfillIntentData\n    ) external;\n}\n"
    },
    "contracts/interfaces/IPostIntentHookRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IPostIntentHookRegistry {\n    function isWhitelistedHook(address _hook) external view returns (bool);\n    function getWhitelistedHooks() external view returns (address[] memory);\n}\n"
    },
    "contracts/interfaces/IProtocolViewer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport { IEscrow } from \"./IEscrow.sol\";\nimport { IOrchestrator } from \"./IOrchestrator.sol\";\n\ninterface IProtocolViewer {\n\n    /* ============ Structs ============ */\n\n    struct VerifierDataView {\n        address verifier;\n        IEscrow.DepositVerifierData verificationData;\n        IEscrow.Currency[] currencies;\n    }\n\n    struct DepositView {\n        uint256 depositId;\n        IEscrow.Deposit deposit;\n        uint256 availableLiquidity;                 // Amount of liquidity available to signal intents (net of expired intents)\n        VerifierDataView[] verifiers;\n        bytes32[] intentHashes;\n    }\n\n    struct IntentView {\n        bytes32 intentHash;\n        IOrchestrator.Intent intent;\n        DepositView deposit;\n    }\n\n    /* ============ Functions ============ */\n\n    function getDepositFromIds(\n        uint256[] memory _depositIds\n    ) external view returns (DepositView[] memory);\n\n    function getAccountIntents(\n        address _account\n    ) external view returns (IntentView[] memory intentViews);\n}\n"
    },
    "contracts/interfaces/IRelayerRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IRelayerRegistry {\n    function isWhitelistedRelayer(address _relayer) external view returns (bool);\n    function getWhitelistedRelayers() external view returns (address[] memory);\n}\n"
    },
    "contracts/lib/Bytes32ConversionUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nlibrary Bytes32ConversionUtils {\n\n    /// @notice Convert a bytes32 value into its hex string representation WITH '0x' prefix.\n    /// @dev Resulting string is 66 characters long: \n    ///      - 2 chars for \"0x\" \n    ///      - 64 chars for the hex digits.\n    function toHexString(bytes32 data) internal pure returns (string memory) {\n        bytes memory alphabet = \"0123456789abcdef\";\n        // 66 = 2 (for \"0x\") + 64 (for 32 bytes * 2 hex chars each)\n        bytes memory str = new bytes(66);\n\n        // Add '0x' prefix\n        str[0] = '0';\n        str[1] = 'x';\n\n        for (uint i = 0; i < 32; i++) {\n            // Each byte splits into two hex characters.\n            // High nibble (4 bits)\n            str[2 + 2*i]   = alphabet[uint(uint8(data[i] >> 4))];\n            // Low nibble (4 bits)\n            str[3 + 2*i] = alphabet[uint(uint8(data[i] & 0x0f))];\n        }\n        return string(str);\n    }\n}\n"
    },
    "contracts/lib/ClaimVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nlibrary ClaimVerifier {\n    \n    /* ============ Constants ============ */\n\n    bytes constant CONTEXT_ADDRESS_BYTES      = bytes(\"{\\\"contextAddress\\\":\\\"\");\n    bytes constant CONTEXT_MESSAGE_BYTES      = bytes(\"\\\"contextMessage\\\":\\\"\");\n    bytes constant EXTRACTED_PARAMETERS_BYTES = bytes(\"\\\"extractedParameters\\\":{\\\"\");\n    bytes constant PROVIDER_HASH_PARAM_BYTES  = bytes(\"\\\"providerHash\\\":\\\"\");\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * Find the end index of target string in the data string. Returns the end index + 1 if\n     * the target string in the data string if found. Returns type(uint256).max if:\n     * - Target is longer than data\n     * - Target is not found\n     * Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code\n     */\n    function findSubstringEndIndex(\n        string memory data,\n        string memory target\n    ) internal pure returns (uint256) {\n        bytes memory dataBytes = bytes(data);\n        bytes memory targetBytes = bytes(target);\n\n        if (dataBytes.length < targetBytes.length) {\n            return type(uint256).max;\n        }\n\n        // Find start of target\n        for (uint i = 0; i <= dataBytes.length - targetBytes.length; i++) {\n            bool isMatch = true;\n            for (uint j = 0; j < targetBytes.length && isMatch; j++) {\n                if (dataBytes[i + j] != targetBytes[j]) {\n                    isMatch = false;\n                    break;\n                }\n            }\n            if (isMatch) {\n                return i + targetBytes.length; // Return end index + 1\n            }\n        }\n        return type(uint256).max;\n    }\n\n    /**\n     * Extracts given target field value from context in claims. Extracts only ONE value.\n     * Pass prefix formatted with quotes, for example '\"providerHash\\\":\\\"'\n     * Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code\n     *\n     * @param data      Context string from which target value needs to be extracted\n     * @param prefix    Prefix of the target value that needs to be extracted            \n     */\n    function extractFieldFromContext(\n        string memory data,\n        string memory prefix\n    ) internal pure returns (string memory) {\n        // Find end index of prefix; which is the start index of the value\n        uint256 start = findSubstringEndIndex(data, prefix);\n        bytes memory dataBytes = bytes(data);\n        if (start == dataBytes.length) {\n            return \"\"; // Prefix not found. Malformed or missing message\n        }\n\n        // Find the end of the VALUE, assuming it ends with a quote not preceded by a backslash\n        uint256 end = start;\n        while (\n            end < dataBytes.length &&\n            !(dataBytes[end] == '\"' && dataBytes[end - 1] != \"\\\\\")\n        ) {\n            end++;\n        }\n        if (end <= start) {\n            return \"\"; // Malformed or missing message\n        }\n        bytes memory contextMessage = new bytes(end - start);\n        for (uint i = start; i < end; i++) {\n            contextMessage[i - start] = dataBytes[i];\n        }\n        return string(contextMessage);\n    }\n\n    /**\n     * Extracts ALL values from context in a single pass. Context is stored as serialized JSON string with \n     * two keys: extractedParameters and providerHash. ExtractedParameters itself is a JSON string with \n     * key-value pairs. This function returns extracted individual values from extractedParameters along \n     * with providerHash (if extractProviderHash is true). Use maxValues to limit the number of expected values\n     * to be extracted from extractedParameters. In most cases, one would need to extract all values from\n     * extractedParameters and providerHash, hence use this function over calling extractFieldFromContext \n     * multiple times.\n     * \n     * @param data                  Context string from which target value needs to be extracted\n     * @param maxValues             Maximum number of values to be extracted from extractedParameters including intentHash and providerHash\n     * @param extractIntentAndProviderHash Extracts and returns intentHash and providerHash if true\n     */\n    function extractAllFromContext(\n        string memory data,\n        uint8 maxValues,\n        bool extractIntentAndProviderHash\n    ) internal pure returns (string[] memory) {\n        require(maxValues > 0, \"Max values must be greater than 0\");\n\n        bytes memory dataBytes = bytes(data);\n        \n        // Reuse variables to avoid \"stack too deep\"\n        uint index = 0;\n        uint valuesFound = 0;\n        uint startIndex;\n        uint endIndex;\n        bool isValue;\n\n        uint[] memory valueIndices = new uint[](2 * maxValues);\n\n        // Extract context address\n        for (uint i = 0; i < CONTEXT_ADDRESS_BYTES.length; i++) {\n            require(\n                dataBytes[index + i] == CONTEXT_ADDRESS_BYTES[i],\n                \"Extraction failed. Malformed contextAddress\"\n            );\n        }\n        index += CONTEXT_ADDRESS_BYTES.length;\n\n        // Extract context address value if it exists\n        startIndex = index;\n        while (\n            index < dataBytes.length &&\n            !(dataBytes[index] == '\"' && dataBytes[index - 1] != \"\\\\\")\n        ) {\n            index++;\n        }\n        require(index < dataBytes.length, \"Extraction failed. Malformed contextAddress\");\n        endIndex = index;\n        if (endIndex == startIndex) {\n            revert(\"Extraction failed. Empty contextAddress value\");\n        }\n        valueIndices[2 * valuesFound] = startIndex;\n        valueIndices[2 * valuesFound + 1] = endIndex;\n        valuesFound++;\n        index += 2; // move past the closing quote and comma\n\n        // Extract context message\n        for (uint i = 0; i < CONTEXT_MESSAGE_BYTES.length; i++) {\n            require(\n                dataBytes[index + i] == CONTEXT_MESSAGE_BYTES[i],\n                \"Extraction failed. Malformed contextMessage\"\n            );\n        }\n        index += CONTEXT_MESSAGE_BYTES.length;\n\n        // Extract context message value if it exists\n        startIndex = index;\n        while (\n            index < dataBytes.length &&\n            !(dataBytes[index] == '\"' && dataBytes[index - 1] != \"\\\\\")\n        ) {\n            index++;\n        }\n        require(index < dataBytes.length, \"Extraction failed. Malformed contextMessage\");\n        endIndex = index;\n        if (endIndex == startIndex) {\n            revert(\"Extraction failed. Empty contextMessage value\");\n        }\n        valueIndices[2 * valuesFound] = startIndex;\n        valueIndices[2 * valuesFound + 1] = endIndex;\n        valuesFound++;\n        index += 2; // move past the closing quote and comma\n\n        for (uint i = 0; i < EXTRACTED_PARAMETERS_BYTES.length; i++) {\n            require(\n                dataBytes[index + i] == EXTRACTED_PARAMETERS_BYTES[i],\n                \"Extraction failed. Malformed extractedParameters\"\n            );\n        }\n        index += EXTRACTED_PARAMETERS_BYTES.length;\n        isValue = false; // starts with a key right after '{\\\"extractedParameters\\\":{\\\"'\n\n        while (index < dataBytes.length) {\n            // Keep incrementing until '\"', escaped quotes are not considered\n            if (!(dataBytes[index] == '\"' && dataBytes[index - 1] != \"\\\\\")) {\n                index++;\n                continue;\n            }\n            if (!isValue) {\n                // \\\":\\\" (3 chars)\n                require(\n                    dataBytes[index + 1] == \":\" && dataBytes[index + 2] == '\"',\n                    \"Extraction failed. Malformed data 1\"\n                );\n                index += 3; // move it after \\\"\n                isValue = true;\n                // Mark start\n                valueIndices[2 * valuesFound] = index; // start index\n            } else {\n                // \\\",\\\" (3 chars) or \\\"}, (3 chars)\n                // \\\"}} is not supported, there should always be a providerHash\n                bool commaThenQuote = (dataBytes[index + 1] == \",\" && dataBytes[index + 2] == '\"');\n                bool braceThenComma = (dataBytes[index + 1] == '}' && dataBytes[index + 2] == \",\");\n                require(\n                    commaThenQuote || braceThenComma,\n                    \"Extraction failed. Malformed data 2\"\n                );\n                valueIndices[2 * valuesFound + 1] = index; // end index\n                valuesFound++;\n\n                // Revert if valuesFound == maxValues and next char is a comma as there will be more values\n                if (commaThenQuote) {\n                    // Revert if valuesFound == maxValues and next char is a comma as there will be more values\n                    require(valuesFound != maxValues, \"Extraction failed. Exceeded max values\");\n                    index += 3;\n                    isValue = false;\n                } else { // index + 1 = \"}\"\n                    index += 3;\n                    break; // end of extractedParameters\n                }\n            }\n        }\n\n        if (extractIntentAndProviderHash) {\n            for (uint i = 0; i < PROVIDER_HASH_PARAM_BYTES.length; i++) {\n                require(\n                    dataBytes[index + i] == PROVIDER_HASH_PARAM_BYTES[i],\n                    \"Extraction failed. Malformed providerHash\"\n                );\n            }\n            index += PROVIDER_HASH_PARAM_BYTES.length;\n\n            // final indices tuple in valueIndices will be for star and end indices of provider hash\n            valueIndices[2 * valuesFound] = index;\n            // Keep incrementing until '\"'\n            while (index < dataBytes.length && dataBytes[index] != '\"') {\n                index++;\n            }\n            valueIndices[2 * valuesFound + 1] = index;\n            valuesFound++;\n        }\n\n        string[] memory values = new string[](valuesFound);\n        for (uint i = 0; i < valuesFound; i++) {\n            startIndex = valueIndices[2 * i];\n            endIndex = valueIndices[2 * i + 1];\n            bytes memory contextValue = new bytes(endIndex - startIndex);\n            for (uint j = startIndex; j < endIndex; j++) {\n                contextValue[j - startIndex] = dataBytes[j];\n            }\n            values[i] = string(contextValue);\n        }\n        return values;\n    }\n}\n"
    },
    "contracts/lib/DateParsing.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { DateTime } from \"../external/DateTime.sol\";\n\nimport { StringConversionUtils } from \"./StringConversionUtils.sol\";\n\npragma solidity ^0.8.18;\n\nlibrary DateParsing {\n    \n    using StringConversionUtils for string;\n\n    /**\n     * @notice Iterates through every character in the date string and splits the string at each dash, \"T\", or colon. Function will revert\n     * if there are not 6 substrings formed from the split. The substrings are then converted to uints and passed to the DateTime lib\n     * to get the unix timestamp. This function is SPECIFIC TO THE DATE FORMAT YYYY-MM-DDTHH:MM:SS or YYYY-MM-DDTHH:MM:SS.SSSZ, not suitable for \n     * use with other date formats. It skips the milliseconds and timezone offset, as they are not present in all date strings. It returns UTC \n     * timestamps.\n     *\n     * @param _dateString       Date string to be converted to a UTC timestamp\n     */\n    function _dateStringToTimestamp(string memory _dateString) internal pure returns (uint256 utcTimestamp) {\n        string[6] memory extractedStrings;\n        uint256 breakCounter;\n        uint256 lastBreak;\n        uint256 lastIndex = bytes(_dateString).length;\n        for (uint256 i = 0; i < lastIndex; i++) {\n            if (\n                bytes(_dateString)[i] == 0x2d       // dash (-)\n                || bytes(_dateString)[i] == 0x3a    // colon (:)\n                || bytes(_dateString)[i] == 0x54    // T\n                || bytes(_dateString)[i] == 0x20    // space\n            ) {\n                extractedStrings[breakCounter] = _dateString.substring(lastBreak, i);\n                lastBreak = i + 1;\n                breakCounter++;\n            }\n\n            if (bytes(_dateString)[i] == 0x2e) {    // dot (.)\n                lastIndex = i;\n                break;\n            }\n        }\n        // Add last substring to array\n        extractedStrings[breakCounter] = _dateString.substring(lastBreak, lastIndex);\n\n        // Check that exactly 6 substrings were found (string is split at 5 different places)\n        require(breakCounter == 5, \"Invalid date string\");\n\n        utcTimestamp = DateTime.timestampFromDateTime(\n            extractedStrings[0].stringToUint(0),    // year\n            extractedStrings[1].stringToUint(0),    // month\n            extractedStrings[2].stringToUint(0),    // day\n            extractedStrings[3].stringToUint(0),    // hour\n            extractedStrings[4].stringToUint(0),    // minute\n            extractedStrings[5].stringToUint(0)     // second\n        );\n    }\n}"
    },
    "contracts/lib/StringConversionUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\n// Building on zk-email's StringUtils library we add the ability to handle decimals when\n// converting from string to Uint\nlibrary StringConversionUtils {\n    \n    /**\n     * @notice Function that parses numbers returned as strings including floating point numbers. Returned floating point\n     * numbers are to have the desired amount of decimal specified. If the stringified version of the floating point\n     * number has more decimal places than desired then the function will revert in order to be maximally safe. If\n     * the returned number has multiple floating points then the function will revert.\n     *\n     * Examples: _s = \"12.34\", _expectedDecimals = 6 => 12340000\n     *           _s = \"12.34\", _expectedDecimals = 2 => 1234\n     *           _s = \"12.34\", _expectedDecimals = 1 => REVERT (we never want loss of precision only addition)\n     *           _s = \"12.34.56\", _expectedDecimals = 6 => REVERT (Invalid number)\n     *\n     * @param _s                    String being processed\n     * @param _desiredDecimals      Desired amount of decimal places\n     */\n    function stringToUint(string memory _s, uint256 _desiredDecimals) internal pure returns (uint256) {\n        return stringToUint(_s, 0x2E, _desiredDecimals);\n    }\n\n    function stringToUint(\n        string memory _s,\n        bytes1 _decimalCharacter,\n        uint256 _desiredDecimals\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        bytes memory b = bytes(_s);\n\n        uint256 result = 0;\n        uint256 decimalPlaces = 0;\n\n        bool decimals = false;\n        for (uint256 i = 0; i < b.length; i++) {\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\n            }\n\n            if (decimals) {\n                decimalPlaces++;\n            }\n\n            if (b[i] == _decimalCharacter) {\n                require(decimals == false, \"String has multiple decimals\");\n                decimals = true;\n            }\n        }\n\n        require(decimalPlaces <= _desiredDecimals, \"String has too many decimal places\");\n        return result * (10 ** (_desiredDecimals - decimalPlaces));\n    }\n\n    /**\n     * @notice Function that returns a substring from _startIndex to _endIndex (non-inclusive).\n     *\n     * @param _str           String being processed\n     * @param _startIndex    Index to start parsing from\n     * @param _endIndex      Index to stop parsing at (index not included in result)\n     */\n    function substring(string memory _str, uint _startIndex, uint _endIndex) internal pure returns (string memory ) {\n        bytes memory strBytes = bytes(_str);\n        bytes memory result = new bytes(_endIndex-_startIndex);\n        for(uint i = _startIndex; i < _endIndex; i++) {\n            result[i-_startIndex] = strBytes[i];\n        }\n        return string(result);\n    }\n\n    function stringComparison(string memory _a, string memory _b) internal pure returns (bool) {\n        return (keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b)));\n    }\n}\n"
    },
    "contracts/mocks/ClaimVerifierMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { ClaimVerifier } from \"../lib/ClaimVerifier.sol\";\n\npragma solidity ^0.8.18;\n\ncontract ClaimVerifierMock {\n   \n    function findSubstringEndIndex(string memory data, string memory target) public pure returns (uint256) {\n        return ClaimVerifier.findSubstringEndIndex(data, target);\n    }\n\n    function extractFieldFromContext(string memory data, string memory prefix) public pure returns (string memory) {\n        return ClaimVerifier.extractFieldFromContext(data, prefix);\n    }\n\n    function extractAllFromContext(string memory data, uint8 maxValues, bool extractIntentAndProviderHash) public pure returns (string[] memory) {\n        return ClaimVerifier.extractAllFromContext(data, maxValues, extractIntentAndProviderHash);\n    }\n}"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\npragma solidity ^0.8.18;\n\ncontract ERC20Mock is ERC20 {\n\n    constructor(\n        uint256 _mintAmount,\n        string memory name,\n        string memory symbol\n    )\n        ERC20(name, symbol)\n    {\n        _mint(msg.sender, _mintAmount);\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return 18;\n    }\n}\n"
    },
    "contracts/mocks/OrchestratorMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport { IEscrow } from \"../interfaces/IEscrow.sol\";\n\n/**\n * @title OrchestratorMock\n * @notice Mock orchestrator contract for testing escrow orchestrator-only functions\n */\ncontract OrchestratorMock {\n    \n    IEscrow public escrow;\n    bytes32[] public lastPrunedIntents;\n    \n    // Events for testing\n    event IntentsPruned(bytes32[] intents);\n    \n    constructor(address _escrow) {\n        escrow = IEscrow(_escrow);\n    }\n    \n    /**\n     * @notice Implementation of pruneIntents required by IOrchestrator\n     * @param _intents Array of intent hashes to prune\n     */\n    function pruneIntents(bytes32[] memory _intents) external {\n        lastPrunedIntents = _intents;\n        emit IntentsPruned(_intents);\n    }\n    \n    // Test helper functions to call orchestrator-only functions on escrow\n    \n    function lockFunds(\n        uint256 _depositId,\n        bytes32 _intentHash,\n        uint256 _amount\n    ) external {\n        escrow.lockFunds(_depositId, _intentHash, _amount);\n    }\n    \n    function unlockFunds(uint256 _depositId, bytes32 _intentHash) external {\n        escrow.unlockFunds(_depositId, _intentHash);\n    }\n    \n    function unlockAndTransferFunds(\n        uint256 _depositId,\n        bytes32 _intentHash,\n        uint256 _transferAmount,\n        address _to\n    ) external {\n        escrow.unlockAndTransferFunds(_depositId, _intentHash, _transferAmount, _to);\n    }\n    \n    // Getter for testing\n    function getLastPrunedIntents() external view returns (bytes32[] memory) {\n        return lastPrunedIntents;\n    }\n}"
    },
    "contracts/mocks/PaymentVerifierMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IPaymentVerifier } from \"../verifiers/interfaces/IPaymentVerifier.sol\";\nimport { INullifierRegistry } from \"../interfaces/INullifierRegistry.sol\";\nimport { StringConversionUtils } from \"../lib/StringConversionUtils.sol\";\n\nimport { BasePaymentVerifier } from \"../verifiers/BaseVerifiers/BasePaymentVerifier.sol\";\n\npragma solidity ^0.8.18;\n\n\ncontract PaymentVerifierMock is IPaymentVerifier, BasePaymentVerifier {\n\n    using StringConversionUtils for string;\n\n    struct PaymentDetails {\n        uint256 amount;\n        uint256 timestamp;\n        string offRamperId;\n        bytes32 fiatCurrency;\n        bytes32 intentHash;\n    }\n\n    uint256 internal constant PRECISE_UNIT = 1e18;\n\n    /* ============ State Variables ============ */\n    bool public shouldVerifyPayment;\n    bool public shouldReturnFalse;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _escrow,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies\n    ) BasePaymentVerifier(_escrow, _nullifierRegistry, _timestampBuffer, _currencies) {}\n\n    /* ============ External Functions ============ */\n\n    function setShouldVerifyPayment(bool _shouldVerifyPayment) external {\n        shouldVerifyPayment = _shouldVerifyPayment;\n    }\n\n    function setShouldReturnFalse(bool _shouldReturnFalse) external {\n        shouldReturnFalse = _shouldReturnFalse;\n    }\n\n    function extractIntentHash(bytes calldata _proof) external pure returns (bytes32) {\n        (\n            ,\n            ,\n            ,\n            bytes32 intentHash\n        ) = abi.decode(_proof, (uint256, uint256, bytes32, bytes32));\n\n        return intentHash;\n    }\n\n\n    function verifyPayment(\n        IPaymentVerifier.VerifyPaymentData calldata _verifyPaymentData\n    )\n        external\n        view \n        override\n        returns (PaymentVerificationResult memory)\n    {\n        PaymentDetails memory paymentDetails = _extractPaymentDetails(_verifyPaymentData.paymentProof);\n\n        if (shouldVerifyPayment) {\n            require(paymentDetails.timestamp >= _verifyPaymentData.intentTimestamp, \"Payment timestamp is before intent timestamp\");\n            require(paymentDetails.amount >= 0, \"Payment amount cannot be zero\");\n            require(paymentDetails.offRamperId.stringComparison(_verifyPaymentData.payeeDetails), \"Payment offramper does not match intent relayer\");\n            require(paymentDetails.fiatCurrency == _verifyPaymentData.fiatCurrency, \"Payment fiat currency does not match intent fiat currency\");\n        }\n        \n        if (shouldReturnFalse) {\n            return PaymentVerificationResult({\n                success: false,\n                intentHash: bytes32(0),\n                releaseAmount: 0,\n                paymentCurrency: bytes32(0),\n                paymentId: \"\"\n            });\n        }\n\n        // Calculate release amount based on payment amount and conversion rate\n        uint256 releaseAmount = (paymentDetails.amount * PRECISE_UNIT) / _verifyPaymentData.conversionRate;\n        \n        // Cap release amount at intent amount\n        if (releaseAmount > _verifyPaymentData.intentAmount) {\n            releaseAmount = _verifyPaymentData.intentAmount;\n        }\n\n        return PaymentVerificationResult({\n            success: true,\n            intentHash: paymentDetails.intentHash,\n            releaseAmount: releaseAmount,\n            paymentCurrency: paymentDetails.fiatCurrency,\n            paymentId: \"1234abcd\"\n        });\n    }\n\n    function _extractPaymentDetails(bytes calldata _proof) internal pure returns (PaymentDetails memory) {\n        (\n            uint256 amount,\n            uint256 timestamp,\n            string memory offRamperId,\n            bytes32 fiatCurrency,\n            bytes32 intentHash\n        ) = abi.decode(_proof, (uint256, uint256, string, bytes32, bytes32));\n\n        return PaymentDetails(amount, timestamp, offRamperId, fiatCurrency, intentHash);\n    }\n}\n"
    },
    "contracts/mocks/PostIntentHookMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IPostIntentHook } from \"../interfaces/IPostIntentHook.sol\";\nimport { IOrchestrator } from \"../interfaces/IOrchestrator.sol\";\n\n/**\n * @title PostIntentHookMock\n * @notice Mock implementation of IPostIntentHook that transfers funds to a target address\n */\ncontract PostIntentHookMock is IPostIntentHook {\n    \n    /* ============ State Variables ============ */\n\n    IERC20 public immutable usdc;\n    address public immutable orchestrator;\n\n    /* ============ Constructor ============ */\n\n    constructor(address _usdc, address _orchestrator) {\n        usdc = IERC20(_usdc);\n        orchestrator = _orchestrator;\n    }\n\n    /**\n     * @notice Executes post-intent action by transferring funds to target address\n     * @param _intent The intent data containing the target address in the data field\n     * @param _amountNetFees Amount of funds to transfer to the target address after fees are deducted\n     */\n    function execute(\n        IOrchestrator.Intent memory _intent,\n        uint256 _amountNetFees,\n        bytes calldata /*_fulfillIntentData*/\n    ) external override {\n        // Decode target address and token from intent data\n        address targetAddress = abi.decode(_intent.data, (address));\n\n        // Check if target address and token are not zero (use this to test failure of post-intent hook)\n        require(targetAddress != address(0), \"Target address cannot be zero\");\n        \n        // Pull usdc from escrow and transfer to target address\n        usdc.transferFrom(orchestrator, targetAddress, _amountNetFees);\n    }\n} "
    },
    "contracts/mocks/StringConversionUtilsMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { StringConversionUtils } from \"../lib/StringConversionUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract StringConversionUtilsMock {\n\n    using StringConversionUtils for string;\n\n    function stringToUint(string memory _s, uint256 _desiredDecimals) public pure returns (uint256) {\n        return _s.stringToUint(_desiredDecimals);\n    }\n\n    function stringToUintDefinedCharacter(\n        string memory _s,\n        bytes1 _decimalCharacter,\n        uint256 _desiredDecimals\n    )\n        public\n        pure\n        returns (uint256)\n    {\n        return _s.stringToUint(_decimalCharacter, _desiredDecimals);\n    }\n\n    function stringComparison(string memory _a, string memory _b) public pure returns (bool) {\n        return _a.stringComparison(_b);\n    }\n}\n"
    },
    "contracts/mocks/USDCMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\npragma solidity ^0.8.18;\n\ncontract USDCMock is ERC20 {\n\n    constructor(\n        uint256 _mintAmount,\n        string memory name,\n        string memory symbol\n    )\n        ERC20(name, symbol)\n    {\n        _mint(msg.sender, _mintAmount);\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/Orchestrator.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Pausable } from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport { SignatureChecker } from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport { AddressArrayUtils } from \"./external/AddressArrayUtils.sol\";\nimport { Bytes32ArrayUtils } from \"./external/Bytes32ArrayUtils.sol\";\n\nimport { IOrchestrator } from \"./interfaces/IOrchestrator.sol\";\nimport { IEscrow } from \"./interfaces/IEscrow.sol\";\nimport { IEscrowRegistry } from \"./interfaces/IEscrowRegistry.sol\";\nimport { IPostIntentHook } from \"./interfaces/IPostIntentHook.sol\";\nimport { IBasePaymentVerifier } from \"./verifiers/interfaces/IBasePaymentVerifier.sol\";\nimport { IPaymentVerifier } from \"./verifiers/interfaces/IPaymentVerifier.sol\";\nimport { IPaymentVerifierRegistry } from \"./interfaces/IPaymentVerifierRegistry.sol\";\nimport { IPostIntentHookRegistry } from \"./interfaces/IPostIntentHookRegistry.sol\";\nimport { IRelayerRegistry } from \"./interfaces/IRelayerRegistry.sol\";\n\n/**\n * @title Orchestrator\n * @notice Orchestrator contract for the ZKP2P protocol. This contract is responsible for managing the intent (order) \n * lifecycle and orchestrating the P2P trading of fiat currency and onchain assets.\n */\ncontract Orchestrator is Ownable, Pausable, ReentrancyGuard, IOrchestrator {\n\n    using AddressArrayUtils for address[];\n    using Bytes32ArrayUtils for bytes32[];\n    using ECDSA for bytes32;\n    using SignatureChecker for address;\n\n\n    /* ============ Constants ============ */\n    uint256 internal constant PRECISE_UNIT = 1e18;\n    uint256 constant CIRCOM_PRIME_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant MAX_REFERRER_FEE = 5e16;      // 5% max referrer fee\n    uint256 constant MAX_PROTOCOL_FEE = 5e16;      // 5% max protocol fee\n    uint256 constant MIN_PARTIAL_MANUAL_RELEASE_DELAY = 15 minutes;\n\n    /* ============ State Variables ============ */\n\n    uint256 immutable public chainId;              // chainId of the chain the orchestrator is deployed on\n\n    mapping(bytes32 => Intent) internal intents;                       // Mapping of intentHashes to intent structs\n    mapping(address => bytes32[]) internal accountIntents;             // Mapping of address to array of intentHashes\n\n    // Contract references\n    IEscrowRegistry public escrowRegistry;                              // Registry of escrow contracts\n    IPaymentVerifierRegistry public  paymentVerifierRegistry;          // Registry of payment verifiers\n    IPostIntentHookRegistry public postIntentHookRegistry;             // Registry of post intent hooks\n    IRelayerRegistry public relayerRegistry;                           // Registry of relayers\n\n    // Protocol fee configuration\n    uint256 public protocolFee;                                     // Protocol fee taken from taker (in preciseUnits, 1e16 = 1%)\n    address public protocolFeeRecipient;                            // Address that receives protocol fees\n\n    bool public allowMultipleIntents;                               // Whether to allow multiple intents per account\n\n    uint256 public intentCounter;                                 // Counter for number of intents created; nonce for unique intent hashes\n    \n    uint256 public partialManualReleaseDelay;                      // Time after intent creation before partial manual releases are allowed\n\n    /* ============ Modifiers ============ */\n\n    modifier onlyWhitelistedEscrow() {\n        if (!escrowRegistry.isWhitelistedEscrow(msg.sender) && !escrowRegistry.isAcceptingAllEscrows()) {\n            revert UnauthorizedEscrowCaller(msg.sender);\n        }\n        _;\n    }\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _owner,\n        uint256 _chainId,\n        address _escrowRegistry,\n        address _paymentVerifierRegistry,\n        address _postIntentHookRegistry,\n        address _relayerRegistry,\n        uint256 _protocolFee,\n        address _protocolFeeRecipient,\n        uint256 _partialManualReleaseDelay\n    )\n        Ownable()\n    {\n        chainId = _chainId;\n        escrowRegistry = IEscrowRegistry(_escrowRegistry);\n        paymentVerifierRegistry = IPaymentVerifierRegistry(_paymentVerifierRegistry);\n        postIntentHookRegistry = IPostIntentHookRegistry(_postIntentHookRegistry);\n        relayerRegistry = IRelayerRegistry(_relayerRegistry);\n        protocolFee = _protocolFee;\n        protocolFeeRecipient = _protocolFeeRecipient;\n        partialManualReleaseDelay = _partialManualReleaseDelay;\n\n        transferOwnership(_owner);\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Signals intent to pay the depositor defined in the _depositId the _amount * deposit conversionRate off-chain\n     * in order to unlock _amount of funds on-chain. Caller must provide a signature from the deposit's gating service to prove\n     * their eligibility to take liquidity. If there are prunable intents then they will be deleted from the deposit to be able \n     * to maintain state hygiene. Locks liquidity for the corresponding deposit on the escrow contract.\n     *\n     * @param _params                   Struct containing all the intent parameters\n     */\n    function signalIntent(SignalIntentParams calldata _params)\n        external\n        whenNotPaused\n    {\n        // Checks\n        _validateSignalIntent(_params);\n\n        // Effects\n        bytes32 intentHash = _calculateIntentHash();\n\n        IEscrow(_params.escrow).lockFunds(_params.depositId, intentHash, _params.amount);\n\n        intents[intentHash] = Intent({\n            owner: msg.sender,\n            to: _params.to,\n            escrow: _params.escrow,\n            depositId: _params.depositId,\n            amount: _params.amount,\n            paymentVerifier: _params.verifier,\n            fiatCurrency: _params.fiatCurrency,\n            conversionRate: _params.conversionRate,\n            timestamp: block.timestamp,\n            referrer: _params.referrer,\n            referrerFee: _params.referrerFee,\n            postIntentHook: _params.postIntentHook,\n            data: _params.data\n        });\n\n        accountIntents[msg.sender].push(intentHash);\n        intentCounter++;\n\n        emit IntentSignaled(\n            intentHash, \n            _params.escrow,\n            _params.depositId, \n            _params.verifier, \n            msg.sender, \n            _params.to, \n            _params.amount, \n            _params.fiatCurrency, \n            _params.conversionRate, \n            block.timestamp\n        );\n    }\n\n    /**\n     * @notice Only callable by the originator of the intent. Cancels an outstanding intent. Unlocks liquidity\n     * for the corresponding deposit on the escrow contract.\n     *\n     * @param _intentHash    Hash of intent being cancelled\n     */\n    function cancelIntent(bytes32 _intentHash) external {\n        Intent memory intent = intents[_intentHash];\n        \n        if (intent.timestamp == 0) revert IntentNotFound(_intentHash);\n        if (intent.owner != msg.sender) revert UnauthorizedCaller(msg.sender, intent.owner);\n\n        _pruneIntent(_intentHash);\n\n        IEscrow(intent.escrow).unlockFunds(intent.depositId, _intentHash);\n    }\n\n    /**\n     * @notice Anyone can submit a fulfill intent transaction, even if caller isn't the intent owner. Upon submission the\n     * offchain payment proof is verified, payment details are validated, intent is removed, and escrow state is updated. \n     * Deposit token is transferred to the intent.to address.\n     * @dev This function adds a reentrancy guard as it's calling the post intent hook contract which itself might call \n     * malicious contracts.\n     *\n     * @param _params               Struct containing all the fulfill intent parameters\n     */\n    function fulfillIntent(FulfillIntentParams calldata _params) external nonReentrant whenNotPaused {\n        // Checks\n        Intent memory intent = intents[_params.intentHash];\n        if (intent.paymentVerifier == address(0)) revert IntentNotFound(_params.intentHash);\n        \n        IEscrow.Deposit memory deposit = IEscrow(intent.escrow).getDeposit(intent.depositId);\n        IEscrow.DepositVerifierData memory depositData = IEscrow(intent.escrow).getDepositVerifierData(\n            intent.depositId, intent.paymentVerifier\n        );\n        \n        IPaymentVerifier.PaymentVerificationResult memory verificationResult = IPaymentVerifier(intent.paymentVerifier).verifyPayment(\n            IPaymentVerifier.VerifyPaymentData({\n                paymentProof: _params.paymentProof,\n                depositToken: address(deposit.token),\n                intentAmount: intent.amount,\n                intentTimestamp: intent.timestamp,\n                payeeDetails: depositData.payeeDetails,\n                fiatCurrency: intent.fiatCurrency,\n                conversionRate: intent.conversionRate,\n                depositData: depositData.data,\n                data: _params.verificationData\n            })\n        );\n        if (!verificationResult.success) revert PaymentVerificationFailed();\n        if (verificationResult.intentHash != _params.intentHash) revert HashMismatch(_params.intentHash, verificationResult.intentHash);\n\n        // Effects\n        _pruneIntent(_params.intentHash);\n\n        // Interactions\n        IEscrow(intent.escrow).unlockAndTransferFunds(intent.depositId, _params.intentHash, verificationResult.releaseAmount, address(this));\n\n        _transferFundsAndExecuteAction(\n            deposit.token, \n            _params.intentHash, \n            intent, \n            verificationResult,\n            _params.postIntentHookData,\n            false\n        );\n    }\n\n    /**\n     * @notice Allows depositor to release funds to the payer in case of a failed fulfill intent or because of some other arrangement\n     * between the two parties. Upon submission we check to make sure the msg.sender is the depositor, the intent is removed, and \n     * escrow state is updated. Deposit token is transferred to the payer.\n     *\n     * @param _intentHash        Hash of intent to resolve by releasing the funds\n     * @param _releaseAmount     Amount of funds to release to the payer\n     * @param _releaseData       Data to be passed to the post intent hook\n     */\n    function releaseFundsToPayer(\n        bytes32 _intentHash, \n        uint256 _releaseAmount, \n        bytes calldata _releaseData\n    ) external {\n        // Checks\n        Intent memory intent = intents[_intentHash];\n        if (intent.owner == address(0)) revert IntentNotFound(_intentHash);\n        if (_releaseAmount > intent.amount) revert AmountExceedsLimit(_releaseAmount, intent.amount);\n\n        IEscrow.Deposit memory deposit = IEscrow(intent.escrow).getDeposit(intent.depositId);\n        if (deposit.depositor != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.depositor);\n\n        // Check if partial releases are allowed based on time elapsed\n        uint256 timeSinceIntent = block.timestamp - intent.timestamp;\n        if (timeSinceIntent < partialManualReleaseDelay && _releaseAmount < intent.amount) {\n            revert PartialReleaseNotAllowedYet(block.timestamp, intent.timestamp + partialManualReleaseDelay);\n        }\n\n        // Effects\n        _pruneIntent(_intentHash);\n\n        // Interactions\n        IEscrow(intent.escrow).unlockAndTransferFunds(intent.depositId, _intentHash, _releaseAmount, address(this));\n\n        // Create a result struct for manual release\n        IPaymentVerifier.PaymentVerificationResult memory manualReleaseResult = IPaymentVerifier.PaymentVerificationResult({\n            success: true,\n            intentHash: _intentHash,\n            releaseAmount: _releaseAmount,\n            paymentCurrency: intent.fiatCurrency,\n            paymentId: \"\"\n        });\n        \n        _transferFundsAndExecuteAction(deposit.token, _intentHash, intent, manualReleaseResult, _releaseData, true);\n    }\n\n    /* ============ Escrow Functions ============ */\n\n    /**\n     * @notice Only the escrow contract can call this function. Called by escrow to prune specific expired intents.\n     * Escrow leads the cleanup process.\n     * \n     * @param _intents   Array of intent hashes to prune\n     */\n    function pruneIntents(bytes32[] calldata _intents) external onlyWhitelistedEscrow {\n        for (uint256 i = 0; i < _intents.length; i++) {\n            bytes32 intentHash = _intents[i];\n            if (intentHash != bytes32(0)) {\n                Intent memory intent = intents[intentHash];\n                if (intent.timestamp != 0) {    // Only prune if intent exists\n                    _pruneIntent(intentHash);\n                }\n            }\n        }\n    }\n\n    /* ============ Governance Functions ============ */\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the escrow registry address.\n     *\n     * @param _escrowRegistry   New escrow registry address\n     */\n    function setEscrowRegistry(address _escrowRegistry) external onlyOwner {\n        if (_escrowRegistry == address(0)) revert ZeroAddress();\n        \n        escrowRegistry = IEscrowRegistry(_escrowRegistry);\n        emit EscrowRegistryUpdated(_escrowRegistry);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the protocol fee. This fee is charged to takers upon a successful\n     * fulfillment of an intent.\n     *\n     * @param _protocolFee   New protocol fee in preciseUnits (1e16 = 1%)\n     */\n    function setProtocolFee(uint256 _protocolFee) external onlyOwner {\n        if (_protocolFee > MAX_PROTOCOL_FEE) revert FeeExceedsMaximum(_protocolFee, MAX_PROTOCOL_FEE);\n        \n        protocolFee = _protocolFee;\n        emit ProtocolFeeUpdated(_protocolFee);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the protocol fee recipient address.\n     *\n     * @param _protocolFeeRecipient   New protocol fee recipient address\n     */\n    function setProtocolFeeRecipient(address _protocolFeeRecipient) external onlyOwner {\n        if (_protocolFeeRecipient == address(0)) revert ZeroAddress();\n        \n        protocolFeeRecipient = _protocolFeeRecipient;\n        emit ProtocolFeeRecipientUpdated(_protocolFeeRecipient);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Sets whether all accounts can signal multiple intents.\n     *\n     * @param _allowMultiple   True to allow all accounts to signal multiple intents, false to restrict to whitelisted relayers only\n     */\n    function setAllowMultipleIntents(bool _allowMultiple) external onlyOwner {\n        allowMultipleIntents = _allowMultiple;\n        \n        emit AllowMultipleIntentsUpdated(_allowMultiple);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the post intent hook registry address.\n     *\n     * @param _postIntentHookRegistry   New post intent hook registry address\n     */\n    function setPostIntentHookRegistry(address _postIntentHookRegistry) external onlyOwner {\n        if (_postIntentHookRegistry == address(0)) revert ZeroAddress();\n        \n        postIntentHookRegistry = IPostIntentHookRegistry(_postIntentHookRegistry);\n        emit PostIntentHookRegistryUpdated(_postIntentHookRegistry);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the relayer registry address.\n     *\n     * @param _relayerRegistry   New relayer registry address\n     */\n    function setRelayerRegistry(address _relayerRegistry) external onlyOwner {\n        if (_relayerRegistry == address(0)) revert ZeroAddress();\n        \n        relayerRegistry = IRelayerRegistry(_relayerRegistry);\n        emit RelayerRegistryUpdated(_relayerRegistry);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the partial manual release delay period.\n     *\n     * @param _partialManualReleaseDelay   New delay period in seconds before partial manual releases are allowed\n     */\n    function setPartialManualReleaseDelay(uint256 _partialManualReleaseDelay) external onlyOwner {\n        if (_partialManualReleaseDelay < MIN_PARTIAL_MANUAL_RELEASE_DELAY) {\n            revert AmountBelowMin(_partialManualReleaseDelay, MIN_PARTIAL_MANUAL_RELEASE_DELAY);\n        }\n\n        partialManualReleaseDelay = _partialManualReleaseDelay;\n        emit PartialManualReleaseDelayUpdated(_partialManualReleaseDelay);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Pauses intent creation and intent fulfillment functionality for the orchestrator.\n     */\n    function pauseOrchestrator() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Restarts paused functionality for the orchestrator.\n     */\n    function unpauseOrchestrator() external onlyOwner {\n        _unpause();\n    }\n\n    /* ============ External View Functions ============ */\n\n    function getIntent(bytes32 _intentHash) external view returns (Intent memory) {\n        return intents[_intentHash];\n    }\n\n    function getAccountIntents(address _account) external view returns (bytes32[] memory) {\n        return accountIntents[_account];\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Validates an intent before it is signaled.\n     */\n    function _validateSignalIntent(SignalIntentParams memory _intent) internal view {\n        // Check if account can have multiple intents\n        bool canHaveMultipleIntents = relayerRegistry.isWhitelistedRelayer(msg.sender) || allowMultipleIntents;\n        if (!canHaveMultipleIntents && accountIntents[msg.sender].length > 0) {\n            revert AccountHasActiveIntent(msg.sender, accountIntents[msg.sender][0]);\n        }\n\n        if (_intent.to == address(0)) revert ZeroAddress();\n        \n        if (_intent.referrerFee > MAX_REFERRER_FEE) revert FeeExceedsMaximum(_intent.referrerFee, MAX_REFERRER_FEE);\n        if (_intent.referrer == address(0)) {\n            if (_intent.referrerFee != 0) revert InvalidReferrerFeeConfiguration();\n        }\n\n        if (address(_intent.postIntentHook) != address(0)) {\n            if (!postIntentHookRegistry.isWhitelistedHook(address(_intent.postIntentHook))) {\n                revert PostIntentHookNotWhitelisted(address(_intent.postIntentHook));\n            }\n        }\n\n        // Validate escrow is whitelisted\n        if (!escrowRegistry.isWhitelistedEscrow(_intent.escrow) && !escrowRegistry.isAcceptingAllEscrows()) {\n            revert EscrowNotWhitelisted(_intent.escrow);\n        }\n\n        IEscrow.DepositVerifierData memory verifierData = IEscrow(_intent.escrow).getDepositVerifierData(\n            _intent.depositId, _intent.verifier\n        );\n        if (bytes(verifierData.payeeDetails).length == 0) revert VerifierNotSupported(_intent.depositId, _intent.verifier);\n        \n        uint256 minConversionRate = IEscrow(_intent.escrow).getDepositCurrencyMinRate(\n            _intent.depositId, _intent.verifier, _intent.fiatCurrency\n        );\n        if (minConversionRate == 0) revert CurrencyNotSupported(_intent.verifier, _intent.fiatCurrency);\n        if (_intent.conversionRate < minConversionRate) revert RateBelowMinimum(_intent.conversionRate, minConversionRate);\n\n        address intentGatingService = verifierData.intentGatingService;\n        if (intentGatingService != address(0)) {\n            // Check if signature has expired\n            if (block.timestamp > _intent.signatureExpiration) {\n                revert SignatureExpired(_intent.signatureExpiration, block.timestamp);\n            }\n\n            if (!_isValidIntentGatingSignature(_intent, intentGatingService)) {\n                revert InvalidSignature();\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates a unique hash for an intent using the orchestrator address and counter.\n     */\n    function _calculateIntentHash() internal view returns (bytes32 intentHash) {\n        // Use orchestrator address + counter for global uniqueness\n        // Mod with circom prime field to make sure it fits in a 254-bit field\n        uint256 intermediateHash = uint256(\n            keccak256(\n                abi.encodePacked(\n                    address(this),    // Include orchestrator address for avoiding collisions when migrating to a new orchestrator\n                    // or when multiple orchestrators are deployed\n                    intentCounter     // unique counter within this orchestrator\n                )\n            ));\n        intentHash = bytes32(intermediateHash % CIRCOM_PRIME_FIELD);\n    }\n\n\n    /**\n     * @notice Deletes an intent from storage mappings.\n     */\n    function _pruneIntent(bytes32 _intentHash) internal {\n        Intent memory intent = intents[_intentHash];\n\n        accountIntents[intent.owner].removeStorage(_intentHash);\n        delete intents[_intentHash];\n\n        emit IntentPruned(_intentHash);\n    }\n\n    /**\n     * @notice Handles fee calculations and transfers, then executes any post-intent hooks\n     */\n    function _transferFundsAndExecuteAction(\n        IERC20 _token, \n        bytes32 _intentHash, \n        Intent memory _intent, \n        IPaymentVerifier.PaymentVerificationResult memory _verificationResult,\n        bytes memory _postIntentHookData,\n        bool _isManualRelease\n    ) internal {\n        \n        uint256 protocolFeeAmount;\n        uint256 referrerFeeAmount; \n\n        // Calculate protocol fee (taken from taker) - based on release amount\n        if (protocolFeeRecipient != address(0) && protocolFee > 0) {\n            protocolFeeAmount = (_verificationResult.releaseAmount * protocolFee) / PRECISE_UNIT;\n        }\n        \n        // Calculate referrer fee (taken from taker) - based on release amount\n        if (_intent.referrer != address(0) && _intent.referrerFee > 0) {\n            referrerFeeAmount = (_verificationResult.releaseAmount * _intent.referrerFee) / PRECISE_UNIT;\n        }\n        \n        // Net amount the taker receives after fees\n        uint256 netAmount = _verificationResult.releaseAmount - protocolFeeAmount - referrerFeeAmount;\n        \n        // Transfer protocol fee to recipient\n        if (protocolFeeAmount > 0) {\n            _token.transfer(protocolFeeRecipient, protocolFeeAmount);\n        }\n        \n        // Transfer referrer fee\n        if (referrerFeeAmount > 0) {\n            _token.transfer(_intent.referrer, referrerFeeAmount);\n        }\n\n        // If there's a post-intent hook, handle it; skip if manual release\n        address fundsTransferredTo = _intent.to;\n        if (address(_intent.postIntentHook) != address(0) && !_isManualRelease) {\n            _token.approve(address(_intent.postIntentHook), netAmount);\n            _intent.postIntentHook.execute(_intent, netAmount, _postIntentHookData);\n\n            fundsTransferredTo = address(_intent.postIntentHook);\n        } else {\n            // Otherwise transfer directly to the intent recipient\n            _token.transfer(_intent.to, netAmount);\n        }\n\n        emit IntentFulfilled(\n            _intentHash, \n            fundsTransferredTo, \n            netAmount, \n            _isManualRelease,\n            _verificationResult.paymentCurrency,\n            _verificationResult.paymentId\n        );\n    }\n\n\n    /**\n     * @notice Checks if a intent gating service signature is valid.\n     */\n    function _isValidIntentGatingSignature(\n        SignalIntentParams memory _intent, \n        address _intentGatingService\n    ) \n        internal \n        view \n        returns(bool) \n    {\n        bytes memory message = abi.encodePacked(\n            address(this),\n            _intent.escrow, \n            _intent.depositId, \n            _intent.amount, \n            _intent.to, \n            _intent.verifier, \n            _intent.fiatCurrency, \n            _intent.conversionRate, \n            _intent.signatureExpiration,\n            chainId\n        );\n\n        bytes32 verifierPayload = keccak256(message).toEthSignedMessageHash();\n        return _intentGatingService.isValidSignatureNow(verifierPayload, _intent.gatingServiceSignature);\n    }\n}"
    },
    "contracts/ProtocolViewer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport { IEscrow } from \"./interfaces/IEscrow.sol\";\nimport { IProtocolViewer } from \"./interfaces/IProtocolViewer.sol\";\nimport { IOrchestrator } from \"./interfaces/IOrchestrator.sol\";\n\ncontract ProtocolViewer is IProtocolViewer {\n\n    /* ============ State Variables ============ */\n    IEscrow public immutable escrowContract;\n    IOrchestrator public immutable orchestrator;\n\n    /* ============ Constructor ============ */\n\n    constructor(address _escrow, address _orchestrator) {\n        escrowContract = IEscrow(_escrow);\n        orchestrator = IOrchestrator(_orchestrator);\n    }\n\n    /* ============ View Functions ============ */\n\n    /**\n     * @notice Gets details for a single deposit.\n     * @param _depositId The ID of the deposit.\n     * @return depositView The DepositView struct.\n     */\n    function getDeposit(uint256 _depositId) public view returns (IProtocolViewer.DepositView memory depositView) {\n        IEscrow.Deposit memory deposit = escrowContract.getDeposit(_depositId);\n        ( , uint256 reclaimableAmount) = escrowContract.getExpiredIntents(_depositId);\n        bytes32[] memory intentHashes = escrowContract.getDepositIntentHashes(_depositId);\n\n        VerifierDataView[] memory verifiers = new VerifierDataView[](escrowContract.getDepositVerifiers(_depositId).length);\n        for (uint256 i = 0; i < verifiers.length; ++i) {\n            address verifier = escrowContract.getDepositVerifiers(_depositId)[i];\n            IEscrow.Currency[] memory currencies = new IEscrow.Currency[](escrowContract.getDepositCurrencies(_depositId, verifier).length);\n            for (uint256 j = 0; j < currencies.length; ++j) {\n                bytes32 code = escrowContract.getDepositCurrencies(_depositId, verifier)[j];\n                currencies[j] = IEscrow.Currency({\n                    code: code,\n                    minConversionRate: escrowContract.getDepositCurrencyMinRate(_depositId, verifier, code)\n                });\n            }\n            verifiers[i] = VerifierDataView({\n                verifier: verifier,\n                verificationData: escrowContract.getDepositVerifierData(_depositId, verifier),\n                currencies: currencies\n            });\n        }\n\n        depositView = DepositView({\n            depositId: _depositId,\n            deposit: deposit,\n            availableLiquidity: deposit.remainingDeposits + reclaimableAmount,\n            verifiers: verifiers,\n            intentHashes: intentHashes\n        });\n    }\n\n    /**\n     * @notice Gets deposit details for a list of deposit IDs.\n     * @param _depositIds Array of deposit IDs.\n     * @return depositArray Array of DepositView structs.\n     */\n    function getDepositFromIds(\n        uint256[] memory _depositIds\n    ) external view override returns (IProtocolViewer.DepositView[] memory depositArray) {\n        depositArray = new DepositView[](_depositIds.length);\n\n        for (uint256 i = 0; i < _depositIds.length; ++i) {\n            uint256 depositId = _depositIds[i];\n            depositArray[i] = getDeposit(depositId);\n        }\n    }\n\n    /**\n     * @notice Gets all deposits for a specific account.\n     * @param _account The account address.\n     * @return depositArray Array of DepositView structs.\n     */\n    function getAccountDeposits(address _account) external view returns (IProtocolViewer.DepositView[] memory depositArray) {\n        uint256[] memory accountDepositIds = escrowContract.getAccountDeposits(_account);\n        depositArray = new DepositView[](accountDepositIds.length);\n        \n        for (uint256 i = 0; i < accountDepositIds.length; ++i) {\n            uint256 depositId = accountDepositIds[i];\n            depositArray[i] = getDeposit(depositId);\n        }\n    }\n\n    /**\n     * @notice Gets details for a single intent.\n     * @param _intentHash The hash of the intent.\n     * @return intentView The IntentView struct.\n     */\n    function getIntent(bytes32 _intentHash) public view returns (IProtocolViewer.IntentView memory intentView) {\n        IOrchestrator.Intent memory intent = orchestrator.getIntent(_intentHash);\n        DepositView memory deposit = getDeposit(intent.depositId);\n        intentView = IntentView({\n            intentHash: _intentHash,\n            intent: intent,\n            deposit: deposit\n        });\n    }\n\n    /**\n     * @notice Gets details for a list of intent hashes.\n     * @param _intentHashes Array of intent hashes.\n     * @return intentArray Array of IntentView structs.\n     */\n    function getIntents(bytes32[] calldata _intentHashes) external view returns (IProtocolViewer.IntentView[] memory intentArray) {\n        intentArray = new IntentView[](_intentHashes.length);\n\n        for (uint256 i = 0; i < _intentHashes.length; ++i) {\n            intentArray[i] = getIntent(_intentHashes[i]);\n        }\n    }\n\n    /**\n     * @notice Gets the active intents for a specific account.\n     * @param _account The account address.\n     * @return intentViews Array of IntentView structs.\n     */\n    function getAccountIntents(address _account) external view returns (IProtocolViewer.IntentView[] memory intentViews) {\n        bytes32[] memory intentHashes = orchestrator.getAccountIntents(_account);\n        intentViews = new IntentView[](intentHashes.length);\n        \n        for (uint256 i = 0; i < intentHashes.length; ++i) {\n            intentViews[i] = getIntent(intentHashes[i]);\n        }\n    }\n}\n"
    },
    "contracts/registries/EscrowRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { AddressArrayUtils } from \"../external/AddressArrayUtils.sol\";\nimport { IEscrowRegistry } from \"../interfaces/IEscrowRegistry.sol\";\n\npragma solidity ^0.8.18;\n\ncontract EscrowRegistry is Ownable, IEscrowRegistry {\n\n    using AddressArrayUtils for address[];\n    \n    /* ============ Events ============ */\n    event EscrowAdded(address indexed escrow);\n    event EscrowRemoved(address indexed escrow);\n    event AcceptAllEscrowsUpdated(bool acceptAll);\n\n    /* ============ State Variables ============ */\n    bool public acceptAllEscrows;\n    mapping(address => bool) public isWhitelistedEscrow;\n    address[] public escrows;\n\n    /* ============ Constructor ============ */\n    constructor() Ownable() {}\n    \n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY OWNER: Adds an escrow to the whitelist.\n     *\n     * @param _escrow   The escrow address to add\n     */\n    function addEscrow(address _escrow) external onlyOwner {\n        require(_escrow != address(0), \"Escrow cannot be zero address\");\n        require(!isWhitelistedEscrow[_escrow], \"Escrow already whitelisted\");\n        \n        isWhitelistedEscrow[_escrow] = true;\n        escrows.push(_escrow);\n        \n        emit EscrowAdded(_escrow);\n    }\n\n    /**\n     * ONLY OWNER: Removes an escrow from the whitelist.\n     *\n     * @param _escrow   The escrow address to remove\n     */\n    function removeEscrow(address _escrow) external onlyOwner {\n        require(isWhitelistedEscrow[_escrow], \"Escrow not whitelisted\");\n        \n        isWhitelistedEscrow[_escrow] = false;\n        escrows.removeStorage(_escrow);\n        \n        emit EscrowRemoved(_escrow);\n    }\n\n    /**\n     * ONLY OWNER: Sets whether all escrows can be used without whitelisting.\n     *\n     * @param _acceptAll   True to accept all escrows, false to require whitelisting\n     */\n    function setAcceptAllEscrows(bool _acceptAll) external onlyOwner {\n        acceptAllEscrows = _acceptAll;\n        \n        emit AcceptAllEscrowsUpdated(_acceptAll);\n    }\n\n    /* ============ External View Functions ============ */\n\n    function isAcceptingAllEscrows() external view returns (bool) {\n        return acceptAllEscrows;\n    }\n\n    function getWhitelistedEscrows() external view returns (address[] memory) {\n        return escrows;\n    }\n}"
    },
    "contracts/registries/NullifierRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { AddressArrayUtils } from \"../external/AddressArrayUtils.sol\";\nimport { INullifierRegistry } from \"../interfaces/INullifierRegistry.sol\";\n\npragma solidity ^0.8.18;\n\n\ncontract NullifierRegistry is Ownable, INullifierRegistry {\n\n    using AddressArrayUtils for address[];\n    \n    /* ============ Events ============ */\n    event NullifierAdded(bytes32 nullifier, address indexed writer);\n    event WriterAdded(address writer);\n    event WriterRemoved(address writer);\n\n    /* ============ Modifiers ============ */\n    modifier onlyWriter() {\n        require(isWriter[msg.sender], \"Only addresses with write permissions can call\");\n        _;\n    }\n\n    /* ============ State Variables ============ */\n    mapping(bytes32 => bool) public isNullified;\n    mapping(address => bool) public isWriter;\n    address[] public writers;\n\n    /* ============ Constructor ============ */\n    constructor() Ownable() {}\n    \n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY WRITER: Only addresses with permission to write to this contract can call. Stores a nullifier for an email.\n     *\n     * @param _nullifier    The nullifier to store\n     */\n    function addNullifier(bytes32 _nullifier) external onlyWriter {\n        require(!isNullified[_nullifier], \"Nullifier already exists\");\n\n        isNullified[_nullifier] = true;\n\n        emit NullifierAdded(_nullifier, msg.sender);\n    }\n\n    /* ============ Admin Functions ============ */\n\n    /**\n     * ONLY OWNER: Add address that has write permissions to the registry. Writer must not have been previously added.\n     *\n     * @param _newWriter    The nullifier to store\n     */\n    function addWritePermission(address _newWriter) external onlyOwner {\n        require(!isWriter[_newWriter], \"Address is already a writer\");\n\n        isWriter[_newWriter] = true;\n        writers.push(_newWriter);\n\n        emit WriterAdded(_newWriter);\n    }\n\n    /**\n     * ONLY OWNER: Remove address that has write permissions to the registry. Writer must have been previously added.\n     *\n     * @param _removedWriter    The nullifier to store\n     */\n    function removeWritePermission(address _removedWriter) external onlyOwner {\n        require(isWriter[_removedWriter], \"Address is not a writer\");\n\n        isWriter[_removedWriter] = false;\n        writers.removeStorage(_removedWriter);\n\n        emit WriterRemoved(_removedWriter);\n    }\n\n    /* ============ External View Functions ============ */\n\n    function getWriters() external view returns(address[] memory) {\n       return writers;\n    }\n}\n"
    },
    "contracts/registries/PaymentVerifierRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { AddressArrayUtils } from \"../external/AddressArrayUtils.sol\";\nimport { IPaymentVerifierRegistry } from \"../interfaces/IPaymentVerifierRegistry.sol\";\n\npragma solidity ^0.8.18;\n\ncontract PaymentVerifierRegistry is Ownable, IPaymentVerifierRegistry {\n\n    using AddressArrayUtils for address[];\n    \n    /* ============ Events ============ */\n    event PaymentVerifierAdded(address indexed verifier);\n    event PaymentVerifierRemoved(address indexed verifier);\n    event AcceptAllVerifiersUpdated(bool acceptAll);\n\n    /* ============ State Variables ============ */\n    bool public acceptAllVerifiers;\n    mapping(address => bool) public isWhitelistedVerifier;\n    address[] public verifiers;\n\n    /* ============ Constructor ============ */\n    constructor() Ownable() {}\n    \n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY OWNER: Adds a payment verifier to the whitelist.\n     *\n     * @param _verifier   The payment verifier address to add\n     */\n    function addPaymentVerifier(address _verifier) external onlyOwner {\n        require(_verifier != address(0), \"Payment verifier cannot be zero address\");\n        require(!isWhitelistedVerifier[_verifier], \"Payment verifier already whitelisted\");\n        \n        isWhitelistedVerifier[_verifier] = true;\n        verifiers.push(_verifier);\n        \n        emit PaymentVerifierAdded(_verifier);\n    }\n\n    /**\n     * ONLY OWNER: Removes a payment verifier from the whitelist.\n     *\n     * @param _verifier   The payment verifier address to remove\n     */\n    function removePaymentVerifier(address _verifier) external onlyOwner {\n        require(isWhitelistedVerifier[_verifier], \"Payment verifier not whitelisted\");\n        \n        isWhitelistedVerifier[_verifier] = false;\n        verifiers.removeStorage(_verifier);\n        \n        emit PaymentVerifierRemoved(_verifier);\n    }\n\n    /**\n     * ONLY OWNER: Sets whether all payment verifiers can be used without whitelisting.\n     *\n     * @param _acceptAll   True to accept all payment verifiers, false to require whitelisting\n     */\n    function setAcceptAllVerifiers(bool _acceptAll) external onlyOwner {\n        acceptAllVerifiers = _acceptAll;\n        \n        emit AcceptAllVerifiersUpdated(_acceptAll);\n    }\n\n    /* ============ External View Functions ============ */\n\n    function isAcceptingAllVerifiers() external view returns (bool) {\n        return acceptAllVerifiers;\n    }\n\n    function getWhitelistedVerifiers() external view returns (address[] memory) {\n        return verifiers;\n    }\n} "
    },
    "contracts/registries/PostIntentHookRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { AddressArrayUtils } from \"../external/AddressArrayUtils.sol\";\nimport { IPostIntentHookRegistry } from \"../interfaces/IPostIntentHookRegistry.sol\";\n\npragma solidity ^0.8.18;\n\n\ncontract PostIntentHookRegistry is Ownable, IPostIntentHookRegistry {\n\n    using AddressArrayUtils for address[];\n    \n    /* ============ Events ============ */\n    event PostIntentHookAdded(address indexed hook);\n    event PostIntentHookRemoved(address indexed hook);\n\n    /* ============ State Variables ============ */\n    mapping(address => bool) public whitelistedHooks;\n    address[] public hooks;\n\n    /* ============ Constructor ============ */\n    constructor() Ownable() {}\n    \n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY OWNER: Adds a post intent hook to the whitelist.\n     *\n     * @param _hook   The post intent hook address to add\n     */\n    function addPostIntentHook(address _hook) external onlyOwner {\n        require(_hook != address(0), \"Hook cannot be zero address\");\n        require(!whitelistedHooks[_hook], \"Hook already whitelisted\");\n        \n        whitelistedHooks[_hook] = true;\n        hooks.push(_hook);\n        \n        emit PostIntentHookAdded(_hook);\n    }\n\n    /**\n     * ONLY OWNER: Removes a post intent hook from the whitelist.\n     *\n     * @param _hook   The post intent hook address to remove\n     */\n    function removePostIntentHook(address _hook) external onlyOwner {\n        require(whitelistedHooks[_hook], \"Hook not whitelisted\");\n        \n        whitelistedHooks[_hook] = false;\n        hooks.removeStorage(_hook);\n        \n        emit PostIntentHookRemoved(_hook);\n    }\n\n    /* ============ External View Functions ============ */\n\n    function isWhitelistedHook(address _hook) external view returns (bool) {\n        return whitelistedHooks[_hook];\n    }\n\n    function getWhitelistedHooks() external view returns (address[] memory) {\n        return hooks;\n    }\n} "
    },
    "contracts/registries/RelayerRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { AddressArrayUtils } from \"../external/AddressArrayUtils.sol\";\nimport { IRelayerRegistry } from \"../interfaces/IRelayerRegistry.sol\";\n\npragma solidity ^0.8.18;\n\ncontract RelayerRegistry is Ownable, IRelayerRegistry {\n\n    using AddressArrayUtils for address[];\n    \n    /* ============ Events ============ */\n    event RelayerAdded(address indexed relayer);\n    event RelayerRemoved(address indexed relayer);\n    \n\n    /* ============ State Variables ============ */\n    mapping(address => bool) public isWhitelistedRelayer;\n    address[] public relayers;\n\n    /* ============ Constructor ============ */\n    constructor() Ownable() {}\n    \n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY OWNER: Adds a relayer to the whitelist.\n     *\n     * @param _relayer   The relayer address to add\n     */\n    function addRelayer(address _relayer) external onlyOwner {\n        require(_relayer != address(0), \"Relayer cannot be zero address\");\n        require(!isWhitelistedRelayer[_relayer], \"Relayer already whitelisted\");\n        \n        isWhitelistedRelayer[_relayer] = true;\n        relayers.push(_relayer);\n        \n        emit RelayerAdded(_relayer);\n    }\n\n    /**\n     * ONLY OWNER: Removes a relayer from the whitelist.\n     *\n     * @param _relayer   The relayer address to remove\n     */\n    function removeRelayer(address _relayer) external onlyOwner {\n        require(isWhitelistedRelayer[_relayer], \"Relayer not whitelisted\");\n        \n        isWhitelistedRelayer[_relayer] = false;\n        relayers.removeStorage(_relayer);\n        \n        emit RelayerRemoved(_relayer);\n    }\n\n\n\n    /* ============ External View Functions ============ */\n\n    function getWhitelistedRelayers() external view returns (address[] memory) {\n        return relayers;\n    }\n} "
    },
    "contracts/verifiers/BaseVerifiers/BasePaymentVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { Bytes32ArrayUtils } from \"../../external/Bytes32ArrayUtils.sol\";\nimport { INullifierRegistry } from \"../../interfaces/INullifierRegistry.sol\";\nimport { IBasePaymentVerifier } from \"../interfaces/IBasePaymentVerifier.sol\";\n\npragma solidity ^0.8.18;\n\ncontract BasePaymentVerifier is Ownable, IBasePaymentVerifier {\n\n    using Bytes32ArrayUtils for bytes32[];\n\n    /* ============ Events ============ */\n    event TimestampBufferSet(uint256 timestampBuffer);\n    event CurrencyAdded(bytes32 currencyCode);\n    event CurrencyRemoved(bytes32 currencyCode);\n    \n    /* ============ State Variables ============ */\n    address public immutable escrow;\n    INullifierRegistry public nullifierRegistry;\n    \n    uint256 public timestampBuffer;\n\n    bytes32[] internal currencies;\n    mapping(bytes32 => bool) public isCurrency;\n    \n    /* ============ Constructor ============ */\n    constructor(\n        address _escrow,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies\n    )\n        Ownable()\n    {\n        escrow = _escrow;\n        nullifierRegistry = _nullifierRegistry;\n        timestampBuffer = _timestampBuffer;\n\n        for (uint256 i = 0; i < _currencies.length; i++) {\n            addCurrency(_currencies[i]);\n        }\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice OWNER ONLY: Adds a currency code to supported currencies\n     * @param _currencyCode Currency code to add\n     */\n    function addCurrency(bytes32 _currencyCode) public onlyOwner {\n        require(!isCurrency[_currencyCode], \"Currency already added\");\n        \n        currencies.push(_currencyCode);\n        isCurrency[_currencyCode] = true;\n        \n        emit CurrencyAdded(_currencyCode);\n    }\n\n    /**\n     * @notice OWNER ONLY: Removes a currency code from supported currencies\n     * @param _currencyCode Currency code to remove\n     */\n    function removeCurrency(bytes32 _currencyCode) external onlyOwner {\n        require(isCurrency[_currencyCode], \"Currency not added\");\n        \n        currencies.removeStorage(_currencyCode);\n        isCurrency[_currencyCode] = false;\n        \n        emit CurrencyRemoved(_currencyCode);\n    }\n\n    /**\n     * @notice OWNER ONLY: Sets the timestamp buffer for payments. This is the amount of time in seconds\n     * that the timestamp can be off by and still be considered valid. Necessary to build in flexibility \n     * with L2 timestamps.\n     *\n     * @param _timestampBuffer    The timestamp buffer for payments\n     */\n    function setTimestampBuffer(uint256 _timestampBuffer) external onlyOwner {\n        timestampBuffer = _timestampBuffer;\n        emit TimestampBufferSet(_timestampBuffer);\n    }\n\n    /* ============ External View Functions ============ */\n\n    function getCurrencies() external view returns (bytes32[] memory) {\n        return currencies;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\n        require(!nullifierRegistry.isNullified(_nullifier), \"Nullifier has already been used\");\n        nullifierRegistry.addNullifier(_nullifier);\n    }\n}\n"
    },
    "contracts/verifiers/BaseVerifiers/BaseReclaimPaymentVerifier.sol": {
      "content": "//SPDX-License-Identifier: MIT\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { AddressArrayUtils } from \"../../external/AddressArrayUtils.sol\";\nimport { Claims } from \"../../external/Claims.sol\";\nimport { StringArrayUtils } from \"../../external/StringArrayUtils.sol\";\n\nimport { ClaimVerifier } from \"../../lib/ClaimVerifier.sol\";\nimport { INullifierRegistry } from \"../../interfaces/INullifierRegistry.sol\";\nimport { IReclaimVerifier } from \"../interfaces/IReclaimVerifier.sol\";\n\nimport { BasePaymentVerifier } from \"../BaseVerifiers/BasePaymentVerifier.sol\";\n\npragma solidity ^0.8.18;\n\ncontract BaseReclaimPaymentVerifier is IReclaimVerifier, BasePaymentVerifier {\n\n    using AddressArrayUtils for address[];\n    using StringArrayUtils for string[];\n\n    /* ============ Constants ============ */\n\n    uint256 internal constant PRECISE_UNIT = 1e18;\n\n    /* ============ State Variables ============ */\n    mapping(string => bool) public isProviderHash;\n    string[] public providerHashes;                         // Set of provider hashes that these proofs should be for\n\n    /* ============ Events ============ */\n    event ProviderHashAdded(string providerHash);\n    event ProviderHashRemoved(string providerHash);\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _ramp,\n        INullifierRegistry _nulliferRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies,\n        string[] memory _providerHashes\n    )\n        BasePaymentVerifier(\n            _ramp,\n            _nulliferRegistry,\n            _timestampBuffer,\n            _currencies\n        )\n    {\n        for (uint256 i = 0; i < _providerHashes.length; i++) {\n            require(!isProviderHash[_providerHashes[i]], \"Provider hash already added\");\n            isProviderHash[_providerHashes[i]] = true;\n            providerHashes.push(_providerHashes[i]);\n\n            emit ProviderHashAdded(_providerHashes[i]);\n        }\n    }\n\n    /* ============ Admin Functions ============ */\n\n    /**\n     * ONLY OWNER: Add provider hash string. Provider hash must not have been previously added.\n     *\n     * @param _newProviderHash    New provider hash to be added\n     */\n    function addProviderHash(string memory _newProviderHash) external onlyOwner {\n        require(!isProviderHash[_newProviderHash], \"Provider hash already added\");\n\n        isProviderHash[_newProviderHash] = true;\n        providerHashes.push(_newProviderHash);\n\n        emit ProviderHashAdded(_newProviderHash);\n    }\n\n    /**\n     * ONLY OWNER: Remove provider hash string. Provider hash must have been previously added.\n     *\n     * @param _removeProviderHash    Provider hash to be removed\n     */\n    function removeProviderHash(string memory _removeProviderHash) external onlyOwner {\n        require(isProviderHash[_removeProviderHash], \"Provider hash not found\");\n\n        delete isProviderHash[_removeProviderHash];\n        providerHashes.removeStorage(_removeProviderHash);\n\n        emit ProviderHashRemoved(_removeProviderHash);\n    }\n\n    /* ============ Public Functions ============ */\n    \n    /**\n     * Verify proof generated by witnesses. Claim is constructed by hashing claimInfo (provider, context, parameters)\n     * to get the identifier. And then signing on (identifier, owner, timestamp, epoch) to get claim signature. \n     * This function verifies a claim by performing the following checks on the claim\n     * - Calculates the hash of the claimInfo and checks if it matches the identifier in the claim\n     * - Checks if the signatures are valid and from the witnesses\n     * This function reverts if\n     * - No signatures are found on the proof\n     * - ClaimInfo hash does not match the identifier in the claim\n     * - Signatures are invalid (not from the witnesses)\n     * \n     * DEV NOTE: This function does NOT validate that the claim provider hash is valid. That is the \n     * responsibility of the caller. Ensure witnesses are unique otherwise the threshold can be met \n     * with duplicate witnesses.\n     * \n     * Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code\n     *    \n     * @param proof                 Proof to be verified\n     * @param _witnesses            List of accepted witnesses\n     * @param _requiredThreshold    Minimum number of signatures required from accepted witnesses\n     */\n    function verifyProofSignatures(\n        ReclaimProof memory proof, \n        address[] memory _witnesses,\n        uint256 _requiredThreshold\n    ) public pure returns (bool) {\n\n        require(_requiredThreshold > 0, \"Required threshold must be greater than 0\");\n        require(_requiredThreshold <= _witnesses.length, \"Required threshold must be less than or equal to number of witnesses\");\n        require(proof.signedClaim.signatures.length > 0, \"No signatures\");\n\n        Claims.SignedClaim memory signed = Claims.SignedClaim(\n            proof.signedClaim.claim,\n            proof.signedClaim.signatures\n        );\n\n        // check if the hash from the claimInfo is equal to the infoHash in the claimData\n        bytes32 hashed = Claims.hashClaimInfo(proof.claimInfo);\n        require(proof.signedClaim.claim.identifier == hashed, \"ClaimInfo hash doesn't match\");\n        require(hashed != bytes32(0), \"ClaimInfo hash is zero\");\n\n        // Recover signers of the signed claim\n        address[] memory claimSigners = Claims.recoverSignersOfSignedClaim(signed);\n        require(claimSigners.length >= _requiredThreshold, \"Fewer signatures than required threshold\");\n\n        // Track unique signers using an array\n        address[] memory seenSigners = new address[](claimSigners.length);\n        uint256 validWitnessSignatures;\n\n        // Count how many signers are accepted witnesses, skipping duplicates\n        for (uint256 i = 0; i < claimSigners.length; i++) {\n            address currSigner = claimSigners[i];\n            if (seenSigners.contains(currSigner)) {\n                continue;\n            }\n\n            if (_witnesses.contains(currSigner)) {\n                seenSigners[validWitnessSignatures] = currSigner;\n                validWitnessSignatures++;\n            }\n        }\n\n        // Check threshold\n        require(\n            validWitnessSignatures >= _requiredThreshold,\n            \"Not enough valid witness signatures\"\n        );\n\n        return true;\n    }\n\n\n    /* ============ View Functions ============ */\n\n    function getProviderHashes() external view returns (string[] memory) {\n        return providerHashes;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _validateProviderHash(string memory _providerHash) internal view returns (bool) {\n        return isProviderHash[_providerHash];\n    }\n\n    function _validateAndAddSigNullifier(bytes[] memory _sigArray) internal {\n        bytes32 nullifier = keccak256(abi.encode(_sigArray));\n        require(!nullifierRegistry.isNullified(nullifier), \"Nullifier has already been used\");\n        nullifierRegistry.addNullifier(nullifier);\n    }\n\n    /**\n     * Calculates the release amount based on the actual payment amount and conversion rate.\n     * Caps the release amount at the intent amount.\n     * NOTES:\n     * - Assumes that _conversionRate is not zero and is in the same precision as PRECISE_UNIT.\n     * - Function might overflow if _paymentAmount is very very large.\n     * \n     * @param _paymentAmount The actual payment amount.\n     * @param _conversionRate The conversion rate of the deposit token to the fiat currency.\n     * @param _intentAmount The max amount of tokens the offchain payer wants to take.\n     * @return The release amount.\n     */\n    function _calculateReleaseAmount(uint256 _paymentAmount, uint256 _conversionRate, uint256 _intentAmount) internal pure returns (uint256) {\n        // releaseAmount = paymentAmount / conversionRate\n        uint256 releaseAmount = (_paymentAmount * PRECISE_UNIT) / _conversionRate;\n        \n        // Ensure release amount doesn't exceed the intent amount (cap at intent amount)\n        if (releaseAmount > _intentAmount) {\n            releaseAmount = _intentAmount;\n        }\n\n        return releaseAmount;\n    }\n}\n"
    },
    "contracts/verifiers/BaseVerifiers/BaseReclaimVerifier.sol": {
      "content": "//SPDX-License-Identifier: MIT\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { AddressArrayUtils } from \"../../external/AddressArrayUtils.sol\";\nimport { Claims } from \"../../external/Claims.sol\";\nimport { StringArrayUtils } from \"../../external/StringArrayUtils.sol\";\n\nimport { ClaimVerifier } from \"../../lib/ClaimVerifier.sol\";\nimport { INullifierRegistry } from \"../../interfaces/INullifierRegistry.sol\";\nimport { IReclaimVerifier } from \"../interfaces/IReclaimVerifier.sol\";\n\npragma solidity ^0.8.18;\n\n/**\n * @notice BaseReclaimVerifier is a base contract for verifying Reclaim proofs.\n * This contract manages reclaim provider hashes and contains logic for verifying proof.\n */\ncontract BaseReclaimVerifier is Ownable, IReclaimVerifier {\n\n    using AddressArrayUtils for address[];\n    using StringArrayUtils for string[];\n\n    /* ============ Constants ============ */\n\n    uint256 internal constant PRECISE_UNIT = 1e18;\n\n    /* ============ State Variables ============ */\n    \n    mapping(string => bool) public isProviderHash;\n    string[] public providerHashes;                         // Set of provider hashes that these proofs should be for\n\n    /* ============ Events ============ */\n    event ProviderHashAdded(string providerHash);\n    event ProviderHashRemoved(string providerHash);\n\n    /* ============ Constructor ============ */\n    \n    constructor(\n        string[] memory _providerHashes\n    )\n        Ownable()\n    {\n        for (uint256 i = 0; i < _providerHashes.length; i++) {\n            require(!isProviderHash[_providerHashes[i]], \"Provider hash already added\");\n            isProviderHash[_providerHashes[i]] = true;\n            providerHashes.push(_providerHashes[i]);\n\n            emit ProviderHashAdded(_providerHashes[i]);\n        }\n    }\n\n    /* ============ Admin Functions ============ */\n\n    /**\n     * ONLY OWNER: Add provider hash string. Provider hash must not have been previously added.\n     *\n     * @param _newProviderHash    New provider hash to be added\n     */\n    function addProviderHash(string memory _newProviderHash) external onlyOwner {\n        require(!isProviderHash[_newProviderHash], \"Provider hash already added\");\n\n        isProviderHash[_newProviderHash] = true;\n        providerHashes.push(_newProviderHash);\n\n        emit ProviderHashAdded(_newProviderHash);\n    }\n\n    /**\n     * ONLY OWNER: Remove provider hash string. Provider hash must have been previously added.\n     *\n     * @param _removeProviderHash    Provider hash to be removed\n     */\n    function removeProviderHash(string memory _removeProviderHash) external onlyOwner {\n        require(isProviderHash[_removeProviderHash], \"Provider hash not found\");\n\n        delete isProviderHash[_removeProviderHash];\n        providerHashes.removeStorage(_removeProviderHash);\n\n        emit ProviderHashRemoved(_removeProviderHash);\n    }\n\n    /* ============ Public Functions ============ */\n    \n    /**\n     * Verify proof generated by witnesses. Claim is constructed by hashing claimInfo (provider, context, parameters)\n     * to get the identifier. And then signing on (identifier, owner, timestamp, epoch) to get claim signature. \n     * This function verifies a claim by performing the following checks on the claim\n     * - Calculates the hash of the claimInfo and checks if it matches the identifier in the claim\n     * - Checks if the signatures are valid and from the witnesses\n     * This function reverts if\n     * - No signatures are found on the proof\n     * - ClaimInfo hash does not match the identifier in the claim\n     * - Signatures are invalid (not from the witnesses)\n     * \n     * DEV NOTE: This function does NOT validate that the claim provider hash is valid. That is the \n     * responsibility of the caller. Ensure witnesses are unique otherwise the threshold can be met \n     * with duplicate witnesses.\n     * \n     * Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code\n     *    \n     * @param proof                 Proof to be verified\n     * @param _witnesses            List of accepted witnesses\n     * @param _requiredThreshold    Minimum number of signatures required from accepted witnesses\n     */\n    function verifyProofSignatures(\n        ReclaimProof memory proof, \n        address[] memory _witnesses,\n        uint256 _requiredThreshold\n    ) public pure returns (bool) {\n\n        require(_requiredThreshold > 0, \"Required threshold must be greater than 0\");\n        require(_requiredThreshold <= _witnesses.length, \"Required threshold must be less than or equal to number of witnesses\");\n        require(proof.signedClaim.signatures.length > 0, \"No signatures\");\n\n        Claims.SignedClaim memory signed = Claims.SignedClaim(\n            proof.signedClaim.claim,\n            proof.signedClaim.signatures\n        );\n\n        // check if the hash from the claimInfo is equal to the infoHash in the claimData\n        bytes32 hashed = Claims.hashClaimInfo(proof.claimInfo);\n        require(proof.signedClaim.claim.identifier == hashed, \"ClaimInfo hash doesn't match\");\n        require(hashed != bytes32(0), \"ClaimInfo hash is zero\");\n\n        // Recover signers of the signed claim\n        address[] memory claimSigners = Claims.recoverSignersOfSignedClaim(signed);\n        require(claimSigners.length >= _requiredThreshold, \"Fewer signatures than required threshold\");\n\n        // Track unique signers using an array\n        address[] memory seenSigners = new address[](claimSigners.length);\n        uint256 validWitnessSignatures;\n\n        // Count how many signers are accepted witnesses, skipping duplicates\n        for (uint256 i = 0; i < claimSigners.length; i++) {\n            address currSigner = claimSigners[i];\n            if (seenSigners.contains(currSigner)) {\n                continue;\n            }\n\n            if (_witnesses.contains(currSigner)) {\n                seenSigners[validWitnessSignatures] = currSigner;\n                validWitnessSignatures++;\n            }\n        }\n\n        // Check threshold\n        require(\n            validWitnessSignatures >= _requiredThreshold,\n            \"Not enough valid witness signatures\"\n        );\n\n        return true;\n    }\n\n\n    /* ============ View Functions ============ */\n\n    function getProviderHashes() external view returns (string[] memory) {\n        return providerHashes;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _validateProviderHash(string memory _providerHash) internal view returns (bool) {\n        return isProviderHash[_providerHash];\n    }\n\n    /**\n     * Calculates the release amount based on the actual payment amount and conversion rate.\n     * Caps the release amount at the intent amount.\n     * NOTES:\n     * - Assumes that _conversionRate is not zero and is in the same precision as PRECISE_UNIT.\n     * - Function might overflow if _paymentAmount is very very large.\n     * \n     * @param _paymentAmount The actual payment amount.\n     * @param _conversionRate The conversion rate of the deposit token to the fiat currency.\n     * @param _intentAmount The max amount of tokens the offchain payer wants to take.\n     * @return The release amount.\n     */\n    function _calculateReleaseAmount(uint256 _paymentAmount, uint256 _conversionRate, uint256 _intentAmount) internal pure returns (uint256) {\n\n        // releaseAmount = paymentAmount / conversionRate\n        uint256 releaseAmount = (_paymentAmount * PRECISE_UNIT) / _conversionRate;\n        \n        // Ensure release amount doesn't exceed the intent amount (cap at intent amount)\n        if (releaseAmount > _intentAmount) {\n            releaseAmount = _intentAmount;\n        }\n\n        return releaseAmount;\n    }\n}\n"
    },
    "contracts/verifiers/CashappReclaimVerifeir.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport { ClaimVerifier } from \"../lib/ClaimVerifier.sol\";\nimport { DateParsing } from \"../lib/DateParsing.sol\";\nimport { StringConversionUtils } from \"../lib/StringConversionUtils.sol\";\nimport { BaseReclaimPaymentVerifier } from \"./BaseVerifiers/BaseReclaimPaymentVerifier.sol\";\nimport { INullifierRegistry } from \"../interfaces/INullifierRegistry.sol\";\nimport { IPaymentVerifier } from \"./interfaces/IPaymentVerifier.sol\";\n\npragma solidity ^0.8.18;\n\ncontract CashappReclaimVerifier is IPaymentVerifier, BaseReclaimPaymentVerifier {\n\n    using StringConversionUtils for string;\n\n    /* ============ Structs ============ */\n\n    // Struct to hold the payment details extracted from the proof\n    struct PaymentDetails {\n        string amountString;\n        string timestampString;\n        string currencyCode;\n        string paymentId;\n        string paymentStatus;\n        string recipientId;\n        string intentHash;\n        string providerHash;\n    }\n\n    /* ============ Constants ============ */\n    \n    uint8 internal constant MAX_EXTRACT_VALUES = 10;\n    uint8 internal constant MIN_WITNESS_SIGNATURE_REQUIRED = 1;\n    bytes32 public constant COMPLETE_PAYMENT_STATUS = keccak256(abi.encodePacked(\"COMPLETE\"));\n\n    /* ============ Constructor ============ */\n    \n    constructor(\n        address _escrow,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies,\n        string[] memory _providerHashes\n    )   \n        BaseReclaimPaymentVerifier(\n            _escrow, \n            _nullifierRegistry, \n            _timestampBuffer, \n            _currencies,\n            _providerHashes\n        )\n    { }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY RAMP: Verifies a reclaim proof of an offchain Cashapp payment. Ensures the right _intentAmount * _conversionRate\n     * was paid to _payeeDetails after _intentTimestamp + timestampBuffer on Cashapp.\n     * Additionaly, checks the right fiatCurrency was paid and the payment status is COMPLETE.\n     *\n     * @param _verifyPaymentData Payment proof and intent details required for verification\n     * @return result The payment verification result containing success status, intent hash, release amount, payment currency and payment ID\n     */\n    function verifyPayment(\n        IPaymentVerifier.VerifyPaymentData calldata _verifyPaymentData\n    )\n        external \n        override\n        returns (IPaymentVerifier.PaymentVerificationResult memory)\n    {\n        require(msg.sender == escrow, \"Only escrow can call\");\n\n        PaymentDetails memory paymentDetails = _verifyProofAndExtractValues(\n            _verifyPaymentData.paymentProof, \n            _verifyPaymentData.depositData\n        );\n                \n        uint256 paymentAmount = _verifyPaymentDetails(\n            paymentDetails, \n            _verifyPaymentData\n        );\n\n        uint256 releaseAmount = _calculateReleaseAmount(\n            paymentAmount, \n            _verifyPaymentData.conversionRate, \n            _verifyPaymentData.intentAmount\n        );\n        \n        // Nullify the payment\n        _validateAndAddNullifier(keccak256(abi.encodePacked(paymentDetails.paymentId)));\n\n        bytes32 intentHash = bytes32(paymentDetails.intentHash.stringToUint(0));\n\n        return IPaymentVerifier.PaymentVerificationResult({\n            success: true,\n            intentHash: intentHash,\n            releaseAmount: releaseAmount,\n            paymentCurrency: _verifyPaymentData.fiatCurrency, // Use the intended currency as payment currency\n            paymentId: paymentDetails.paymentId\n        });\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * Verifies the proof and extracts the public values from the proof and _depositData.\n     *\n     * @param _proof The proof to verify.\n     * @param _depositData The deposit data to extract the verification data from.\n     */\n    function _verifyProofAndExtractValues(bytes calldata _proof, bytes calldata _depositData) \n        internal\n        view\n        returns (PaymentDetails memory paymentDetails) \n    {\n        // Decode proof\n        ReclaimProof memory proof = abi.decode(_proof, (ReclaimProof));\n\n        // Extract verification data\n        address[] memory witnesses = _decodeDepositData(_depositData);\n        verifyProofSignatures(proof, witnesses, MIN_WITNESS_SIGNATURE_REQUIRED);     // claim must have at least 1 signature from witnesses\n        \n        // Extract public values\n        paymentDetails = _extractValues(proof);\n\n        // Check provider hash (Required for Reclaim proofs)\n        require(_validateProviderHash(paymentDetails.providerHash), \"No valid providerHash\");\n    }\n\n    /**\n     * Verifies that payment was made to _payeeDetailsHash after _intentTimestamp + timestampBuffer on Cashapp. \n     * Additionaly, checks the right fiatCurrency was paid and the payment status is COMPLETED. Reverts if any \n     * of the conditions are not met.\n     * Returns the actual payment amount.\n     */\n    function _verifyPaymentDetails(\n        PaymentDetails memory paymentDetails,\n        VerifyPaymentData memory _verifyPaymentData\n    ) internal view returns (uint256) {\n        uint8 decimals = IERC20Metadata(_verifyPaymentData.depositToken).decimals();\n\n        // Validate amount - Allow partial payments but ensure payment amount > 0\n        uint256 paymentAmount = _parseAmount(paymentDetails.amountString, decimals);\n        require(paymentAmount > 0, \"Payment amount must be greater than zero\");\n        \n        // Validate recipient\n        require(\n            paymentDetails.recipientId.stringComparison(_verifyPaymentData.payeeDetails), \n            \"Incorrect payment recipient\"\n        );\n        \n        // Validate timestamp; Divide by 1000 to convert to seconds and add in buffer to build flexibility\n        // for L2 timestamps\n        uint256 paymentTimestamp = paymentDetails.timestampString.stringToUint(0) / 1000 + timestampBuffer;\n        require(paymentTimestamp >= _verifyPaymentData.intentTimestamp, \"Incorrect payment timestamp\");\n\n        // Validate currency\n        require(\n            keccak256(abi.encodePacked(paymentDetails.currencyCode)) == _verifyPaymentData.fiatCurrency,\n            \"Incorrect payment currency\"\n        );\n\n        // Validate status\n        require(\n            keccak256(abi.encodePacked(paymentDetails.paymentStatus)) == COMPLETE_PAYMENT_STATUS,\n            \"Invalid payment status\"\n        );\n\n        return paymentAmount;\n    }\n\n    /**\n     * Extracts the verification data from the data. In case of a Reclaim/TLSN/ZK proof, data contains the attester's address.\n     * In case of a zkEmail proof, data contains the DKIM key hash. Can also contain additional data like currency code, etc.\n     *\n     * @param _data The data to extract the verification data from.\n     */\n    function _decodeDepositData(bytes calldata _data) internal pure returns (address[] memory witnesses) {\n        witnesses = abi.decode(_data, (address[]));\n    }\n\n    /**\n     * Extracts all values from the proof context.\n     *\n     * @param _proof The proof containing the context to extract values from.\n     */\n    function _extractValues(ReclaimProof memory _proof) internal pure returns (PaymentDetails memory paymentDetails) {\n        string[] memory values = ClaimVerifier.extractAllFromContext(\n            _proof.claimInfo.context, \n            MAX_EXTRACT_VALUES, \n            true\n        );\n\n        return PaymentDetails({\n            // values[0] is ContextAddress\n            intentHash: values[1],\n            // values[2] is SENDER_ID\n            amountString: values[3],\n            currencyCode: values[4],\n            timestampString: values[5],\n            paymentId: values[6],\n            recipientId: values[7],\n            paymentStatus: values[8],\n            providerHash: values[9]\n        });\n    }\n\n    /**\n     * Parses the amount from the proof.\n     *\n     * @param _amount The amount to parse.\n     * @param _decimals The decimals of the token.\n     */\n    function _parseAmount(string memory _amount, uint8 _decimals) internal pure returns(uint256) {\n        // Cashapp amount is scaled by 100 (e.g. $1 => 100)\n        return _amount.stringToUint(_decimals - 2);\n    }\n}\n"
    },
    "contracts/verifiers/interfaces/IBasePaymentVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IBasePaymentVerifier {\n    function getCurrencies() external view returns (bytes32[] memory currencyCodes);\n    function isCurrency(bytes32 _currencyCode) external view returns (bool);\n    function timestampBuffer() external view returns (uint256);\n}\n"
    },
    "contracts/verifiers/interfaces/IPaymentVerifier.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\n\ninterface IPaymentVerifier {\n\n    /* ============ Structs ============ */\n\n    struct VerifyPaymentData {\n        bytes paymentProof;                     // Payment proof\n        address depositToken;                   // Address of deposit token locked in escrow\n        uint256 intentAmount;                   // Amount of deposit token that offchain payer wants to take\n        uint256 intentTimestamp;                // Timestamp at which intent was created. Offchain payment must be made after this timestamp.\n        string payeeDetails;                    // Payee details (hash of payee's payment platform ID OR just raw ID)\n        bytes32 fiatCurrency;                   // Fiat currency the offchain payer paid in\n        uint256 conversionRate;                 // Conversion rate of deposit token to fiat currency\n        bytes depositData;                      // Additional data provided by the depositor (e.g. witness signatures)\n        bytes data;                             // Additional data provided by the taker (e.g. currency price etc.)\n    }\n\n    struct PaymentVerificationResult {\n        bool success;                           // Whether the payment verification succeeded\n        bytes32 intentHash;                     // The hash of the intent being fulfilled\n        uint256 releaseAmount;                  // The amount of tokens to release\n        bytes32 paymentCurrency;                // The currency that was actually paid (for indexing)\n        string paymentId;                       // The payment ID from the payment platform (for reconciliation)\n    }\n\n    /* ============ External Functions ============ */\n\n    function verifyPayment(\n        VerifyPaymentData calldata _verifyPaymentData\n    )   \n        external\n        returns(PaymentVerificationResult memory result);\n\n}\n"
    },
    "contracts/verifiers/interfaces/IReclaimVerifier.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Claims } from \"../../external/Claims.sol\";\n\npragma solidity ^0.8.18;\n\ninterface IReclaimVerifier {\n    \n    struct ReclaimProof {\n        Claims.ClaimInfo claimInfo;\n        Claims.SignedClaim signedClaim;\n    }\n}\n"
    },
    "contracts/verifiers/keyHashAdapters/IKeyHashAdapterV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IKeyHashAdapterV2 {\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external;\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external;\n    function getMailServerKeyHashes() external view returns (bytes32[] memory);\n    function isMailServerKeyHash(bytes32 _mailserverKeyHash) external view returns (bool);\n}\n"
    },
    "contracts/verifiers/keyHashAdapters/ManagedKeyHashAdapterV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { IKeyHashAdapterV2 } from \"./IKeyHashAdapterV2.sol\";\nimport { Bytes32ArrayUtils } from \"../../external/Bytes32ArrayUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract ManagedKeyHashAdapterV2 is Ownable, IKeyHashAdapterV2 {\n    \n    using Bytes32ArrayUtils for bytes32[];\n\n    /* ============ Events ============ */\n    event MailServerKeyHashAdded(bytes32 mailserverKeyHash);\n    event MailServerKeyHashRemoved(bytes32 mailserverKeyHash);\n\n    /* ============ State Variables ============ */\n\n    mapping(bytes32 => bool) public isMailServerKeyHash;\n    bytes32[] public mailServerKeyHashes;\n\n    /* ============ Constructor ============ */\n\n    constructor(\n        bytes32[] memory _mailServerKeyHashes\n    )\n        Ownable()\n    {\n        for (uint256 i = 0; i < _mailServerKeyHashes.length; i++) {\n            bytes32 mailserverKeyHash = _mailServerKeyHashes[i];\n            require(!isMailServerKeyHash[mailserverKeyHash], \"Key hash already added\");\n            \n            isMailServerKeyHash[mailserverKeyHash] = true;\n            mailServerKeyHashes.push(mailserverKeyHash);\n        }\n    }\n\n    /* ============ External Functions ============ */\n\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external onlyOwner {\n        require(!isMailServerKeyHash[_mailserverKeyHash], \"Key hash already added\");\n\n        isMailServerKeyHash[_mailserverKeyHash] = true;\n        mailServerKeyHashes.push(_mailserverKeyHash);\n\n        emit MailServerKeyHashAdded(_mailserverKeyHash);\n    }\n\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external onlyOwner {\n        require(isMailServerKeyHash[_mailserverKeyHash], \"Key hash not added\");\n\n        isMailServerKeyHash[_mailserverKeyHash] = false;\n        mailServerKeyHashes.removeStorage(_mailserverKeyHash);\n\n        emit MailServerKeyHashRemoved(_mailserverKeyHash);\n    }\n\n    /* ============ External Getter Functions ============ */\n\n    function getMailServerKeyHashes() external view override returns (bytes32[] memory) {\n        return mailServerKeyHashes;\n    }\n}\n"
    },
    "contracts/verifiers/MercadoPagoReclaimVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport { ClaimVerifier } from \"../lib/ClaimVerifier.sol\";\nimport { DateParsing } from \"../lib/DateParsing.sol\";\nimport { StringConversionUtils } from \"../lib/StringConversionUtils.sol\";\nimport { BaseReclaimPaymentVerifier } from \"./BaseVerifiers/BaseReclaimPaymentVerifier.sol\";\nimport { INullifierRegistry } from \"../interfaces/INullifierRegistry.sol\";\nimport { IPaymentVerifier } from \"./interfaces/IPaymentVerifier.sol\";\n\npragma solidity ^0.8.18;\n\ncontract MercadoPagoReclaimVerifier is IPaymentVerifier, BaseReclaimPaymentVerifier {\n\n    using StringConversionUtils for string;\n\n    /* ============ Structs ============ */\n\n    // Struct to hold the payment details extracted from the proof\n    struct PaymentDetails {\n        string amountString;\n        string amountCentsString;\n        string dateString;\n        string currencyCode;\n        string paymentId;\n        string paymentStatus;\n        string paymentType;\n        string recipientId;\n        string intentHash;\n        string providerHash;\n    }\n\n    /* ============ Constants ============ */\n    \n    uint8 internal constant MAX_EXTRACT_VALUES = 13;        // 11 + 2 url params + 1 context address\n    uint8 internal constant MIN_WITNESS_SIGNATURE_REQUIRED = 1;\n    \n    bytes32 public constant COMPLETE_PAYMENT_STATUS = keccak256(abi.encodePacked(\"approved\"));\n    bytes32 public constant P2P_PAYMENT_TYPE = keccak256(abi.encodePacked(\"p2p_money_transfer\"));\n    bytes32 public constant ONLINE_TRANSFER_TYPE = keccak256(abi.encodePacked(\"transfer_online\"));\n\n    /* ============ Constructor ============ */\n    \n    constructor(\n        address _escrow,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies,\n        string[] memory _providerHashes\n    )   \n        BaseReclaimPaymentVerifier(\n            _escrow, \n            _nullifierRegistry, \n            _timestampBuffer, \n            _currencies,\n            _providerHashes\n        )\n    { }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY RAMP: Verifies a reclaim proof of an offchain Mercado Pago payment. Ensures the right _intentAmount * _conversionRate\n     * was paid to _payeeDetails after _intentTimestamp + timestampBuffer on Mercado Pago.\n     * Additionaly, checks the right fiatCurrency was paid and the payment status is correct.\n     *\n     * @param _verifyPaymentData Payment proof and intent details required for verification\n     * @return result The payment verification result containing success status, intent hash, release amount, payment currency and payment ID\n     */\n    function verifyPayment(\n        IPaymentVerifier.VerifyPaymentData calldata _verifyPaymentData\n    )\n        external \n        override\n        returns (IPaymentVerifier.PaymentVerificationResult memory)\n    {\n        require(msg.sender == escrow, \"Only escrow can call\");\n\n        PaymentDetails memory paymentDetails = _verifyProofAndExtractValues(_verifyPaymentData.paymentProof, _verifyPaymentData.depositData);\n        \n        uint256 paymentAmount = _verifyPaymentDetails(\n            paymentDetails, \n            _verifyPaymentData\n        );\n\n        uint256 releaseAmount = _calculateReleaseAmount(\n            paymentAmount, \n            _verifyPaymentData.conversionRate, \n            _verifyPaymentData.intentAmount\n        );\n        \n        bytes32 nullifier = keccak256(abi.encodePacked(paymentDetails.paymentId));\n        _validateAndAddNullifier(nullifier);\n\n        bytes32 intentHashBytes = bytes32(paymentDetails.intentHash.stringToUint(0));\n        \n        return IPaymentVerifier.PaymentVerificationResult({\n            success: true,\n            intentHash: intentHashBytes,\n            releaseAmount: releaseAmount,\n            paymentCurrency: _verifyPaymentData.fiatCurrency, // Use the intended currency as payment currency\n            paymentId: paymentDetails.paymentId\n        });\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * Verifies the proof and extracts the public values from the proof and _depositData.\n     *\n     * @param _proof The proof to verify.\n     * @param _depositData The deposit data to extract the verification data from.\n     */\n    function _verifyProofAndExtractValues(bytes calldata _proof, bytes calldata _depositData) \n        internal\n        view\n        returns (PaymentDetails memory paymentDetails) \n    {\n        // Decode proof\n        ReclaimProof memory proof = abi.decode(_proof, (ReclaimProof));\n\n        // Extract verification data\n        address[] memory witnesses = _decodeDepositData(_depositData);\n\n        verifyProofSignatures(proof, witnesses, MIN_WITNESS_SIGNATURE_REQUIRED);     // claim must have at least 1 signature from witnesses\n        \n        // Extract public values\n        paymentDetails = _extractValues(proof);\n\n        // Check provider hash (Required for Reclaim proofs)\n        require(_validateProviderHash(paymentDetails.providerHash), \"No valid providerHash\");\n    }\n\n    /**\n     * Verifies the right _intentAmount * _conversionRate is paid to _payeeDetailsHash after \n     * _intentTimestamp + timestampBuffer on Mercado Pago. \n     * Additionaly, checks the right fiatCurrency was paid and the payment status is correct.\n     * Reverts if any of the conditions are not met. Returns the actual payment amount.\n     */\n    function _verifyPaymentDetails(\n        PaymentDetails memory paymentDetails,\n        VerifyPaymentData memory _verifyPaymentData\n    ) internal view returns (uint256) {\n        uint8 decimals = IERC20Metadata(_verifyPaymentData.depositToken).decimals();\n\n        uint256 paymentAmount = _parseAmount(paymentDetails.amountString, paymentDetails.amountCentsString, decimals);\n        require(paymentAmount > 0, \"Payment amount must be greater than zero\");\n        \n        require(\n            paymentDetails.recipientId.stringComparison(_verifyPaymentData.payeeDetails), \n            \"Incorrect payment recipient\"\n        );\n        \n        uint256 paymentTimestamp = DateParsing._dateStringToTimestamp(paymentDetails.dateString) + timestampBuffer;\n        require(paymentTimestamp >= _verifyPaymentData.intentTimestamp, \"Incorrect payment timestamp\");\n\n        bytes32 paymentCurrencyHash = keccak256(abi.encodePacked(paymentDetails.currencyCode));\n        require(paymentCurrencyHash == _verifyPaymentData.fiatCurrency, \"Incorrect payment currency\");\n\n        bytes32 paymentTypeHash = keccak256(abi.encodePacked(paymentDetails.paymentType));\n        require(paymentTypeHash == P2P_PAYMENT_TYPE || paymentTypeHash == ONLINE_TRANSFER_TYPE, \"Invalid payment type\");\n\n        bytes32 paymentStatusHash = keccak256(abi.encodePacked(paymentDetails.paymentStatus));\n        require(paymentStatusHash == COMPLETE_PAYMENT_STATUS, \"Invalid payment status\");\n\n        return paymentAmount;\n    }\n\n    /**\n     * Extracts the verification data from the data. In case of a Reclaim/TLSN/ZK proof, data contains the attester's address.\n     * In case of a zkEmail proof, data contains the DKIM key hash. Can also contain additional data like currency code, etc.\n     *\n     * @param _data The data to extract the verification data from.\n     */\n    function _decodeDepositData(bytes calldata _data) internal pure returns (address[] memory witnesses) {\n        witnesses = abi.decode(_data, (address[]));\n    }\n\n    /**\n     * Extracts all values from the proof context.\n     *\n     * @param _proof The proof containing the context to extract values from.\n     */\n    function _extractValues(ReclaimProof memory _proof) internal pure returns (PaymentDetails memory paymentDetails) {\n        string[] memory values = ClaimVerifier.extractAllFromContext(\n            _proof.claimInfo.context, \n            MAX_EXTRACT_VALUES, \n            true\n        );\n\n        return PaymentDetails({\n            // values[0] is ContextAddress\n            intentHash: values[1],\n            // values[2] is url_params_1\n            // values[3] is url_params_2\n            amountString: values[4],\n            amountCentsString: values[5],\n            currencyCode: values[6],\n            dateString: values[7],\n            paymentId: values[8],\n            paymentStatus: values[9],\n            paymentType: values[10],\n            recipientId: values[11],\n            providerHash: values[12]\n        });\n    }\n\n    /**\n     * Parses the amount from the proof.\n     *\n     * @param _amount The amount to parse.\n     * @param _amountCents The cents amount to parse.\n     * @param _decimals The decimals of the token.\n     */\n    function _parseAmount(string memory _amount, string memory _amountCents, uint8 _decimals) internal pure returns(uint256) {\n        uint256 baseAmount = _amount.stringToUint(\n            0x2C,  // period character, which is the decimal character for ARS amounts\n            _decimals\n        );\n        uint256 centsAmount = _amountCents.stringToUint(_decimals - 2);\n        return baseAmount + centsAmount;\n    }\n}"
    },
    "contracts/verifiers/RevolutReclaimVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport { ClaimVerifier } from \"../lib/ClaimVerifier.sol\";\nimport { DateParsing } from \"../lib/DateParsing.sol\";\nimport { StringConversionUtils } from \"../lib/StringConversionUtils.sol\";\nimport { BaseReclaimPaymentVerifier } from \"./BaseVerifiers/BaseReclaimPaymentVerifier.sol\";\nimport { INullifierRegistry } from \"../interfaces/INullifierRegistry.sol\";\nimport { IPaymentVerifier } from \"./interfaces/IPaymentVerifier.sol\";\n\npragma solidity ^0.8.18;\n\ncontract RevolutReclaimVerifier is IPaymentVerifier, BaseReclaimPaymentVerifier {\n\n    using StringConversionUtils for string;\n\n    /* ============ Structs ============ */\n\n    // Struct to hold the payment details extracted from the proof\n    struct PaymentDetails {\n        string amountString;\n        string timestampString;\n        string currencyCode;\n        string paymentId;\n        string paymentStatus;\n        string recipientId;\n        string intentHash;\n        string providerHash;\n    }\n\n    /* ============ Constants ============ */\n    \n    uint8 internal constant MAX_EXTRACT_VALUES = 9;\n    uint8 internal constant MIN_WITNESS_SIGNATURE_REQUIRED = 1;\n    bytes32 public constant COMPLETE_PAYMENT_STATUS = keccak256(abi.encodePacked(\"COMPLETED\"));\n\n    /* ============ Constructor ============ */\n    \n    constructor(\n        address _escrow,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies,\n        string[] memory _providerHashes\n    )   \n        BaseReclaimPaymentVerifier(\n            _escrow, \n            _nullifierRegistry, \n            _timestampBuffer, \n            _currencies,\n            _providerHashes\n        )\n    { }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY RAMP: Verifies a reclaim proof of an offchain Revolut payment. Ensures the right _intentAmount * _conversionRate\n     * USD was paid to _payeeDetails after _intentTimestamp + timestampBuffer on Revolut.\n     * Additionaly, checks the right fiatCurrency was paid and the payment status is COMPLETED.\n     *\n     * @param _verifyPaymentData Payment proof and intent details required for verification\n     * @return result The payment verification result containing success status, intent hash, release amount, payment currency and payment ID\n     */\n    function verifyPayment(\n        IPaymentVerifier.VerifyPaymentData calldata _verifyPaymentData\n    )\n        external \n        override\n        returns (IPaymentVerifier.PaymentVerificationResult memory)\n    {\n        require(msg.sender == escrow, \"Only escrow can call\");\n\n        PaymentDetails memory paymentDetails = _verifyProofAndExtractValues(_verifyPaymentData.paymentProof, _verifyPaymentData.depositData);\n                \n        uint256 paymentAmount = _verifyPaymentDetails(\n            paymentDetails, \n            _verifyPaymentData\n        );\n\n        uint256 releaseAmount = _calculateReleaseAmount(\n            paymentAmount, \n            _verifyPaymentData.conversionRate, \n            _verifyPaymentData.intentAmount\n        );\n        \n        // Nullify the payment\n        _validateAndAddNullifier(keccak256(abi.encodePacked(paymentDetails.paymentId)));\n\n        return IPaymentVerifier.PaymentVerificationResult({\n            success: true,\n            intentHash: bytes32(paymentDetails.intentHash.stringToUint(0)),\n            releaseAmount: releaseAmount,\n            paymentCurrency: _verifyPaymentData.fiatCurrency, // Use the intended currency as payment currency\n            paymentId: paymentDetails.paymentId\n        });\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * Verifies the proof and extracts the public values from the proof and _depositData.\n     *\n     * @param _proof The proof to verify.\n     * @param _depositData The deposit data to extract the verification data from.\n     */\n    function _verifyProofAndExtractValues(bytes calldata _proof, bytes calldata _depositData) \n        internal\n        view\n        returns (PaymentDetails memory paymentDetails) \n    {\n        // Decode proof\n        ReclaimProof memory proof = abi.decode(_proof, (ReclaimProof));\n\n        // Extract verification data\n        address[] memory witnesses = _decodeDepositData(_depositData);\n\n        verifyProofSignatures(proof, witnesses, MIN_WITNESS_SIGNATURE_REQUIRED);     // claim must have at least 1 signature from witnesses\n        \n        // Extract public values\n        paymentDetails = _extractValues(proof);\n\n        // Check provider hash (Required for Reclaim proofs)\n        require(_validateProviderHash(paymentDetails.providerHash), \"No valid providerHash\");\n    }\n\n    /**\n     * Verifies that payment was made to _payeeDetailsHash after _intentTimestamp + timestampBuffer on Revolut. \n     * Additionaly, checks the right fiatCurrency was paid and the payment status is COMPLETED. Reverts if any \n     * of the conditions are not met. Returns the actual payment amount.\n     */\n    function _verifyPaymentDetails(\n        PaymentDetails memory paymentDetails,\n        VerifyPaymentData memory _verifyPaymentData\n    ) internal view returns (uint256) {\n        uint8 decimals = IERC20Metadata(_verifyPaymentData.depositToken).decimals();\n\n        // Validate amount\n        uint256 paymentAmount = _parseAmount(paymentDetails.amountString, decimals);\n        require(paymentAmount > 0, \"Payment amount must be greater than zero\");\n        \n        // Validate recipient\n        require(\n            paymentDetails.recipientId.stringComparison(_verifyPaymentData.payeeDetails), \n            \"Incorrect payment recipient\"\n        );\n        \n        // Validate timestamp; Divide by 1000 to convert to seconds and add in buffer to build flexibility\n        // for L2 timestamps\n        uint256 paymentTimestamp = paymentDetails.timestampString.stringToUint(0) / 1000 + timestampBuffer;\n        require(paymentTimestamp >= _verifyPaymentData.intentTimestamp, \"Incorrect payment timestamp\");\n\n        // Validate currency\n        require(\n            keccak256(abi.encodePacked(paymentDetails.currencyCode)) == _verifyPaymentData.fiatCurrency,\n            \"Incorrect payment currency\"\n        );\n\n        // Validate status\n        require(\n            keccak256(abi.encodePacked(paymentDetails.paymentStatus)) == COMPLETE_PAYMENT_STATUS,\n            \"Invalid payment status\"\n        );\n\n        return paymentAmount;\n    }\n\n    /**\n     * Extracts the verification data from the data. In case of a Reclaim/TLSN/ZK proof, data contains the attester's address.\n     * In case of a zkEmail proof, data contains the DKIM key hash. Can also contain additional data like currency code, etc.\n     *\n     * @param _data The data to extract the verification data from.\n     */\n    function _decodeDepositData(bytes calldata _data) internal pure returns (address[] memory witnesses) {\n        witnesses = abi.decode(_data, (address[]));\n    }\n\n    /**\n     * Extracts all values from the proof context.\n     *\n     * @param _proof The proof containing the context to extract values from.\n     */\n    function _extractValues(ReclaimProof memory _proof) internal pure returns (PaymentDetails memory paymentDetails) {\n        string[] memory values = ClaimVerifier.extractAllFromContext(\n            _proof.claimInfo.context, \n            MAX_EXTRACT_VALUES, \n            true\n        );\n\n        return PaymentDetails({\n            // values[0] is ContextAddress\n            intentHash: values[1],\n            amountString: values[2],\n            timestampString: values[3],\n            currencyCode: values[4],\n            paymentId: values[5],\n            paymentStatus: values[6],\n            recipientId: values[7],\n            providerHash: values[8]\n        });\n    }\n\n    /**\n     * Parses the amount from the proof.\n     *\n     * @param _amount The amount to parse.\n     * @param _decimals The decimals of the token.\n     */\n    function _parseAmount(string memory _amount, uint8 _decimals) internal pure returns(uint256) {\n        // For send transactions, the amount is prefixed with a '-' character, if the character doesn't exist then\n        // it would be a receive transaction\n        require(bytes(_amount)[0] == 0x2D, \"Not a send transaction\");   \n        // Revolut amount is scaled by 100 (e.g. 20064 => 200.64)\n        return _amount.stringToUint(_decimals - 2);\n    }\n}"
    },
    "contracts/verifiers/VenmoReclaimVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport { DateParsing } from \"../lib/DateParsing.sol\";\nimport { ClaimVerifier } from \"../lib/ClaimVerifier.sol\";\nimport { StringConversionUtils } from \"../lib/StringConversionUtils.sol\";\nimport { BaseReclaimPaymentVerifier } from \"./BaseVerifiers/BaseReclaimPaymentVerifier.sol\";\nimport { INullifierRegistry } from \"../interfaces/INullifierRegistry.sol\";\nimport { IPaymentVerifier } from \"./interfaces/IPaymentVerifier.sol\";\n\npragma solidity ^0.8.18;\n\ncontract VenmoReclaimVerifier is IPaymentVerifier, BaseReclaimPaymentVerifier {\n\n    using StringConversionUtils for string;\n    \n    /* ============ Structs ============ */\n\n    // Struct to hold the payment details extracted from the proof\n    struct PaymentDetails {\n        string amountString;\n        string dateString;\n        string paymentId;\n        string recipientId;\n        string intentHash;\n        string providerHash;\n    }\n\n    /* ============ Constants ============ */\n    \n    uint8 internal constant MAX_EXTRACT_VALUES = 8; \n    uint8 internal constant MIN_WITNESS_SIGNATURE_REQUIRED = 1;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _escrow,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies,\n        string[] memory _providerHashes\n    )   \n        BaseReclaimPaymentVerifier(\n            _escrow, \n            _nullifierRegistry, \n            _timestampBuffer, \n            _currencies,\n            _providerHashes\n        )\n    { }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY RAMP: Verifies a reclaim proof of an offchain Venmo payment. Ensures the right _intentAmount * _conversionRate\n     * USD was paid to _payeeDetails after _intentTimestamp + timestampBuffer on Venmo.\n     * Note: For Venmo fiat currency is always USD. For other verifiers which support multiple currencies,\n     * _fiatCurrency needs to be checked against the fiat currency in the proof.\n     *\n     * @param _verifyPaymentData Payment proof and intent details required for verification\n     * @return result The payment verification result containing success status, intent hash, release amount, payment currency and payment ID\n     */\n    function verifyPayment(\n        IPaymentVerifier.VerifyPaymentData calldata _verifyPaymentData\n    )\n        external \n        override\n        returns (IPaymentVerifier.PaymentVerificationResult memory)\n    {\n        require(msg.sender == escrow, \"Only escrow can call\");\n\n        PaymentDetails memory paymentDetails = _verifyProofAndExtractValues(_verifyPaymentData.paymentProof, _verifyPaymentData.depositData);\n                \n        uint256 paymentAmount = _verifyPaymentDetails(\n            paymentDetails, \n            _verifyPaymentData\n        );\n\n        uint256 releaseAmount = _calculateReleaseAmount(\n            paymentAmount, \n            _verifyPaymentData.conversionRate, \n            _verifyPaymentData.intentAmount\n        );\n\n        // Nullify the payment\n        bytes32 nullifier = keccak256(abi.encodePacked(paymentDetails.paymentId));\n        _validateAndAddNullifier(nullifier);\n\n        bytes32 intentHash = bytes32(paymentDetails.intentHash.stringToUint(0));\n        \n        return IPaymentVerifier.PaymentVerificationResult({\n            success: true,\n            intentHash: intentHash,\n            releaseAmount: releaseAmount,\n            paymentCurrency: _verifyPaymentData.fiatCurrency, // Venmo only supports USD\n            paymentId: paymentDetails.paymentId\n        });\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * Verifies the proof and extracts the public values from the proof and _depositData.\n     *\n     * @param _proof The proof to verify.\n     * @param _depositData The deposit data to extract the verification data from.\n     */\n    function _verifyProofAndExtractValues(bytes calldata _proof, bytes calldata _depositData) \n        internal\n        view\n        returns (PaymentDetails memory paymentDetails) \n    {\n        // Decode proof\n        ReclaimProof memory proof = abi.decode(_proof, (ReclaimProof));\n\n        // Extract verification data\n        address[] memory witnesses = _decodeDepositData(_depositData);\n\n        verifyProofSignatures(proof, witnesses, MIN_WITNESS_SIGNATURE_REQUIRED);     // claim must have at least 1 signature from witnesses\n        \n        // Extract public values\n        paymentDetails = _extractValues(proof);\n\n        // Check provider hash (Required for Reclaim proofs)\n        require(_validateProviderHash(paymentDetails.providerHash), \"No valid providerHash\");\n    }\n\n    /**\n     * Verifies the right _intentAmount * _conversionRate is paid to _payeeDetailsHash after \n     * _intentTimestamp + timestampBuffer on Venmo. Reverts if any of the conditions are not met.\n     * Returns the actual payment amount.\n     */\n    function _verifyPaymentDetails(\n        PaymentDetails memory paymentDetails,\n        VerifyPaymentData memory _verifyPaymentData\n    ) internal view returns (uint256) {\n        uint8 decimals = IERC20Metadata(_verifyPaymentData.depositToken).decimals();\n\n        // Validate amount - Allow partial payments but ensure payment amount > 0\n        uint256 paymentAmount = paymentDetails.amountString.stringToUint(decimals);\n        require(paymentAmount > 0, \"Payment amount must be greater than zero\");\n        \n        // Validate recipient\n        require(\n            paymentDetails.recipientId.stringComparison(_verifyPaymentData.payeeDetails), \n            \"Incorrect payment recipient\"\n        );\n\n        // Validate timestamp; add in buffer to build flexibility for L2 timestamps\n        uint256 paymentTimestamp = DateParsing._dateStringToTimestamp(paymentDetails.dateString) + timestampBuffer;\n        require(paymentTimestamp >= _verifyPaymentData.intentTimestamp, \"Incorrect payment timestamp\");\n        \n        return paymentAmount;\n    }\n\n    /**\n     * Extracts the verification data from the data. In case of a Reclaim/TLSN/ZK proof, data contains the witnesses' addresses.\n     * In case of a zkEmail proof, data contains the DKIM key hash. Can also contain additional data like currency code, etc.\n     *\n     * @param _data The data to extract the verification data from.\n     */\n    function _decodeDepositData(bytes calldata _data) internal pure returns (address[] memory witnesses) {\n        witnesses = abi.decode(_data, (address[]));\n    }\n\n    /**\n     * Extracts all values from the proof context.\n     *\n     * @param _proof The proof containing the context to extract values from.\n     */\n    function _extractValues(ReclaimProof memory _proof) internal pure returns (PaymentDetails memory paymentDetails) {\n        string[] memory values = ClaimVerifier.extractAllFromContext(\n            _proof.claimInfo.context, \n            MAX_EXTRACT_VALUES, \n            true\n        );\n\n        return PaymentDetails({\n            // values[0] is ContextAddress\n            intentHash: values[1],\n            // values[2] is SENDER_ID\n            amountString: values[3],\n            dateString: values[4],\n            paymentId: values[5],\n            recipientId: values[6],\n            providerHash: values[7]\n        });\n    }\n}\n"
    },
    "contracts/verifiers/WiseReclaimVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport { DateParsing } from \"../lib/DateParsing.sol\";\nimport { ClaimVerifier } from \"../lib/ClaimVerifier.sol\";\nimport { StringConversionUtils } from \"../lib/StringConversionUtils.sol\";\nimport { BaseReclaimPaymentVerifier } from \"./BaseVerifiers/BaseReclaimPaymentVerifier.sol\";\nimport { INullifierRegistry } from \"../interfaces/INullifierRegistry.sol\";\nimport { IPaymentVerifier } from \"./interfaces/IPaymentVerifier.sol\";\n\nimport \"hardhat/console.sol\";\n\npragma solidity ^0.8.18;\n\ncontract WiseReclaimVerifier is IPaymentVerifier, BaseReclaimPaymentVerifier {\n\n    using StringConversionUtils for string;\n    \n    /* ============ Structs ============ */\n\n    // Struct to hold the payment details extracted from the proof\n    struct PaymentDetails {\n        string amountString;\n        string timestampString;\n        string currencyCode;\n        string paymentId;\n        string paymentStatus;\n        string recipientId;\n        string intentHash;\n        string providerHash;\n    }\n\n    struct CurrencyResolutionData {\n        bytes32 intentHash;              // Intent hash as nonce\n        bytes32 paymentCurrency;         // The currency paid\n        uint256 conversionRate;          // Conversion rate for the payment currency\n        uint256 penaltyBps;              // Penalty in basis points (100 = 1%)\n        bytes signature;                 // Signature from currency resolution service approving this dispute\n    }\n\n    /* ============ Constants ============ */\n    \n    uint8 internal constant MAX_EXTRACT_VALUES = 11; \n    uint8 internal constant MIN_WITNESS_SIGNATURE_REQUIRED = 1;\n    bytes32 public constant COMPLETE_PAYMENT_STATUS = keccak256(abi.encodePacked(\"OUTGOING_PAYMENT_SENT\"));\n    \n    uint256 internal constant MAX_PENALTY_BPS = 0.2e18; // 20% max penalty\n    uint256 internal constant PRECISION_UNIT = 1e18; // 100% in basis points\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _escrow,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies,\n        string[] memory _providerHashes\n    )   \n        BaseReclaimPaymentVerifier(\n            _escrow, \n            _nullifierRegistry, \n            _timestampBuffer, \n            _currencies,\n            _providerHashes\n        )\n    { }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY ESCROW: Verifies a reclaim proof of an offchain Wise payment. Ensures the right amount\n     * was paid to the correct recipient after the intent timestamp.\n     * \n     * Handles currency mismatches: If payment is made in a different currency than intended,\n     * the taker can provide CurrencyResolutionData in verificationData with:\n     * - paymentCurrency: The currency that was actually paid\n     * - conversionRate: The conversion rate for the actual currency\n     * - penaltyBps: The penalty for sending the payment in a different currency in basis points (100 = 1%)\n     * - signature: Signature from currency resolution service approving this dispute\n     * Note: The depositor needs to provide a currency resolution service address in the deposit data.\n     *\n     * @param _verifyPaymentData Payment proof and intent details required for verification\n     * @return result PaymentVerificationResult struct containing verification status and payment details\n     */\n    function verifyPayment(\n        IPaymentVerifier.VerifyPaymentData calldata _verifyPaymentData\n    )\n        external \n        override\n        returns (IPaymentVerifier.PaymentVerificationResult memory)\n    {\n        require(msg.sender == escrow, \"Only escrow can call\");\n\n        // Decode witnesses from deposit data\n        (\n            address[] memory witnesses,\n            address currencyResolutionService\n        ) = abi.decode(_verifyPaymentData.depositData, (address[], address));\n\n\n        PaymentDetails memory paymentDetails = _verifyProofAndExtractValues(\n            _verifyPaymentData.paymentProof, \n            witnesses\n        );\n                \n        uint256 paymentAmount = _verifyPaymentDetails(\n            paymentDetails, \n            _verifyPaymentData\n        );\n\n        uint256 releaseAmount;\n        \n        bytes32 intentHash = bytes32(paymentDetails.intentHash.stringToUint(0));\n        bytes32 paymentCurrency = keccak256(abi.encodePacked(paymentDetails.currencyCode));\n\n        if (paymentCurrency != _verifyPaymentData.fiatCurrency) {\n            // Handle currency mismatch\n            require(currencyResolutionService != address(0), \"Incorrect payment currency\");\n            \n            bytes memory currencyResolutionData = _verifyPaymentData.data;\n            require(currencyResolutionData.length > 0, \"Currency mismatch without resolution data\");\n            \n            releaseAmount = _handleCurrencyMismatch(\n                paymentAmount,\n                paymentCurrency,\n                _verifyPaymentData.intentAmount,\n                intentHash,\n                currencyResolutionData,\n                currencyResolutionService\n            );\n        } else {\n            releaseAmount = _calculateReleaseAmount(\n                paymentAmount, \n                _verifyPaymentData.conversionRate, \n                _verifyPaymentData.intentAmount\n            );\n        }\n\n        // Nullify the payment\n        bytes32 nullifier = keccak256(abi.encodePacked(paymentDetails.paymentId));\n        _validateAndAddNullifier(nullifier);\n\n        return IPaymentVerifier.PaymentVerificationResult({\n            success: true,\n            intentHash: intentHash,\n            releaseAmount: releaseAmount,\n            paymentCurrency: paymentCurrency,\n            paymentId: paymentDetails.paymentId\n        });\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * Verifies the proof and extracts the public values from the proof and _witnesses.\n     *\n     * @param _proof The proof to verify.\n     * @param _witnesses The witnesses to verify the proof with.\n     */\n    function _verifyProofAndExtractValues(\n        bytes calldata _proof, \n        address[] memory _witnesses\n    ) \n        internal\n        view\n        returns (PaymentDetails memory paymentDetails) \n    {\n        // Decode proof\n        ReclaimProof memory proof = abi.decode(_proof, (ReclaimProof));\n\n        // claim must have at least 1 signature from witnesses\n        verifyProofSignatures(proof, _witnesses, MIN_WITNESS_SIGNATURE_REQUIRED);     \n        \n        // Extract public values\n        paymentDetails = _extractValues(proof);\n\n        // Check provider hash (Required for Reclaim proofs)\n        require(_validateProviderHash(paymentDetails.providerHash), \"No valid providerHash\");\n    }\n\n    /**\n     * Verifies the right _intentAmount * _conversionRate is paid to _payeeDetailsHash after \n     * _intentTimestamp + timestampBuffer on Venmo. Reverts if any of the conditions are not met.\n     */\n    function _verifyPaymentDetails(\n        PaymentDetails memory paymentDetails,\n        VerifyPaymentData memory _verifyPaymentData\n    ) internal view returns (uint256 paymentAmount) {\n        uint8 decimals = IERC20Metadata(_verifyPaymentData.depositToken).decimals();\n\n        // Validate amount\n        paymentAmount = paymentDetails.amountString.stringToUint(decimals);\n        require(paymentAmount > 0, \"Payment amount must be greater than zero\");\n        \n        // Validate recipient\n        require(\n            paymentDetails.recipientId.stringComparison(_verifyPaymentData.payeeDetails), \n            \"Incorrect payment recipient\"\n        );\n\n        // Validate timestamp; add in buffer to build flexibility for L2 timestamps\n        uint256 paymentTimestamp = paymentDetails.timestampString.stringToUint(0) / 1000 + timestampBuffer;\n        require(paymentTimestamp >= _verifyPaymentData.intentTimestamp, \"Incorrect payment timestamp\");\n\n        // Validate status\n        require(\n            keccak256(abi.encodePacked(paymentDetails.paymentStatus)) == COMPLETE_PAYMENT_STATUS,\n            \"Invalid payment status\"\n        );\n\n        return paymentAmount;\n    }\n\n    /**\n     * Extracts the verification data from the data. In case of a Reclaim/TLSN/ZK proof, data contains the witnesses' addresses.\n     * In case of a zkEmail proof, data contains the DKIM key hash. Can also contain additional data like currency code, etc.\n     *\n     * @param _data The data to extract the verification data from.\n     */\n    function _decodeDepositData(bytes calldata _data) internal pure returns (address[] memory witnesses) {\n        witnesses = abi.decode(_data, (address[]));\n    }\n\n    /**\n     * Handles currency mismatch scenarios by validating resolution data and calculating adjusted release amount\n     */\n    function _handleCurrencyMismatch(\n        uint256 _paymentAmount,\n        bytes32 _paymentCurrency,\n        uint256 _intentAmount,\n        bytes32 _intentHash,\n        bytes memory _currencyResolutionData,\n        address _currencyResolutionService\n    ) internal pure returns (uint256) {\n        \n        // Decode resolution data\n        CurrencyResolutionData memory resolution = abi.decode(_currencyResolutionData, (CurrencyResolutionData));\n        \n        // Verify the resolution data matches the payment currency\n        require(resolution.paymentCurrency == _paymentCurrency, \"Resolution currency doesn't match payment\");\n        require(resolution.intentHash == _intentHash, \"Resolution intent doesn't match intent\");\n        require(resolution.penaltyBps <= MAX_PENALTY_BPS, \"Penalty exceeds max allowed\");\n        \n        // Verify currency resolution service signature\n        require(\n            _verifySignature(\n                keccak256(abi.encodePacked(\n                    resolution.intentHash,\n                    resolution.paymentCurrency,\n                    resolution.conversionRate,\n                    resolution.penaltyBps\n                )), \n                resolution.signature, \n                _currencyResolutionService\n            ),\n            \"Invalid currency resolution service signature\"\n        );\n\n        // Calculate release amount with the new payment currency conversion rate\n        uint256 baseReleaseAmount = _calculateReleaseAmount(\n            _paymentAmount,\n            resolution.conversionRate,\n            _intentAmount\n        );\n\n        // Apply penalty\n        uint256 penaltyAmount = (baseReleaseAmount * resolution.penaltyBps) / PRECISION_UNIT;\n        uint256 finalReleaseAmount = baseReleaseAmount - penaltyAmount;\n        \n        return finalReleaseAmount;\n    }\n\n    /**\n     * Extracts all values from the proof context.\n     *\n     * @param _proof The proof containing the context to extract values from.\n     */\n    function _extractValues(ReclaimProof memory _proof) internal pure returns (PaymentDetails memory paymentDetails) {\n        string[] memory values = ClaimVerifier.extractAllFromContext(\n            _proof.claimInfo.context, \n            MAX_EXTRACT_VALUES, \n            true\n        );\n\n        return PaymentDetails({\n            // values[0] is ContextAddress\n            intentHash: values[1],\n            // values[2] is profileId,\n            // values[3] is transactionId,\n            paymentId: values[4],\n            paymentStatus: values[5],\n            amountString: values[6],\n            currencyCode: values[7],\n            recipientId: values[8],\n            timestampString: values[9],\n            providerHash: values[10]\n        });\n    }\n\n    /**\n     * Verifies signature for currency resolution\n     */\n    function _verifySignature(\n        bytes32 _messageHash,\n        bytes memory _signature,\n        address _signer\n    ) internal pure returns (bool) {\n        bytes32 ethSignedMessageHash = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash)\n        );\n        \n        address recoveredSigner = ECDSA.recover(ethSignedMessageHash, _signature);\n        return recoveredSigner == _signer;\n    }\n}\n"
    },
    "contracts/verifiers/ZelleBaseVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport { DateParsing } from \"../lib/DateParsing.sol\";\nimport { ClaimVerifier } from \"../lib/ClaimVerifier.sol\";\nimport { StringConversionUtils } from \"../lib/StringConversionUtils.sol\";\nimport { Bytes32ConversionUtils } from \"../lib/Bytes32ConversionUtils.sol\";\n\nimport { BasePaymentVerifier } from \"./BaseVerifiers/BasePaymentVerifier.sol\";\nimport { INullifierRegistry } from \"../interfaces/INullifierRegistry.sol\";\nimport { IPaymentVerifier } from \"./interfaces/IPaymentVerifier.sol\";\nimport { IReclaimVerifier } from \"./interfaces/IReclaimVerifier.sol\";\n\npragma solidity ^0.8.18;\n\n/*\n * @notice ZelleBaseVerifier is a base contract for verifying Zelle payments. The Zelle payment method is a \n * collection of different payment methods, each with their own verification logic. This verifier is added \n * to Escrow by sellers who want to receive Zelle payments. It manages currencies (only USD) and payment method \n * to verifier mappings and DELEGATES VERIFICATION to the appropriate verifier based on the payment method.\n */\ncontract ZelleBaseVerifier is IPaymentVerifier, BasePaymentVerifier {\n\n    /* ============ Events ============ */  \n    \n    event PaymentMethodVerifierSet(uint8 paymentMethod, address verifier);\n    event PaymentMethodVerifierRemoved(uint8 paymentMethod);\n\n    /* ============ State Variables ============ */\n    \n    mapping(uint8 => address) public paymentMethodToVerifier;\n    \n    /* ============ Constructor ============ */\n    constructor(\n        address _escrow,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies\n    )   \n        BasePaymentVerifier(\n            _escrow, \n            _nullifierRegistry, \n            _timestampBuffer, \n            _currencies\n        )\n    { }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY RAMP: Verifies a reclaim proof of an offchain Zelle payment. Because Zelle supports multiple payment methods \n     * (each with their own verification logic), the _verifyPaymentData.paymentProof field should contain the payment method.\n     * Payment method should be encodePacked with the payment proof. We chose this over encoding it as (uint8, bytes) because\n     * computation is cheaper on L2 than calldata.\n     *\n     * @param _verifyPaymentData Payment proof, intent details, and payment method required for verification\n     * @return result The payment verification result containing success status, intent hash, release amount, payment currency and payment ID\n     */\n    function verifyPayment(\n        IPaymentVerifier.VerifyPaymentData calldata _verifyPaymentData\n    )\n        external\n        override\n        returns (IPaymentVerifier.PaymentVerificationResult memory)\n    {\n        require(msg.sender == escrow, \"Only escrow can call\");\n\n        bytes calldata rawPaymentProofFromCalldata = _verifyPaymentData.paymentProof;\n        require(rawPaymentProofFromCalldata.length > 1, \"Invalid paymentProof length\");\n\n        // Extract the first byte as paymentMethod directly from calldata\n        uint8 paymentMethod = uint8(rawPaymentProofFromCalldata[0]);\n\n        // Use calldata array slicing [start:end] syntax - NO copying needed!\n        // This creates a view/reference to the original data, avoiding gas-expensive copying\n        bytes calldata actualProofSlice = rawPaymentProofFromCalldata[1:];\n\n        address verifier = paymentMethodToVerifier[paymentMethod];\n        require(verifier != address(0), \"Verifier not set\");\n\n        return IPaymentVerifier(verifier).verifyPayment(\n            IPaymentVerifier.VerifyPaymentData({\n                paymentProof: actualProofSlice,\n                depositToken: _verifyPaymentData.depositToken,\n                intentAmount: _verifyPaymentData.intentAmount,\n                intentTimestamp: _verifyPaymentData.intentTimestamp,\n                payeeDetails: _verifyPaymentData.payeeDetails,\n                fiatCurrency: _verifyPaymentData.fiatCurrency,\n                conversionRate: _verifyPaymentData.conversionRate,\n                depositData: _verifyPaymentData.depositData,\n                data: bytes(\"\")\n            })\n        );\n    }\n\n    /* ============ Governance Functions ============ */\n\n    /**\n     * @notice ONLY OWNER: Sets the verifier for a payment method.\n     * @param _paymentMethod The payment method to set the verifier for.\n     * @param _verifier The address of the verifier to set.\n     */\n    function setPaymentMethodVerifier(uint8 _paymentMethod, address _verifier) external onlyOwner {\n        require(_verifier != address(0), \"Invalid verifier address\");\n\n        paymentMethodToVerifier[_paymentMethod] = _verifier;\n        emit PaymentMethodVerifierSet(_paymentMethod, _verifier);\n    }\n\n    /**\n     * @notice ONLY OWNER: Removes the verifier for a payment method.\n     * @param _paymentMethod The payment method to remove the verifier for.\n     */\n    function removePaymentMethodVerifier(uint8 _paymentMethod) external onlyOwner {\n        require(paymentMethodToVerifier[_paymentMethod] != address(0), \"Verifier not set\");\n\n        delete paymentMethodToVerifier[_paymentMethod];\n        emit PaymentMethodVerifierRemoved(_paymentMethod);\n    }    \n}\n"
    },
    "contracts/verifiers/ZelleVerifiers/ZelleBoAReclaimVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport { DateParsing } from \"../../lib/DateParsing.sol\";\nimport { ClaimVerifier } from \"../../lib/ClaimVerifier.sol\";\nimport { StringConversionUtils } from \"../../lib/StringConversionUtils.sol\";\n\nimport { IBasePaymentVerifier } from \"../interfaces/IBasePaymentVerifier.sol\";\nimport { BaseReclaimVerifier } from \"../BaseVerifiers/BaseReclaimVerifier.sol\";\nimport { INullifierRegistry } from \"../../interfaces/INullifierRegistry.sol\";\nimport { IPaymentVerifier } from \"../interfaces/IPaymentVerifier.sol\";\n\npragma solidity ^0.8.18;\n\n\ncontract ZelleBoAReclaimVerifier is IPaymentVerifier, BaseReclaimVerifier {\n\n    using StringConversionUtils for string;\n    \n    /* ============ Structs ============ */\n\n    // Struct to hold the payment details extracted from the proof\n    struct PaymentDetails {\n        string amountString;\n        string transactionDate;\n        string confirmationNumber;\n        string status;\n        string aliasToken;\n        string intentHash;\n        string providerHash;\n    }\n\n    /* ============ Constants ============ */\n    \n    uint8 internal constant MAX_EXTRACT_VALUES = 8; \n    uint8 internal constant MIN_WITNESS_SIGNATURE_REQUIRED = 1;\n    bytes32 public constant COMPLETED_STATUS = keccak256(abi.encodePacked(\"COMPLETED\"));\n\n    /* ============ State Variables ============ */\n    address public immutable baseVerifier;\n    INullifierRegistry public nullifierRegistry;\n    uint256 public timestampBuffer;\n\n    /* ============ Events ============ */\n    event TimestampBufferSet(uint256 newTimestampBuffer);\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _baseVerifier,\n        INullifierRegistry _nullifierRegistry,\n        string[] memory _providerHashes,\n        uint256 _timestampBuffer\n    )   \n        BaseReclaimVerifier(\n            _providerHashes\n        )\n    {\n        baseVerifier = _baseVerifier;\n        nullifierRegistry = INullifierRegistry(_nullifierRegistry);\n        timestampBuffer = _timestampBuffer;\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY RAMP: Verifies a reclaim proof of an offchain Bank of America Zelle payment. Ensures the right _intentAmount * _conversionRate\n     * USD was paid to _aliasToken after _intentTimestamp + timestampBuffer on Bank of America Zelle.\n     * Note: For Bank of America Zelle fiat currency is always USD. For other verifiers which support multiple currencies,\n     * _fiatCurrency needs to be checked against the fiat currency in the proof.\n     *\n     * @param _verifyPaymentData Payment proof and intent details required for verification\n     * @return result The payment verification result containing success status, intent hash, release amount, payment currency and payment ID\n     */\n    function verifyPayment(\n        IPaymentVerifier.VerifyPaymentData calldata _verifyPaymentData\n    )\n        external \n        override\n        returns (IPaymentVerifier.PaymentVerificationResult memory)\n    {\n        require(msg.sender == baseVerifier, \"Only base verifier can call\");\n\n        PaymentDetails memory paymentDetails = _verifyProofAndExtractValues(_verifyPaymentData.paymentProof, _verifyPaymentData.depositData);\n                \n        uint256 paymentAmount = _verifyPaymentDetails(\n            paymentDetails, \n            _verifyPaymentData\n        );\n\n        uint256 releaseAmount = _calculateReleaseAmount(\n            paymentAmount, \n            _verifyPaymentData.conversionRate, \n            _verifyPaymentData.intentAmount\n        );\n\n        // Nullify the payment\n        _validateAndAddNullifier(keccak256(abi.encodePacked(paymentDetails.confirmationNumber)));\n\n        return IPaymentVerifier.PaymentVerificationResult({\n            success: true,\n            intentHash: bytes32(paymentDetails.intentHash.stringToUint(0)),\n            releaseAmount: releaseAmount,\n            paymentCurrency: _verifyPaymentData.fiatCurrency, // Zelle only supports USD\n            paymentId: paymentDetails.confirmationNumber\n        });\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * Verifies the proof and extracts the public values from the proof and _depositData.\n     *\n     * @param _proof The proof to verify.\n     * @param _depositData The deposit data to extract the verification data from.\n     */\n    function _verifyProofAndExtractValues(bytes calldata _proof, bytes calldata _depositData) \n        internal\n        view\n        returns (PaymentDetails memory paymentDetails) \n    {\n        // Decode proof\n        ReclaimProof memory proof = abi.decode(_proof, (ReclaimProof));\n\n        // Extract verification data\n        address[] memory witnesses = _decodeDepositData(_depositData);\n\n        verifyProofSignatures(proof, witnesses, MIN_WITNESS_SIGNATURE_REQUIRED);     // claim must have at least 1 signature from witnesses\n        \n        // Extract public values\n        paymentDetails = _extractValues(proof);\n\n        // Check provider hash (Required for Reclaim proofs)\n        require(_validateProviderHash(paymentDetails.providerHash), \"No valid providerHash\");\n    }\n\n    /**\n     * Verifies the right _intentAmount * _conversionRate is paid to hashed _aliasToken after \n     * _intentTimestamp + timestampBuffer on Zelle. Reverts if any of the conditions are not met.\n     */\n    function _verifyPaymentDetails(\n        PaymentDetails memory paymentDetails,\n        VerifyPaymentData memory _verifyPaymentData\n    ) internal view returns (uint256) {\n        uint8 decimals = IERC20Metadata(_verifyPaymentData.depositToken).decimals();\n\n        // Validate amount\n        uint256 paymentAmount = paymentDetails.amountString.stringToUint(decimals);\n        require(paymentAmount > 0, \"Payment amount must be greater than zero\");\n        \n        // Validate recipient\n        require(\n            paymentDetails.aliasToken.stringComparison(_verifyPaymentData.payeeDetails), \n            \"Incorrect payment recipient\"\n        );\n\n        // Validate timestamp; add in buffer to build flexibility for L2 timestamps\n        // Append T23:59:59 to the date string to capture end of day because Zelle only shows day precision\n        uint256 paymentTimestamp = DateParsing._dateStringToTimestamp(\n            string.concat(paymentDetails.transactionDate, \"T23:59:59\")\n        ) + timestampBuffer;\n        require(paymentTimestamp >= _verifyPaymentData.intentTimestamp, \"Incorrect payment timestamp\");\n\n        // Validate status\n        require(\n            keccak256(abi.encodePacked(paymentDetails.status)) == COMPLETED_STATUS,\n            \"Payment not completed\"\n        );\n\n        return paymentAmount;\n    }\n\n    /**\n     * Extracts the verification data from the data. In case of a Reclaim/TLSN/ZK proof, data contains the witnesses' addresses.\n     * In case of a zkEmail proof, data contains the DKIM key hash. Can also contain additional data like currency code, etc.\n     *\n     * @param _data The data to extract the verification data from.\n     */\n    function _decodeDepositData(bytes calldata _data) internal pure returns (address[] memory witnesses) {\n        witnesses = abi.decode(_data, (address[]));\n    }\n\n    /**\n     * Extracts all values from the proof context.\n     *\n     * @param _proof The proof containing the context to extract values from.\n     */\n    function _extractValues(ReclaimProof memory _proof) internal pure returns (PaymentDetails memory paymentDetails) {\n        string[] memory values = ClaimVerifier.extractAllFromContext(\n            _proof.claimInfo.context, \n            MAX_EXTRACT_VALUES, \n            true\n        );\n\n        return PaymentDetails({\n            // values[0] is ContextAddress\n            intentHash: values[1],\n            aliasToken: values[2],\n            amountString: values[3],\n            confirmationNumber: values[4],\n            status: values[5],\n            transactionDate: values[6],\n            providerHash: values[7]\n        });\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\n        require(!nullifierRegistry.isNullified(_nullifier), \"Nullifier has already been used\");\n        nullifierRegistry.addNullifier(_nullifier);\n    }\n\n    /* ============ Owner Functions ============ */\n\n    /**\n     * @notice OWNER ONLY: Sets the timestamp buffer for payments. This is the amount of time in seconds\n     * that the timestamp can be off by and still be considered valid. Necessary to build in flexibility \n     * with L2 timestamps.\n     *\n     * @param _timestampBuffer    The timestamp buffer for payments\n     */\n    function setTimestampBuffer(uint256 _timestampBuffer) external onlyOwner {\n        timestampBuffer = _timestampBuffer;\n        emit TimestampBufferSet(_timestampBuffer);\n    }\n}\n"
    },
    "contracts/verifiers/ZelleVerifiers/ZelleChaseReclaimVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport { DateParsing } from \"../../lib/DateParsing.sol\";\nimport { ClaimVerifier } from \"../../lib/ClaimVerifier.sol\";\nimport { StringConversionUtils } from \"../../lib/StringConversionUtils.sol\";\nimport { Bytes32ConversionUtils } from \"../../lib/Bytes32ConversionUtils.sol\";\n\nimport { IBasePaymentVerifier } from \"../interfaces/IBasePaymentVerifier.sol\";\nimport { INullifierRegistry } from \"../../interfaces/INullifierRegistry.sol\";\nimport { IPaymentVerifier } from \"../interfaces/IPaymentVerifier.sol\";\n\nimport { BaseReclaimVerifier } from \"../BaseVerifiers/BaseReclaimVerifier.sol\";\n\npragma solidity ^0.8.18;\n\ncontract ZelleChaseReclaimVerifier is IPaymentVerifier, BaseReclaimVerifier {\n    using StringConversionUtils for string;\n    using Bytes32ConversionUtils for bytes32;\n\n    struct PaymentDetails {\n        string amountString;\n        string transactionDate;\n        string paymentId;\n        string status;\n        string recipientEmail;\n        string intentHash;\n    }\n\n    uint8 internal constant MAX_EXTRACT_VALUES_LIST = 7;    // for list proof\n    uint8 internal constant MAX_EXTRACT_VALUES_DETAIL = 5;  // for detail proof\n    uint8 internal constant MIN_WITNESS_SIGNATURE_REQUIRED = 1;\n    bytes32 public constant COMPLETED_STATUS = keccak256(abi.encodePacked(\"COMPLETED\"));\n    bytes32 public constant DELIVERED_STATUS = keccak256(abi.encodePacked(\"DELIVERED\"));\n\n    /* ============ State Variables ============ */\n\n    address public immutable baseVerifier;\n    INullifierRegistry public nullifierRegistry;\n    uint256 public timestampBuffer;\n\n    /* ============ Events ============ */\n    event TimestampBufferSet(uint256 newTimestampBuffer);\n\n    constructor(\n        address _baseVerifier,\n        INullifierRegistry _nullifierRegistry,\n        string[] memory _providerHashes,\n        uint256 _timestampBuffer\n    )\n        BaseReclaimVerifier(\n            _providerHashes\n        )\n    { \n        baseVerifier = _baseVerifier;\n        nullifierRegistry = INullifierRegistry(_nullifierRegistry);\n        timestampBuffer = _timestampBuffer;\n    }\n\n    /**\n     * Verifies two Reclaim proofs for a Chase Zelle payment.\n     * @param _verifyPaymentData Payment proof and intent details required for verification\n     * @return result The payment verification result containing success status, intent hash, release amount, payment currency and payment ID\n     */\n    function verifyPayment(\n        IPaymentVerifier.VerifyPaymentData calldata _verifyPaymentData\n    )\n        external\n        override\n        returns (IPaymentVerifier.PaymentVerificationResult memory)\n    {\n        require(msg.sender == baseVerifier, \"Only base verifier can call\");\n\n        (\n            PaymentDetails memory paymentDetails\n        ) = _verifyProofsAndExtractValues(_verifyPaymentData.paymentProof, _verifyPaymentData.depositData);\n\n        uint256 paymentAmount = _verifyPaymentDetails(\n            paymentDetails,\n            _verifyPaymentData\n        );\n\n        uint256 releaseAmount = _calculateReleaseAmount(\n            paymentAmount, \n            _verifyPaymentData.conversionRate, \n            _verifyPaymentData.intentAmount\n        );\n\n        // Nullify the payment\n        _validateAndAddNullifier(keccak256(abi.encodePacked(paymentDetails.paymentId)));\n\n        return IPaymentVerifier.PaymentVerificationResult({\n            success: true,\n            intentHash: bytes32(paymentDetails.intentHash.stringToUint(0)),\n            releaseAmount: releaseAmount,\n            paymentCurrency: _verifyPaymentData.fiatCurrency, // Zelle only supports USD\n            paymentId: paymentDetails.paymentId\n        });\n    }\n\n    function _verifyProofsAndExtractValues(bytes calldata _proofs, bytes calldata _depositData)\n        internal\n        view\n        returns (PaymentDetails memory paymentDetails)\n    {\n        // Expect _proofs to be abi.encode(proofList, proofDetail)\n        (ReclaimProof memory proofList, ReclaimProof memory proofDetail) = abi.decode(_proofs, (ReclaimProof, ReclaimProof));\n        address[] memory witnesses = _decodeDepositData(_depositData);\n\n        verifyProofSignatures(proofList, witnesses, MIN_WITNESS_SIGNATURE_REQUIRED);\n        verifyProofSignatures(proofDetail, witnesses, MIN_WITNESS_SIGNATURE_REQUIRED);\n\n        // Extract values from both proofs using the correct max values\n        string[] memory paymentContextList = ClaimVerifier.extractAllFromContext(\n            proofList.claimInfo.context,\n            MAX_EXTRACT_VALUES_LIST,\n            true\n        );\n        string[] memory paymentContextDetail = ClaimVerifier.extractAllFromContext(\n            proofDetail.claimInfo.context,\n            MAX_EXTRACT_VALUES_DETAIL,\n            true\n        );\n\n        // Extract fields from first proof (list)\n        // paymentContextList[0] = contextAddress\n        // paymentContextList[1] = intentHash\n        // paymentContextList[2] = amount\n        // paymentContextList[3] = date\n        // paymentContextList[4] = id\n        // paymentContextList[5] = status\n        // paymentContextList[6] = providerHash\n        string memory paymentIdList = paymentContextList[4];\n        string memory providerHashList = paymentContextList[6];\n\n        // Extract fields from second proof (detail)\n        // paymentContextDetail[0] = contextAddress\n        // paymentContextDetail[1] = intentHash\n        // paymentContextDetail[2] = PAYMENT_ID\n        // paymentContextDetail[3] = recipientEmail\n        // paymentContextDetail[4] = providerHash\n        string memory paymentIdDetail = paymentContextDetail[2];\n        string memory providerHashDetail = paymentContextDetail[4];\n\n        // Check provider hashes\n        require(_validateProviderHash(providerHashList), \"No valid providerHashList\");\n        require(_validateProviderHash(providerHashDetail), \"No valid providerHashDetail\");\n\n        // Check payment ID linkage\n        require(\n            keccak256(abi.encodePacked(paymentIdList)) == keccak256(abi.encodePacked(paymentIdDetail)),\n            \"Payment IDs do not match\"\n        );\n\n        // Compose PaymentDetails\n        paymentDetails = PaymentDetails({\n            amountString: paymentContextList[2],\n            transactionDate: paymentContextList[3],\n            paymentId: paymentIdList, // paymentId from first proof\n            status: paymentContextList[5],\n            recipientEmail: paymentContextDetail[3],\n            intentHash: paymentContextList[1] // intentHash from first proof\n        });\n    }\n\n    function _verifyPaymentDetails(\n        PaymentDetails memory paymentDetails,\n        VerifyPaymentData memory _verifyPaymentData\n    ) internal view returns (uint256) {\n        uint8 decimals = IERC20Metadata(_verifyPaymentData.depositToken).decimals();\n\n        // Validate amount\n        uint256 paymentAmount = paymentDetails.amountString.stringToUint(decimals);\n        require(paymentAmount > 0, \"Payment amount must be greater than zero\");\n\n        // Validate recipient (recipientEmail is a hash, so compare as string)\n        require(\n            paymentDetails.recipientEmail.stringComparison(_verifyPaymentData.payeeDetails),\n            \"Incorrect payment recipient\"\n        );\n\n        // Validate timestamp; convert chase date string from YYYYMMDD to YYYY-MM-DD\n        string memory paymentDate = _addHyphensToDateString(paymentDetails.transactionDate);\n        uint256 paymentTimestamp = DateParsing._dateStringToTimestamp(\n            string.concat(paymentDate, \"T23:59:59\")\n        ) + timestampBuffer;\n        require(paymentTimestamp >= _verifyPaymentData.intentTimestamp, \"Incorrect payment timestamp\");\n\n        // Validate status\n        require(\n            keccak256(abi.encodePacked(paymentDetails.status)) == COMPLETED_STATUS ||\n            keccak256(abi.encodePacked(paymentDetails.status)) == DELIVERED_STATUS,\n            \"Payment not completed or delivered\"\n        );\n\n        return paymentAmount;\n    }\n\n    function _decodeDepositData(bytes calldata _data) internal pure returns (address[] memory witnesses) {\n        witnesses = abi.decode(_data, (address[]));\n    }\n\n    function _addHyphensToDateString(string memory yyyymmdd) internal pure returns (string memory yyyymmddWithHyphens) {\n        bytes memory dateBytes = bytes(yyyymmdd);\n        yyyymmddWithHyphens = string(abi.encodePacked(\n            bytes1(dateBytes[0]),\n            bytes1(dateBytes[1]),\n            bytes1(dateBytes[2]),\n            bytes1(dateBytes[3]),\n            \"-\",\n            bytes1(dateBytes[4]),\n            bytes1(dateBytes[5]),\n            \"-\",\n            bytes1(dateBytes[6]),\n            bytes1(dateBytes[7])\n        ));\n    }\n\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\n        require(!nullifierRegistry.isNullified(_nullifier), \"Nullifier has already been used\");\n        nullifierRegistry.addNullifier(_nullifier);\n    }\n\n    /* ============ Owner Functions ============ */\n\n    /**\n     * @notice OWNER ONLY: Sets the timestamp buffer for payments. This is the amount of time in seconds\n     * that the timestamp can be off by and still be considered valid. Necessary to build in flexibility \n     * with L2 timestamps.\n     *\n     * @param _timestampBuffer    The timestamp buffer for payments\n     */\n    function setTimestampBuffer(uint256 _timestampBuffer) external onlyOwner {\n        timestampBuffer = _timestampBuffer;\n        emit TimestampBufferSet(_timestampBuffer);\n    }\n}\n"
    },
    "contracts/verifiers/ZelleVerifiers/ZelleCitiReclaimVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport { DateParsing } from \"../../lib/DateParsing.sol\";\nimport { ClaimVerifier } from \"../../lib/ClaimVerifier.sol\";\nimport { StringConversionUtils } from \"../../lib/StringConversionUtils.sol\";\n\nimport { IBasePaymentVerifier } from \"../interfaces/IBasePaymentVerifier.sol\";\nimport { INullifierRegistry } from \"../../interfaces/INullifierRegistry.sol\";\nimport { IPaymentVerifier } from \"../interfaces/IPaymentVerifier.sol\";\n\nimport { BaseReclaimVerifier } from \"../BaseVerifiers/BaseReclaimVerifier.sol\";\n\npragma solidity ^0.8.18;\n\ncontract ZelleCitiReclaimVerifier is IPaymentVerifier, BaseReclaimVerifier {\n\n    using StringConversionUtils for string;\n    \n    /* ============ Structs ============ */\n\n    // Struct to hold the payment details extracted from the proof\n    struct PaymentDetails {\n        string amountString;\n        string transactionDate;\n        string paymentId;\n        string status;\n        string partyToken;\n        string intentHash;\n        string providerHash;\n    }\n\n    /* ============ Constants ============ */\n    \n    uint8 internal constant MAX_EXTRACT_VALUES = 8; \n    uint8 internal constant MIN_WITNESS_SIGNATURE_REQUIRED = 1;\n    bytes32 public constant DELIVERED_STATUS = keccak256(abi.encodePacked(\"DELIVERED\"));\n\n    /* ============ State Variables ============ */\n\n    address public immutable baseVerifier;\n    INullifierRegistry public nullifierRegistry;\n    uint256 public timestampBuffer;\n    \n    /* ============ Events ============ */\n    event TimestampBufferSet(uint256 newTimestampBuffer);\n    \n    /* ============ Constructor ============ */\n    constructor(\n        address _baseVerifier,\n        INullifierRegistry _nullifierRegistry,\n        string[] memory _providerHashes,\n        uint256 _timestampBuffer\n    )   \n        BaseReclaimVerifier(\n            _providerHashes\n        )\n    { \n        baseVerifier = _baseVerifier;\n        nullifierRegistry = INullifierRegistry(_nullifierRegistry);\n        timestampBuffer = _timestampBuffer;\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY RAMP: Verifies a reclaim proof of an offchain Citi Zelle payment. Ensures the right _intentAmount * _conversionRate\n     * USD was paid to _partyToken after _intentTimestamp + timestampBuffer on Citi Zelle.\n     * Note: For Citi Zelle fiat currency is always USD. For other verifiers which support multiple currencies,\n     * _fiatCurrency needs to be checked against the fiat currency in the proof.\n     *\n     * @param _verifyPaymentData Payment proof and intent details required for verification\n     * @return result The payment verification result containing success status, intent hash, release amount, payment currency and payment ID\n     */\n    function verifyPayment(\n        IPaymentVerifier.VerifyPaymentData calldata _verifyPaymentData\n    )\n        external \n        override\n        returns (IPaymentVerifier.PaymentVerificationResult memory)\n    {\n        require(msg.sender == baseVerifier, \"Only base verifier can call\");\n\n        PaymentDetails memory paymentDetails = _verifyProofAndExtractValues(_verifyPaymentData.paymentProof, _verifyPaymentData.depositData);\n                \n        uint256 paymentAmount = _verifyPaymentDetails(\n            paymentDetails, \n            _verifyPaymentData\n        );\n\n        uint256 releaseAmount = _calculateReleaseAmount(\n            paymentAmount, \n            _verifyPaymentData.conversionRate, \n            _verifyPaymentData.intentAmount\n        );\n\n        // Nullify the payment\n        _validateAndAddNullifier(keccak256(abi.encodePacked(paymentDetails.paymentId)));\n\n        return IPaymentVerifier.PaymentVerificationResult({\n            success: true,\n            intentHash: bytes32(paymentDetails.intentHash.stringToUint(0)),\n            releaseAmount: releaseAmount,\n            paymentCurrency: _verifyPaymentData.fiatCurrency, // Zelle only supports USD\n            paymentId: paymentDetails.paymentId\n        });\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _verifyProofAndExtractValues(bytes calldata _proof, bytes calldata _depositData) \n        internal\n        view\n        returns (PaymentDetails memory paymentDetails) \n    {\n        // Decode proof\n        ReclaimProof memory proof = abi.decode(_proof, (ReclaimProof));\n\n        // Extract verification data\n        address[] memory witnesses = _decodeDepositData(_depositData);\n\n        verifyProofSignatures(proof, witnesses, MIN_WITNESS_SIGNATURE_REQUIRED);     // claim must have at least 1 signature from witnesses\n        \n        // Extract public values\n        paymentDetails = _extractValues(proof);\n\n        // Check provider hash (Required for Reclaim proofs)\n        require(_validateProviderHash(paymentDetails.providerHash), \"No valid providerHash\");\n    }\n\n    function _verifyPaymentDetails(\n        PaymentDetails memory paymentDetails,\n        VerifyPaymentData memory _verifyPaymentData\n    ) internal view returns (uint256) {\n        uint8 decimals = IERC20Metadata(_verifyPaymentData.depositToken).decimals();\n\n        // Validate amount\n        uint256 paymentAmount = paymentDetails.amountString.stringToUint(decimals);\n        require(paymentAmount > 0, \"Payment amount must be greater than zero\");\n        \n        // Validate recipient\n        require(\n            paymentDetails.partyToken.stringComparison(_verifyPaymentData.payeeDetails), \n            \"Incorrect payment recipient\"\n        );\n\n        // Validate timestamp; add in buffer to build flexibility for L2 timestamps\n        // Append T23:59:59 to the date string to capture end of day because Zelle only shows day precision\n        // Note: Citi date format is MM/DD/YYYY, need to convert to YYYY-MM-DD\n        string memory formattedDate = _convertDateFormat(paymentDetails.transactionDate);\n        uint256 paymentTimestamp = DateParsing._dateStringToTimestamp(\n            string.concat(formattedDate, \"T23:59:59\")\n        ) + timestampBuffer;\n        require(paymentTimestamp >= _verifyPaymentData.intentTimestamp, \"Incorrect payment timestamp\");\n\n        // Validate status\n        require(\n            keccak256(abi.encodePacked(paymentDetails.status)) == DELIVERED_STATUS,\n            \"Payment not delivered\"\n        );\n\n        return paymentAmount;\n    }\n\n    function _decodeDepositData(bytes calldata _data) internal pure returns (address[] memory witnesses) {\n        witnesses = abi.decode(_data, (address[]));\n    }\n\n    function _extractValues(ReclaimProof memory _proof) internal pure returns (PaymentDetails memory paymentDetails) {\n        string[] memory values = ClaimVerifier.extractAllFromContext(\n            _proof.claimInfo.context, \n            MAX_EXTRACT_VALUES, \n            true\n        );\n\n        return PaymentDetails({\n            // values[0] is ContextAddress\n            intentHash: values[1],\n            amountString: values[2],\n            partyToken: values[3],\n            paymentId: values[4],\n            status: values[5],\n            transactionDate: values[6],\n            providerHash: values[7]\n        });\n    }\n\n    function _convertDateFormat(string memory mmddyyyy) internal pure returns (string memory) {\n        // Convert MM/DD/YYYY to YYYY-MM-DD\n        // Input format: \"04/28/2025\"\n        // Output format: \"2025-04-28\"\n        \n        bytes memory dateBytes = bytes(mmddyyyy);\n        require(dateBytes.length == 10, \"Invalid date format\");\n        \n        // Pre-allocate memory for the result\n        bytes memory result = new bytes(10);\n        \n        // Copy year\n        result[0] = dateBytes[6];\n        result[1] = dateBytes[7];\n        result[2] = dateBytes[8];\n        result[3] = dateBytes[9];\n        result[4] = '-';\n        // Copy month\n        result[5] = dateBytes[0];\n        result[6] = dateBytes[1];\n        result[7] = '-';\n        // Copy day\n        result[8] = dateBytes[3];\n        result[9] = dateBytes[4];\n        \n        return string(result);\n    }\n\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\n        require(!nullifierRegistry.isNullified(_nullifier), \"Nullifier has already been used\");\n        nullifierRegistry.addNullifier(_nullifier);\n    }\n\n    /* ============ Owner Functions ============ */\n\n    /**\n     * @notice OWNER ONLY: Sets the timestamp buffer for payments. This is the amount of time in seconds\n     * that the timestamp can be off by and still be considered valid. Necessary to build in flexibility \n     * with L2 timestamps.\n     *\n     * @param _timestampBuffer    The timestamp buffer for payments\n     */\n    function setTimestampBuffer(uint256 _timestampBuffer) external onlyOwner {\n        timestampBuffer = _timestampBuffer;\n        emit TimestampBufferSet(_timestampBuffer);\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\t/// @solidity memory-safe-assembly\n\t\tassembly {\n\t\t\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}