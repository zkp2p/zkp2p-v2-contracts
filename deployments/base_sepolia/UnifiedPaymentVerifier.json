{
  "address": "0xA22aE87e99d614e6e04d787c67C609E24F223F6C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IOrchestrator",
          "name": "_orchestrator",
          "type": "address"
        },
        {
          "internalType": "contract INullifierRegistry",
          "name": "_nullifierRegistry",
          "type": "address"
        },
        {
          "internalType": "contract IAttestationVerifier",
          "name": "_attestationVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldVerifier",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newVerifier",
          "type": "address"
        }
      ],
      "name": "AttestationVerifierUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "PaymentMethodAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "PaymentMethodRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "method",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "paymentId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "payeeId",
          "type": "bytes32"
        }
      ],
      "name": "PaymentVerified",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "addPaymentMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attestationVerifier",
      "outputs": [
        {
          "internalType": "contract IAttestationVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentMethods",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isPaymentMethod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nullifierRegistry",
      "outputs": [
        {
          "internalType": "contract INullifierRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orchestrator",
      "outputs": [
        {
          "internalType": "contract IOrchestrator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paymentMethods",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "removePaymentMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newVerifier",
          "type": "address"
        }
      ],
      "name": "setAttestationVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "intentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "paymentProof",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPaymentVerifier.VerifyPaymentData",
          "name": "_verifyPaymentData",
          "type": "tuple"
        }
      ],
      "name": "verifyPayment",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "intentHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "releaseAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPaymentVerifier.PaymentVerificationResult",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7a0ce6229098951e453fd46db1d3af513d4b485361632e8c0cb342b837503d5",
  "receipt": {
    "to": null,
    "from": "0x84e113087C97Cd80eA9D78983D4B8Ff61ECa1929",
    "contractAddress": "0xA22aE87e99d614e6e04d787c67C609E24F223F6C",
    "transactionIndex": 16,
    "gasUsed": "1603695",
    "logsBloom": "0x
    "blockHash": "0xefd0be03975037fc44536c88f31acdc06d05f139d430941721645026e19537e6",
    "transactionHash": "0xa7a0ce6229098951e453fd46db1d3af513d4b485361632e8c0cb342b837503d5",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 31720087,
        "transactionHash": "0xa7a0ce6229098951e453fd46db1d3af513d4b485361632e8c0cb342b837503d5",
        "address": "0xA22aE87e99d614e6e04d787c67C609E24F223F6C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929"
        ],
        "data": "0x",
        "logIndex": 76,
        "blockHash": "0xefd0be03975037fc44536c88f31acdc06d05f139d430941721645026e19537e6"
      }
    ],
    "blockNumber": 31720087,
    "cumulativeGasUsed": "5489212",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7D563c65456deF11c1Fdb9510eB745D5a780F5Fd",
    "0xE0980FFdC868B69484C78A4B213E2C1Fa5AE70Cb",
    "0x2Db1d6E0d7711b2AaC2918FE84270CfF84958dfA"
  ],
  "numDeployments": 1,
  "solcInputHash": "366cc6acda7f902cd6fbd6493fd5cd50",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IOrchestrator\",\"name\":\"_orchestrator\",\"type\":\"address\"},{\"internalType\":\"contract INullifierRegistry\",\"name\":\"_nullifierRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IAttestationVerifier\",\"name\":\"_attestationVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldVerifier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newVerifier\",\"type\":\"address\"}],\"name\":\"AttestationVerifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"PaymentMethodAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"PaymentMethodRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"method\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payeeId\",\"type\":\"bytes32\"}],\"name\":\"PaymentVerified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"addPaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attestationVerifier\",\"outputs\":[{\"internalType\":\"contract IAttestationVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentMethods\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isPaymentMethod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nullifierRegistry\",\"outputs\":[{\"internalType\":\"contract INullifierRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orchestrator\",\"outputs\":[{\"internalType\":\"contract IOrchestrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentMethods\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"removePaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newVerifier\",\"type\":\"address\"}],\"name\":\"setAttestationVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymentProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IPaymentVerifier.VerifyPaymentData\",\"name\":\"_verifyPaymentData\",\"type\":\"tuple\"}],\"name\":\"verifyPayment\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaymentVerifier.PaymentVerificationResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The payment attestation should be signed using the EIP-712 standard\",\"kind\":\"dev\",\"methods\":{\"addPaymentMethod(bytes32)\":{\"params\":{\"_paymentMethod\":\"The payment method hash; Hash the payment method name in lowercase\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removePaymentMethod(bytes32)\":{\"params\":{\"_paymentMethod\":\"The payment method to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAttestationVerifier(address)\":{\"params\":{\"_newVerifier\":\"The new attestation verifier address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyPayment((bytes32,bytes,bytes))\":{\"details\":\"Ensure the orchestrator verifies the intent exists before calling this function\",\"params\":{\"_verifyPaymentData\":\"Payment proof and intent details required for verification\"},\"returns\":{\"result\":\"The payment verification result containing success status, intent hash, and release amount\"}}},\"title\":\"UnifiedPaymentVerifier\",\"version\":1},\"userdoc\":{\"events\":{\"PaymentVerified(bytes32,bytes32,bytes32,uint256,uint256,bytes32,bytes32)\":{\"notice\":\"Capture and emit payment details for offchain reconciliation\"}},\"kind\":\"user\",\"methods\":{\"addPaymentMethod(bytes32)\":{\"notice\":\"ONLY OWNER: Adds a new payment method with timestamp buffer\"},\"removePaymentMethod(bytes32)\":{\"notice\":\"ONLY OWNER: Removes a payment method and associated configuration\"},\"setAttestationVerifier(address)\":{\"notice\":\"Updates the attestation verifier contract\"},\"verifyPayment((bytes32,bytes,bytes))\":{\"notice\":\"ONLY ORCHESTRATOR: Verifies a standardized payment attestation generated by the attestation service. \"}},\"notice\":\"Verifies payment proofs for multiple payment methods. This is a unified verifier that  replaces individual payment verifiers (VenmoVerifier, PayPalVerifier, etc.) with a single  configurable contract.  Key features: - Supports multiple payment methods, each with custom configuration - Uses AttestationVerifier to validate offchain payment attestations    - Ensures trust anchor integrity for off-chain verification processes - Verifies standardized payment details against provided data\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/unifiedVerifier/UnifiedPaymentVerifier.sol\":\"UnifiedPaymentVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/external/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"},\"contracts/interfaces/IAttestationVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title IAttestationVerifier\\n * @notice Interface for verifying attestations from various sources (witnesses, TEE, etc.)\\n */\\ninterface IAttestationVerifier {\\n    /**\\n     * @notice Verifies attestations for a given digest\\n     * @param _digest The message digest to verify (EIP-712 formatted)\\n     * @param _sigs Array of signatures from attestors\\n     * @param _data Verification data containing attestor identities or hints\\n     * @return isValid Returns true if the attestation is valid, false otherwise\\n     */\\n    function verify(\\n        bytes32 _digest,\\n        bytes[] calldata _sigs,\\n        bytes calldata _data\\n    ) external view returns (bool isValid);\\n}\",\"keccak256\":\"0x04c971cef71d95e252a97e1a242adda47bcf2bd63e86f7fd4a2da2a9a1828818\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IPostIntentHook } from \\\"./IPostIntentHook.sol\\\";\\n\\ninterface IEscrow {\\n    \\n    /* ============ Structs ============ */\\n\\n    struct Intent {\\n        bytes32 intentHash;                        // Unique identifier for the intent\\n        uint256 amount;                            // Amount locked\\n        uint256 timestamp;                         // When this intent was created\\n        uint256 expiryTime;                        // When this intent expires\\n    }\\n\\n    struct Range {\\n        uint256 min;                                // Minimum value\\n        uint256 max;                                // Maximum value\\n    }\\n\\n    struct Deposit {\\n        address depositor;                          // Address of depositor\\n        address delegate;                           // Address that can manage this deposit (address(0) if no delegate)\\n        IERC20 token;                               // Address of deposit token\\n        uint256 amount;                             // Amount of deposit token (gross amount including reserved fees)\\n        Range intentAmountRange;                    // Range of take amount per intent\\n        // Deposit state\\n        bool acceptingIntents;                      // State: True if the deposit is accepting intents, False otherwise\\n        uint256 remainingDeposits;                  // State: Amount of remaining deposited liquidity (net of reserved fees)\\n        uint256 outstandingIntentAmount;            // State: Amount of outstanding intents (may include expired intents)\\n        // Fee tracking\\n        uint256 makerProtocolFee;                   // State: Maker protocol fee at the time of deposit creation in preciseUnits  (1e16 = 1%)\\n        uint256 reservedMakerFees;                  // State: Total fees reserved from maker (calculated upfront)\\n        uint256 accruedMakerFees;                   // State: Fees actually earned from fulfilled intents\\n        uint256 accruedReferrerFees;               // State: Referrer fees actually earned from fulfilled intents\\n        // Intent guardian\\n        address intentGuardian;                     // Address that can extend intent expiry times (address(0) if no guardian)\\n        // Referrer\\n        address referrer;                           // Address of the referrer who brought this deposit (address(0) if no referrer)\\n        uint256 referrerFee;                        // Fee to be paid to the referrer in preciseUnits (1e16 = 1%)\\n    }\\n\\n    struct Currency {\\n        bytes32 code;                               // Currency code (keccak256 hash of the currency code)\\n        uint256 minConversionRate;                  // Minimum rate of deposit token to fiat currency (in preciseUnits)\\n    }\\n\\n    struct DepositPaymentMethodData {\\n        address intentGatingService;                // Public key of gating service that will be used to verify intents\\n        bytes32 payeeDetails;                       // Payee details, has to be hash of payee details\\n        bytes data;                                 // Verification Data: Additional data used for payment verification; Can hold attester address\\n                                                    // in case of TLS proofs, domain key hash in case of zkEmail proofs, currency code etc.\\n    }\\n\\n    struct CreateDepositParams {\\n        IERC20 token;                                // The token to be deposited\\n        uint256 amount;                              // The amount of token to deposit\\n        Range intentAmountRange;                     // The max and min take amount for each intent\\n        bytes32[] paymentMethods;                    // The payment methods that deposit supports\\n        DepositPaymentMethodData[] paymentMethodData;// The payment verification data for each payment method that deposit supports\\n        Currency[][] currencies;                     // The currencies for each payment method that deposit supports\\n        address delegate;                            // Optional delegate address that can manage this deposit (address(0) for no delegate)\\n        address intentGuardian;                      // Optional intent guardian address that can extend intent expiry times (address(0) for no guardian)\\n        address referrer;                            // Address of the referrer who brought this deposit (address(0) if no referrer)\\n        uint256 referrerFee;                         // Fee to be paid to the referrer in preciseUnits (1e16 = 1%)\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    event DepositReceived(uint256 indexed depositId, address indexed depositor, IERC20 indexed token, uint256 amount, uint256 netDepositAmount, Range intentAmountRange, address delegate, address intentGuardian);\\n\\n    event DepositPaymentMethodAdded(uint256 indexed depositId, bytes32 indexed paymentMethod, bytes32 indexed payeeDetails, address intentGatingService);\\n    event DepositPaymentMethodRemoved(uint256 indexed depositId, bytes32 indexed paymentMethod);\\n\\n    event DepositCurrencyAdded(uint256 indexed depositId, bytes32 indexed paymentMethod, bytes32 indexed currency, uint256 minConversionRate);\\n    event DepositCurrencyRemoved(uint256 indexed depositId, bytes32 indexed paymentMethod, bytes32 indexed currencyCode);        \\n\\n    event DepositFundsAdded(uint256 indexed depositId, address indexed depositor, uint256 amount, uint256 netAdditionalAmount);\\n    event DepositWithdrawn(uint256 indexed depositId, address indexed depositor, uint256 amount, bool acceptingIntents);\\n    event DepositClosed(uint256 depositId, address depositor);\\n\\n    event DepositIntentAmountRangeUpdated(uint256 indexed depositId, Range intentAmountRange);\\n    event DepositMinConversionRateUpdated(uint256 indexed depositId, bytes32 indexed paymentMethod, bytes32 indexed currency, uint256 newMinConversionRate);\\n    event DepositAcceptingIntentsUpdated(uint256 indexed depositId, bool acceptingIntents);\\n\\n    event DepositDelegateSet(uint256 indexed depositId, address indexed depositor, address indexed delegate);\\n    event DepositDelegateRemoved(uint256 indexed depositId, address indexed depositor);\\n\\n    event MinDepositAmountSet(uint256 minDepositAmount);\\n\\n    event OrchestratorUpdated(address indexed orchestrator);\\n    event PaymentVerifierRegistryUpdated(address indexed paymentVerifierRegistry);\\n\\n    event FundsLocked(uint256 indexed depositId, bytes32 indexed intentHash, uint256 amount, uint256 expiryTime);\\n    event FundsUnlocked(uint256 indexed depositId, bytes32 indexed intentHash, uint256 amount);\\n    event FundsUnlockedAndTransferred(\\n        uint256 indexed depositId, \\n        bytes32 indexed intentHash, \\n        uint256 unlockedAmount, \\n        uint256 transferredAmount, \\n        uint256 makerFees, \\n        uint256 referrerFees, \\n        address to\\n    );\\n    event IntentExpiryExtended(uint256 indexed depositId, bytes32 indexed intentHash, uint256 newExpiryTime);\\n\\n    event MakerProtocolFeeUpdated(uint256 makerProtocolFee);\\n    event MakerFeeRecipientUpdated(address indexed makerFeeRecipient);\\n    event MakerFeesCollected(uint256 indexed depositId, uint256 collectedFees, address indexed makerFeeRecipient);\\n    event ReferrerFeesCollected(uint256 indexed depositId, uint256 collectedFees, address indexed referrer);\\n    event DustCollected(uint256 indexed depositId, uint256 dustAmount, address indexed makerFeeRecipient);\\n    event DustThresholdUpdated(uint256 dustThreshold);\\n    event MaxIntentsPerDepositUpdated(uint256 maxIntentsPerDeposit);\\n    event IntentExpirationPeriodUpdated(uint256 intentExpirationPeriod);\\n\\n    /* ============ Standardized Custom Errors ============ */\\n    \\n    // Zero value errors\\n    error ZeroAddress();\\n    error ZeroValue();\\n    error ZeroMinValue();\\n    error ZeroConversionRate();\\n\\n    // Authorization errors\\n    error UnauthorizedCaller(address caller, address authorized);\\n    error UnauthorizedCallerOrDelegate(address caller, address owner, address delegate);\\n\\n    // Range and amount errors\\n    error InvalidRange(uint256 min, uint256 max);\\n    error AmountBelowMin(uint256 amount, uint256 min);\\n    error AmountAboveMax(uint256 amount, uint256 max);\\n    error AmountExceedsAvailable(uint256 requested, uint256 available);\\n    error FeeExceedsMaximum(uint256 fee, uint256 maximum);\\n\\n    // Not found errors\\n    error DepositNotFound(uint256 depositId);\\n    error IntentNotFound(bytes32 intentHash);\\n    error PaymentMethodNotFound(uint256 depositId, bytes32 paymentMethod);\\n    error CurrencyNotFound(bytes32 paymentMethod, bytes32 currency);\\n    error DelegateNotFound(uint256 depositId);\\n\\n    // Already exists errors\\n    error PaymentMethodAlreadyExists(uint256 depositId, bytes32 paymentMethod);\\n    error CurrencyAlreadyExists(bytes32 paymentMethod, bytes32 currency);\\n\\n    // State errors\\n    error DepositNotAcceptingIntents(uint256 depositId);\\n    error DepositAlreadyInState(uint256 depositId, bool currentState);\\n    error InsufficientDepositLiquidity(uint256 depositId, uint256 available, uint256 required);\\n    error MaxIntentsExceeded(uint256 depositId, uint256 current, uint256 max);\\n\\n    // Validation errors\\n    error EmptyPayeeDetails();\\n    error ArrayLengthMismatch(uint256 length1, uint256 length2);\\n    error InvalidReferrerFeeConfiguration();\\n\\n    // Payment method errors\\n    error PaymentMethodNotWhitelisted(bytes32 paymentMethod);\\n    error CurrencyNotSupported(bytes32 paymentMethod, bytes32 currency);\\n\\n    \\n    /* ============ External Functions for Orchestrator ============ */\\n\\n    function lockFunds(uint256 _depositId, bytes32 _intentHash, uint256 _amount) external;\\n    function unlockFunds(uint256 _depositId, bytes32 _intentHash) external;\\n    function unlockAndTransferFunds(uint256 _depositId, bytes32 _intentHash, uint256 _transferAmount, address _to) external;\\n    function extendIntentExpiry(uint256 _depositId, bytes32 _intentHash, uint256 _newExpiryTime) external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function getDeposit(uint256 _depositId) external view returns (Deposit memory);\\n    function getDepositIntent(uint256 _depositId, bytes32 _intentHash) external view returns (Intent memory);\\n    function getDepositPaymentMethods(uint256 _depositId) external view returns (bytes32[] memory);\\n    function getDepositCurrencies(uint256 _depositId, bytes32 _paymentMethod) external view returns (bytes32[] memory);\\n    function getDepositCurrencyMinRate(uint256 _depositId, bytes32 _paymentMethod, bytes32 _currencyCode) external view returns (uint256);\\n    function getDepositPaymentMethodData(uint256 _depositId, bytes32 _paymentMethod) external view returns (DepositPaymentMethodData memory);\\n    function getAccountDeposits(address _account) external view returns (uint256[] memory);\\n    function getDepositIntentHashes(uint256 _depositId) external view returns (bytes32[] memory);\\n    function getExpiredIntents(uint256 _depositId) external view returns (bytes32[] memory expiredIntents, uint256 reclaimedAmount);\\n}\\n\",\"keccak256\":\"0xa2a90107dd670d087fdd959cb0f9dae9fa1df7936fa3890489aee9d17bac608d\",\"license\":\"MIT\"},\"contracts/interfaces/INullifierRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface INullifierRegistry {\\n    function addNullifier(bytes32 _nullifier) external;\\n    function isNullified(bytes32 _nullifier) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x107164bc9a320938b513305878163b7fa884da4cdae58d0c8e81bfbb00c97c5e\",\"license\":\"MIT\"},\"contracts/interfaces/IOrchestrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IPostIntentHook } from \\\"./IPostIntentHook.sol\\\";\\n\\ninterface IOrchestrator {\\n    \\n    /* ============ Structs ============ */\\n\\n    struct Intent {\\n        address owner;                              // Address of the intent owner  \\n        address to;                                 // Address to forward funds to (can be same as owner)\\n        address escrow;                             // Address of the escrow contract holding the deposit\\n        uint256 depositId;                          // ID of the deposit the intent is associated with\\n        uint256 amount;                             // Amount of the deposit.token the owner wants to take\\n        uint256 timestamp;                          // Timestamp of the intent\\n        bytes32 paymentMethod;                      // The payment method to be used for the offchain payment\\n        bytes32 fiatCurrency;                       // Currency code that the owner is paying in offchain (keccak256 hash of the currency code)\\n        uint256 conversionRate;                     // Conversion rate of deposit token to fiat currency at the time of intent\\n        address referrer;                           // Address of the referrer who brought this intent (if any)\\n        uint256 referrerFee;                        // Fee to be paid to the referrer in preciseUnits (1e16 = 1%)\\n        IPostIntentHook postIntentHook;             // Address of the post-intent hook that will execute any post-intent actions\\n        bytes data;                                 // Additional data to be passed to the post-intent hook contract\\n    }\\n\\n    struct SignalIntentParams {\\n        address escrow;                             // The escrow contract where the deposit is held\\n        uint256 depositId;                          // The ID of the deposit the taker intends to use\\n        uint256 amount;                             // The amount of deposit.token the user wants to take\\n        address to;                                 // Address to forward funds to\\n        bytes32 paymentMethod;                      // The payment method to be used for the offchain payment\\n        bytes32 fiatCurrency;                       // The currency code for offchain payment\\n        uint256 conversionRate;                     // The conversion rate agreed offchain\\n        address referrer;                           // Address of the referrer (address(0) if no referrer)\\n        uint256 referrerFee;                        // Fee to be paid to the referrer\\n        bytes gatingServiceSignature;               // Signature from the deposit's gating service\\n        uint256 signatureExpiration;                // Timestamp when the gating service signature expires\\n        IPostIntentHook postIntentHook;             // Optional post-intent hook (address(0) for no hook)\\n        bytes data;                                 // Additional data for the intent\\n    }\\n\\n    struct FulfillIntentParams {\\n        bytes paymentProof;                         // Payment proof. Can be Groth16 Proof, TLSNotary proof, TLSProxy proof, attestation etc.\\n        bytes32 intentHash;                         // Identifier of intent being fulfilled\\n        bytes verificationData;                     // Additional data for payment verifier\\n        bytes postIntentHookData;                   // Additional data for post intent hook\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    event IntentSignaled(\\n        bytes32 indexed intentHash, \\n        address indexed escrow,\\n        uint256 indexed depositId, \\n        bytes32 paymentMethod, \\n        address owner, \\n        address to, \\n        uint256 amount, \\n        bytes32 fiatCurrency, \\n        uint256 conversionRate, \\n        uint256 timestamp\\n    );\\n\\n    event IntentPruned(\\n        bytes32 indexed intentHash\\n    );\\n\\n    event IntentFulfilled(\\n        bytes32 indexed intentHash,\\n        address indexed fundsTransferredTo,   // Address that funds were transferred to; can be intent.to or postIntentHook address\\n        uint256 amount,\\n        bool isManualRelease\\n    );\\n\\n    event AllowMultipleIntentsUpdated(bool allowMultiple);\\n\\n    event PaymentVerifierRegistryUpdated(address indexed paymentVerifierRegistry);\\n    event PostIntentHookRegistryUpdated(address indexed postIntentHookRegistry);\\n    event RelayerRegistryUpdated(address indexed relayerRegistry);\\n    event EscrowRegistryUpdated(address indexed escrowRegistry);\\n\\n    event ProtocolFeeUpdated(uint256 protocolFee);\\n    event ProtocolFeeRecipientUpdated(address indexed protocolFeeRecipient);\\n    event PartialManualReleaseDelayUpdated(uint256 partialManualReleaseDelay);\\n\\n    /* ============ Standardized Custom Errors ============ */\\n    \\n    // Zero value errors\\n    error ZeroAddress();\\n    error ZeroValue();\\n    \\n    // Authorization errors\\n    error UnauthorizedEscrowCaller(address caller);\\n    error UnauthorizedCaller(address caller, address authorized);\\n    \\n    // Not found errors\\n    error IntentNotFound(bytes32 intentHash);\\n    error PaymentMethodDoesNotExist(bytes32 paymentMethod);\\n    error PaymentMethodNotSupported(bytes32 paymentMethod);\\n    error CurrencyNotSupported(bytes32 paymentMethod, bytes32 currency);\\n    \\n    // Whitelist errors\\n    error PaymentMethodNotWhitelisted(bytes32 paymentMethod);\\n    error PostIntentHookNotWhitelisted(address hook);\\n    error EscrowNotWhitelisted(address escrow);\\n    \\n    // Amount and fee errors\\n    error AmountBelowMin(uint256 amount, uint256 min);\\n    error AmountAboveMax(uint256 amount, uint256 max);\\n    error AmountExceedsLimit(uint256 amount, uint256 limit);\\n    error FeeExceedsMaximum(uint256 fee, uint256 maximum);\\n    error RateBelowMinimum(uint256 rate, uint256 minRate);\\n    \\n    // Validation errors\\n    error AccountHasActiveIntent(address account, bytes32 existingIntent);\\n    error InvalidReferrerFeeConfiguration();\\n    error InvalidSignature();\\n    error SignatureExpired(uint256 expiration, uint256 currentTime);\\n    error PartialReleaseNotAllowedYet(uint256 currentTime, uint256 allowedTime);\\n\\n    // Verification errors\\n    error PaymentVerificationFailed();\\n    error HashMismatch(bytes32 expected, bytes32 actual);\\n     \\n    // Transfer errors\\n    error TransferFailed(address recipient, uint256 amount);\\n    error EscrowLockFailed();\\n\\n    /* ============ View Functions ============ */\\n\\n    function getIntent(bytes32 intentHash) external view returns (Intent memory);\\n    function getAccountIntents(address account) external view returns (bytes32[] memory);\\n    \\n    /* ============ External Functions for Users ============ */\\n\\n    function signalIntent(SignalIntentParams calldata params) external;\\n\\n    function cancelIntent(bytes32 intentHash) external;\\n\\n    function fulfillIntent(FulfillIntentParams calldata params) external;\\n\\n    function releaseFundsToPayer(bytes32 intentHash) external;\\n\\n    /* ============ External Functions for Escrow ============ */\\n\\n    function pruneIntents(bytes32[] calldata intentIds) external;\\n}\",\"keccak256\":\"0xc99352f81a65339bafe780c1cb6e31cb17a26061baf4faa8c66e106dd1e99c24\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n\\ninterface IPaymentVerifier {\\n\\n    /* ============ Structs ============ */\\n\\n    struct VerifyPaymentData {\\n        bytes32 intentHash;                     // The hash of the intent being fulfilled\\n        bytes paymentProof;                     // Payment proof\\n        bytes data;                             // Additional data provided by the taker\\n    }\\n\\n    struct PaymentVerificationResult {\\n        bool success;                           // Whether the payment verification succeeded\\n        bytes32 intentHash;                     // The hash of the intent being fulfilled\\n        uint256 releaseAmount;                  // The amount of tokens to release\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function verifyPayment(\\n        VerifyPaymentData calldata _verifyPaymentData\\n    )   \\n        external\\n        returns(PaymentVerificationResult memory result);\\n\\n}\\n\",\"keccak256\":\"0x792a38fe8d1ea975b31ba96079fd3776a1f54f018b4473ec27aa4c9fab5cff80\",\"license\":\"MIT\"},\"contracts/interfaces/IPostIntentHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { IOrchestrator } from \\\"./IOrchestrator.sol\\\";\\n\\n/**\\n * @title IPostIntentHook\\n * @notice Interface for post-intent hooks\\n */\\ninterface IPostIntentHook {\\n\\n    /**\\n     * @notice Post-intent hook\\n     * @param _intent The intent data structure containing all intent information\\n     * @param _fulfillIntentData The data passed to fulfillIntent\\n     */\\n    function execute(\\n        IOrchestrator.Intent memory _intent,\\n        uint256 _amountNetFees,\\n        bytes calldata _fulfillIntentData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x72ae0d60c98f89eb2363f455445466c1dfaddfb338a63d65d3eb8469cbd9484d\",\"license\":\"MIT\"},\"contracts/unifiedVerifier/BaseUnifiedPaymentVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Bytes32ArrayUtils } from \\\"../external/Bytes32ArrayUtils.sol\\\";\\nimport { IAttestationVerifier } from \\\"../interfaces/IAttestationVerifier.sol\\\";\\nimport { INullifierRegistry } from \\\"../interfaces/INullifierRegistry.sol\\\";\\nimport { IOrchestrator } from \\\"../interfaces/IOrchestrator.sol\\\";\\n\\n/**\\n * @title BaseUnifiedPaymentVerifier\\n * @notice Base contract for unified payment verification that manages configuration for multiple payment methods.\\n * \\n * This contract handles:\\n * - Supported payment methods\\n * - Attestation verification through pluggable attestation verifiers\\n * \\n * @dev This is an abstract contract that must be inherited by concrete implementations.\\n *      It replaces the previous BaseReclaimVerifier with a more flexible architecture.\\n */\\nabstract contract BaseUnifiedPaymentVerifier is Ownable {\\n    \\n    using Bytes32ArrayUtils for bytes32[];\\n    \\n    /* ============ Constants ============ */\\n\\n    uint256 internal constant PRECISE_UNIT = 1e18;\\n\\n    /* ============ Events ============ */\\n    \\n    event PaymentMethodAdded(bytes32 indexed paymentMethod);\\n    event PaymentMethodRemoved(bytes32 indexed paymentMethod);\\n    event AttestationVerifierUpdated(address indexed oldVerifier, address indexed newVerifier);\\n\\n    /* ============ State Variables ============ */\\n    \\n    IOrchestrator public immutable orchestrator;\\n    INullifierRegistry public immutable nullifierRegistry;\\n    IAttestationVerifier public attestationVerifier;\\n\\n    bytes32[] public paymentMethods;\\n    mapping(bytes32 => bool) public isPaymentMethod;\\n    \\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Modifier to ensure only escrow can call\\n     */\\n    modifier onlyOrchestrator() {\\n        require(msg.sender == address(orchestrator), \\\"Only orchestrator can call\\\");\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n    \\n    /**\\n     * @notice Initializes base payment verifier\\n     * @param _orchestrator The orchestrator contract address that will be used to verify payments\\n     * @param _nullifierRegistry The nullifier registry contract that will be used to prevent double-spends\\n     * @param _attestationVerifier The attestation verifier contract that will be used to verify attestation by the\\n     * offchain / ZK attestation service\\n     */\\n    constructor(\\n        IOrchestrator _orchestrator,\\n        INullifierRegistry _nullifierRegistry,\\n        IAttestationVerifier _attestationVerifier\\n    ) Ownable() {\\n        orchestrator = _orchestrator;\\n        nullifierRegistry = _nullifierRegistry;\\n        attestationVerifier = _attestationVerifier;\\n    }\\n    \\n    /* ============ External Functions ============ */\\n    \\n    /**\\n     * ONLY OWNER: Adds a new payment method with timestamp buffer\\n     * @param _paymentMethod The payment method hash; Hash the payment method name in lowercase\\n     */\\n    function addPaymentMethod(bytes32 _paymentMethod) external onlyOwner {\\n        require(!isPaymentMethod[_paymentMethod], \\\"UPV: Payment method already exists\\\");\\n        \\n        isPaymentMethod[_paymentMethod] = true;\\n        paymentMethods.push(_paymentMethod);\\n        \\n        emit PaymentMethodAdded(_paymentMethod);\\n    }\\n    \\n    /**\\n     * ONLY OWNER: Removes a payment method and associated configuration\\n     * @param _paymentMethod The payment method to remove\\n     */\\n    function removePaymentMethod(bytes32 _paymentMethod) external onlyOwner {\\n        require(isPaymentMethod[_paymentMethod], \\\"UPV: Payment method does not exist\\\");\\n        \\n        delete isPaymentMethod[_paymentMethod];\\n        paymentMethods.removeStorage(_paymentMethod);\\n        \\n        emit PaymentMethodRemoved(_paymentMethod);\\n    }\\n    \\n    /**\\n     * @notice Updates the attestation verifier contract\\n     * @param _newVerifier The new attestation verifier address\\n     */\\n    function setAttestationVerifier(address _newVerifier) external onlyOwner {\\n        address oldVerifier = address(attestationVerifier);\\n        require(_newVerifier != address(0), \\\"UPV: Invalid attestation verifier\\\");\\n        require(_newVerifier != oldVerifier, \\\"UPV: Same verifier\\\");\\n        \\n        attestationVerifier = IAttestationVerifier(_newVerifier);\\n        emit AttestationVerifierUpdated(oldVerifier, _newVerifier);\\n    }\\n                                                                                                               \\n    \\n    /* ============ View Functions ============ */\\n    \\n    function getPaymentMethods() external view returns (bytes32[] memory) {\\n        return paymentMethods;\\n    }\\n    \\n    /* ============ Internal Functions ============ */\\n    \\n    /**\\n     * Validates and adds a nullifier to prevent double-spending\\n     * @param _nullifier The nullifier to add\\n     */\\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\\n        require(!nullifierRegistry.isNullified(_nullifier), \\\"Nullifier has already been used\\\");\\n        nullifierRegistry.addNullifier(_nullifier);\\n    }\\n}\\n\",\"keccak256\":\"0x8486fb9b3f18d37ff6bd46eb0ac82b74158885be39d9e456a45cf48e56f7b33d\",\"license\":\"MIT\"},\"contracts/unifiedVerifier/UnifiedPaymentVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { BaseUnifiedPaymentVerifier } from \\\"./BaseUnifiedPaymentVerifier.sol\\\";\\nimport { INullifierRegistry } from \\\"../interfaces/INullifierRegistry.sol\\\";\\nimport { IPaymentVerifier } from \\\"../interfaces/IPaymentVerifier.sol\\\";\\nimport { IAttestationVerifier } from \\\"../interfaces/IAttestationVerifier.sol\\\";\\nimport { IOrchestrator } from \\\"../interfaces/IOrchestrator.sol\\\";\\nimport { IEscrow } from \\\"../interfaces/IEscrow.sol\\\";\\n\\n/**\\n * @title UnifiedPaymentVerifier\\n * @notice Verifies payment proofs for multiple payment methods. This is a unified verifier that \\n * replaces individual payment verifiers (VenmoVerifier, PayPalVerifier, etc.) with a single \\n * configurable contract.\\n * \\n * Key features:\\n * - Supports multiple payment methods, each with custom configuration\\n * - Uses AttestationVerifier to validate offchain payment attestations   \\n * - Ensures trust anchor integrity for off-chain verification processes\\n * - Verifies standardized payment details against provided data\\n * @dev The payment attestation should be signed using the EIP-712 standard\\n */\\ncontract UnifiedPaymentVerifier is IPaymentVerifier, BaseUnifiedPaymentVerifier {\\n\\n    /* ============ Constants ============ */\\n    \\n    // Max timestamp buffer\\n    uint256 private constant MAX_TIMESTAMP_BUFFER = 48 * 60 * 60 * 1000; // 48 hours\\n\\n    // EIP-712 Domain Separator\\n    bytes32 private constant DOMAIN_TYPEHASH = keccak256(\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n    );\\n    \\n    // EIP-712 Type Hash for PaymentAttestation\\n    bytes32 private constant PAYMENT_ATTESTATION_TYPEHASH = keccak256(\\n        \\\"PaymentAttestation(bytes32 intentHash,uint256 releaseAmount,bytes32 dataHash)\\\"\\n    );\\n\\n    /* ============ State Variables ============ */\\n\\n    // EIP-712 Domain Separator (computed once at deployment)\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    /* ============ Events ============ */\\n\\n    /**\\n     * @notice Capture and emit payment details for offchain reconciliation\\n     */\\n    event PaymentVerified(\\n        bytes32 indexed intentHash,\\n        bytes32 indexed method,\\n        bytes32 indexed currency,\\n        uint256 amount,\\n        uint256 timestamp,\\n        bytes32 paymentId,\\n        bytes32 payeeId\\n    );\\n\\n    /* ============ Structs ============ */\\n\\n    struct PaymentDetails {\\n        bytes32 method;           // Payment method hash (e.g., \\\"venmo\\\", \\\"paypal\\\", \\\"wise\\\")\\n        bytes32 payeeId;          // Payment recipient ID (hashed payee details to preserve privacy)\\n        uint256 amount;           // Payment amount in smallest currency unit (i.e. cents)\\n        bytes32 currency;         // Payment currency hash (e.g., \\\"USD\\\", \\\"EUR\\\")\\n        uint256 timestamp;        // Payment timestamp in UTC in milliseconds\\n        bytes32 paymentId;        // Hashed payment identifier from the service (e.g. hashed venmo payment ID to preserve privacy)\\n    }\\n\\n    struct IntentSnapshot {\\n        bytes32 intentHash;\\n        uint256 amount;\\n        bytes32 paymentMethod;\\n        bytes32 fiatCurrency;\\n        bytes32 payeeDetails;\\n        uint256 conversionRate;\\n        uint256 signalTimestamp;\\n        uint256 timestampBuffer;\\n    }\\n\\n    struct PaymentAttestation {\\n        bytes32 intentHash;       // Binds the payment to the intent on Orchestrator\\n        uint256 releaseAmount;    // Final token amount to release on-chain after FX\\n        bytes32 dataHash;         // Hash of the additional data to verify integrity\\n        bytes[] signatures;       // Array of signatures from witnesses\\n        bytes data;               // Data for verification\\n        bytes metadata;           // Additional metadata; isn't signed by the witnesses\\n    }\\n\\n    /* ============ Constructor ============ */\\n    \\n    constructor(\\n        IOrchestrator _orchestrator,\\n        INullifierRegistry _nullifierRegistry,\\n        IAttestationVerifier _attestationVerifier\\n    ) BaseUnifiedPaymentVerifier(\\n        _orchestrator,\\n        _nullifierRegistry,\\n        _attestationVerifier\\n    ) {\\n        // Compute EIP-712 domain separator\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(\\\"UnifiedPaymentVerifier\\\")), // name\\n                keccak256(bytes(\\\"1\\\")),                      // version\\n                block.chainid,                              // chainId\\n                address(this)                               // verifyingContract\\n            )\\n        );\\n    }\\n\\n    /* ============ External Functions ============ */\\n    \\n    /**\\n     * ONLY ORCHESTRATOR: Verifies a standardized payment attestation generated by the attestation service.\\n     * \\n     * @param _verifyPaymentData Payment proof and intent details required for verification\\n     * @return result The payment verification result containing success status, intent hash, and release amount\\n     * @dev Ensure the orchestrator verifies the intent exists before calling this function\\n     */\\n    function verifyPayment(\\n        VerifyPaymentData calldata _verifyPaymentData\\n    )\\n        external\\n        override\\n        onlyOrchestrator()\\n        returns (PaymentVerificationResult memory result)\\n    {\\n        PaymentAttestation memory attestation = _decodeAttestation(_verifyPaymentData.paymentProof);\\n        \\n        (\\n            PaymentDetails memory paymentDetails, \\n            IntentSnapshot memory intentSnapshot\\n        ) = _decodeAttestationPayload(attestation.data);\\n        require(isPaymentMethod[paymentDetails.method], \\\"UPV: Invalid payment method\\\");\\n        \\n        _validateIntentSnapshot(_verifyPaymentData.intentHash, intentSnapshot);\\n\\n        bool isValid = _verifyAttestation(attestation);\\n        require(isValid, \\\"UPV: Invalid attestation\\\");\\n                \\n        // Nullify the payment to prevent double-spending\\n        _nullifyPayment(paymentDetails.method, paymentDetails.paymentId);\\n        \\n        _emitPaymentDetails(attestation.intentHash, paymentDetails);\\n    \\n        uint256 releaseAmount = _calculateReleaseAmount(attestation.releaseAmount, intentSnapshot.amount);\\n\\n        result = PaymentVerificationResult({\\n            success: true,\\n            intentHash: attestation.intentHash,\\n            releaseAmount: releaseAmount\\n        });\\n\\n        return result;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _decodeAttestation(bytes memory paymentProof) internal pure returns (PaymentAttestation memory) {\\n        return abi.decode(paymentProof, (PaymentAttestation));\\n    }\\n\\n    function _decodeAttestationPayload(bytes memory paymentData)\\n        internal\\n        pure\\n        returns (PaymentDetails memory paymentDetails, IntentSnapshot memory intentSnapshot)\\n    {\\n        (paymentDetails, intentSnapshot) = abi.decode(paymentData, (PaymentDetails, IntentSnapshot));\\n    }\\n\\n    /**\\n     * Verifies the EIP-712 attestation using the attestation verifier. Also verifies the integrity of the \\n     * verify payment data using the data hash attached to the attestation.\\n     */\\n    function _verifyAttestation(PaymentAttestation memory attestation) internal view returns (bool) {\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                PAYMENT_ATTESTATION_TYPEHASH,\\n                attestation.intentHash,\\n                attestation.releaseAmount,\\n                attestation.dataHash\\n            )\\n        );\\n        \\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                structHash\\n            )\\n        );\\n\\n        // Verify data integrity - the data hash must match what was signed\\n        require(\\n            keccak256(attestation.data) == attestation.dataHash,\\n            \\\"UPV: Data hash mismatch\\\"\\n        );\\n\\n        bool isValid = attestationVerifier.verify(\\n            digest, \\n            attestation.signatures,\\n            attestation.data\\n        );\\n\\n        return isValid;\\n    }\\n\\n    function _validateIntentSnapshot(\\n        bytes32 intentHash,\\n        IntentSnapshot memory snapshot\\n    ) internal view {\\n        require(snapshot.intentHash == intentHash, \\\"UPV: Snapshot hash mismatch\\\");\\n\\n        IOrchestrator.Intent memory intent = IOrchestrator(orchestrator).getIntent(intentHash);\\n        require(snapshot.amount == intent.amount, \\\"UPV: Snapshot amount mismatch\\\");\\n        require(snapshot.paymentMethod == intent.paymentMethod, \\\"UPV: Snapshot method mismatch\\\");\\n        require(snapshot.fiatCurrency == intent.fiatCurrency, \\\"UPV: Snapshot currency mismatch\\\");\\n        require(snapshot.conversionRate == intent.conversionRate, \\\"UPV: Snapshot rate mismatch\\\");\\n        require(snapshot.signalTimestamp == intent.timestamp, \\\"UPV: Snapshot timestamp mismatch\\\");\\n        require(snapshot.timestampBuffer <= MAX_TIMESTAMP_BUFFER, \\\"UPV: Snapshot timestamp buffer exceeds maximum\\\");\\n\\n        IEscrow.DepositPaymentMethodData memory paymentMethodData = IEscrow(intent.escrow)\\n            .getDepositPaymentMethodData(intent.depositId, snapshot.paymentMethod);\\n        require(snapshot.payeeDetails == paymentMethodData.payeeDetails, \\\"UPV: Snapshot payee mismatch\\\");\\n    }\\n\\n    /**\\n     * Nullifies a payment to prevent double-spending\\n     * @dev Creates a unique nullifier by encoding both the payment method and payment ID together.\\n     * This prevents collisions where the same payment ID could exist across different payment\\n     * methods (e.g., Venmo transaction #123 vs PayPal transaction #123).\\n     */\\n    function _nullifyPayment(bytes32 paymentMethod, bytes32 paymentId) internal {\\n        bytes32 nullifier = keccak256(abi.encodePacked(paymentMethod, paymentId));\\n        _validateAndAddNullifier(nullifier);\\n    }\\n\\n    /**\\n     * Calculates the release amount for an intent by capping the release amount to the intent amount\\n     */\\n    function _calculateReleaseAmount(uint256 releaseAmount, uint256 intentAmount) internal pure returns (uint256) {\\n        if (releaseAmount > intentAmount) {\\n            return intentAmount;\\n        }\\n        return releaseAmount;\\n    }\\n\\n    /**\\n     * Emits the payment details for offchain reconciliation\\n     */\\n    function _emitPaymentDetails(bytes32 intentHash, PaymentDetails memory paymentDetails) internal {\\n        emit PaymentVerified(\\n            intentHash,                 // Tie the payment details to the intent hash\\n            paymentDetails.method,\\n            paymentDetails.currency,\\n            paymentDetails.amount,\\n            paymentDetails.timestamp,\\n            paymentDetails.paymentId,\\n            paymentDetails.payeeId\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf7352f950b323f1f3d345620c7e3c04121fe921582881ec03d78f128e22d7272\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001d8738038062001d878339810160408190526200003491620001cf565b828282620000423362000166565b6001600160a01b03928316608090815291831660a0908152600180546001600160a01b03191692909416919091178355604080518082018252601681527f556e69666965645061796d656e7456657269666965720000000000000000000060209182015281518083018352948552603160f81b9481019490945280517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f948101949094527f48801cbbd53d2e054850b7bc935ecce36286f21c085367c2fb803f758141dd3a908401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608401524691830191909152309082015260c00160408051601f19818403018152919052805160209091012060c0525062000223915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620001cc57600080fd5b50565b600080600060608486031215620001e557600080fd5b8351620001f281620001b6565b60208501519093506200020581620001b6565b60408501519092506200021881620001b6565b809150509250925092565b60805160a05160c051611b1162000276600039600081816101450152610dc001526000818161026201528181611197015261126d01526000818161023b015281816102bf01526109b70152611b116000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063b4b3c5a011610066578063b4b3c5a014610223578063b74795d914610236578063b870676c1461025d578063f2fde38b1461028457600080fd5b80638da5cb5b146101b65780639072ec4e146101db578063a1627cd01461020e57600080fd5b80633992eaf6116100c85780633992eaf614610175578063715018a61461018857806382f6f608146101905780638b90cdc9146101a357600080fd5b80630ba207a2146100ef578063334c2ef31461012b5780633644e51514610140575b600080fd5b6101026100fd366004611337565b610297565b604080518251151581526020808401519082015291810151908201526060015b60405180910390f35b61013e610139366004611379565b6104b0565b005b6101677f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610122565b61013e610183366004611379565b610570565b61013e610658565b61013e61019e3660046113a7565b61066c565b6101676101b1366004611379565b610782565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610122565b6101fe6101e9366004611379565b60036020526000908152604090205460ff1681565b6040519015158152602001610122565b6102166107a3565b60405161012291906113c4565b6001546101c3906001600160a01b031681565b6101c37f000000000000000000000000000000000000000000000000000000000000000081565b6101c37f000000000000000000000000000000000000000000000000000000000000000081565b61013e6102923660046113a7565b6107fb565b6040805160608101825260008082526020820181905291810191909152336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103315760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f7263686573747261746f722063616e2063616c6c00000000000060448201526064015b60405180910390fd5b600061037d6103436020850185611408565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061087492505050565b905060008061038f83608001516108bd565b8151600090815260036020526040902054919350915060ff166103f45760405162461bcd60e51b815260206004820152601b60248201527f5550563a20496e76616c6964207061796d656e74206d6574686f6400000000006044820152606401610328565b6103ff85358261094e565b600061040a84610d3c565b9050806104595760405162461bcd60e51b815260206004820152601860248201527f5550563a20496e76616c6964206174746573746174696f6e00000000000000006044820152606401610328565b61046b83600001518460a00151610eef565b83516104779084610f25565b600061048b85602001518460200151610f97565b604080516060810182526001815296516020880152860152509293505050505b919050565b6104b8610faf565b60008181526003602052604090205460ff166105215760405162461bcd60e51b815260206004820152602260248201527f5550563a205061796d656e74206d6574686f6420646f6573206e6f74206578696044820152611cdd60f21b6064820152608401610328565b6000818152600360205260409020805460ff19169055610542600282611009565b60405181907f0c831f94d9f98b9753b9607b5f1d9b1758d364178abe6e854ee65e97519c576490600090a250565b610578610faf565b60008181526003602052604090205460ff16156105e25760405162461bcd60e51b815260206004820152602260248201527f5550563a205061796d656e74206d6574686f6420616c72656164792065786973604482015261747360f01b6064820152608401610328565b600081815260036020526040808220805460ff1916600190811790915560028054918201815583527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018390555182917fa8b7ef1cdeb8ecb963885f69266685a6c19778bdbe18fd82fb494d536ae5ede891a250565b610660610faf565b61066a6000611131565b565b610674610faf565b6001546001600160a01b039081169082166106db5760405162461bcd60e51b815260206004820152602160248201527f5550563a20496e76616c6964206174746573746174696f6e20766572696669656044820152603960f91b6064820152608401610328565b806001600160a01b0316826001600160a01b0316036107315760405162461bcd60e51b81526020600482015260126024820152712aa82b1d1029b0b6b2903b32b934b334b2b960711b6044820152606401610328565b600180546001600160a01b0319166001600160a01b0384811691821790925560405190918316907f85c440731cd72afaddddb00cf34bebcc2b6d46def5a034a30baef899583e3d1590600090a35050565b6002818154811061079257600080fd5b600091825260209091200154905081565b606060028054806020026020016040519081016040528092919081815260200182805480156107f157602002820191906000526020600020905b8154815260200190600101908083116107dd575b5050505050905090565b610803610faf565b6001600160a01b0381166108685760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610328565b61087181611131565b50565b6040805160c081018252600080825260208083018290529282015260608082018190526080820181905260a0820152825190916108b79184018101908401611636565b92915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152828060200190518101906109449190611709565b9094909350915050565b8051821461099e5760405162461bcd60e51b815260206004820152601b60248201527f5550563a20536e617073686f742068617368206d69736d6174636800000000006044820152606401610328565b60405163789e235560e11b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f13c46aa90602401600060405180830381865afa158015610a06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a2e91908101906117f0565b90508060800151826020015114610a875760405162461bcd60e51b815260206004820152601d60248201527f5550563a20536e617073686f7420616d6f756e74206d69736d617463680000006044820152606401610328565b8060c00151826040015114610ade5760405162461bcd60e51b815260206004820152601d60248201527f5550563a20536e617073686f74206d6574686f64206d69736d617463680000006044820152606401610328565b8060e00151826060015114610b355760405162461bcd60e51b815260206004820152601f60248201527f5550563a20536e617073686f742063757272656e6379206d69736d61746368006044820152606401610328565b8061010001518260a0015114610b8d5760405162461bcd60e51b815260206004820152601b60248201527f5550563a20536e617073686f742072617465206d69736d6174636800000000006044820152606401610328565b8060a001518260c0015114610be45760405162461bcd60e51b815260206004820181905260248201527f5550563a20536e617073686f742074696d657374616d70206d69736d617463686044820152606401610328565b630a4cb8008260e001511115610c535760405162461bcd60e51b815260206004820152602e60248201527f5550563a20536e617073686f742074696d657374616d7020627566666572206560448201526d786365656473206d6178696d756d60901b6064820152608401610328565b600081604001516001600160a01b03166317192c29836060015185604001516040518363ffffffff1660e01b8152600401610c98929190918252602082015260400190565b600060405180830381865afa158015610cb5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cdd9190810190611902565b90508060200151836080015114610d365760405162461bcd60e51b815260206004820152601c60248201527f5550563a20536e617073686f74207061796565206d69736d61746368000000006044820152606401610328565b50505050565b6000807f3fbf9df18b1c2ca7c48d809a8d8c6bbf8d7ac33f3741ab78dac072aba0f77103836000015184602001518560400151604051602001610d98949392919093845260208401929092526040830152606082015260800190565b60408051601f1981840301815290829052805160209182012061190160f01b918301919091527f00000000000000000000000000000000000000000000000000000000000000006022830152604282018190529150600090606201604051602081830303815290604052805190602001209050836040015184608001518051906020012014610e695760405162461bcd60e51b815260206004820152601760248201527f5550563a20446174612068617368206d69736d617463680000000000000000006044820152606401610328565b6001546060850151608086015160405162522ebb60e81b81526000936001600160a01b03169263522ebb0092610ea592879291906004016119ce565b602060405180830381865afa158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee69190611a4b565b95945050505050565b60408051602080820185905281830184905282518083038401815260609092019092528051910120610f2081611181565b505050565b80606001518160000151837f4d2aa8fe0c7c20e5090ab060295f615973b60c23d4a50ec0b6fbf8090c610752846040015185608001518660a001518760200151604051610f8b949392919093845260208401929092526040830152606082015260800190565b60405180910390a45050565b600081831115610fa85750806108b7565b5090919050565b6000546001600160a01b0316331461066a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610328565b6000806110658480548060200260200160405190810160405280929190818152602001828054801561105a57602002820191906000526020600020905b815481526020019060010190808311611046575b5050505050846112d4565b91509150806110ae5760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b6044820152606401610328565b83546000906110bf90600190611a83565b9050808314611104578481815481106110da576110da611a96565b90600052602060002001548584815481106110f7576110f7611a96565b6000918252602090912001555b8480548061111457611114611aac565b600190038181906000526020600020016000905590555050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405163169394bb60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063169394bb90602401602060405180830381865afa1580156111e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120a9190611a4b565b156112575760405162461bcd60e51b815260206004820152601f60248201527f4e756c6c69666965722068617320616c7265616479206265656e2075736564006044820152606401610328565b604051632dea6f9960e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635bd4df3290602401600060405180830381600087803b1580156112b957600080fd5b505af11580156112cd573d6000803e3d6000fd5b5050505050565b81516000908190815b8181101561132457848682815181106112f8576112f8611a96565b602002602001015103611312579250600191506113309050565b8061131c81611ac2565b9150506112dd565b50600019600092509250505b9250929050565b60006020828403121561134957600080fd5b813567ffffffffffffffff81111561136057600080fd5b82016060818503121561137257600080fd5b9392505050565b60006020828403121561138b57600080fd5b5035919050565b6001600160a01b038116811461087157600080fd5b6000602082840312156113b957600080fd5b813561137281611392565b6020808252825182820181905260009190848201906040850190845b818110156113fc578351835292840192918401916001016113e0565b50909695505050505050565b6000808335601e1984360301811261141f57600080fd5b83018035915067ffffffffffffffff82111561143a57600080fd5b60200191503681900382131561133057600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156114885761148861144f565b60405290565b604051610100810167ffffffffffffffff811182821017156114885761148861144f565b6040516101a0810167ffffffffffffffff811182821017156114885761148861144f565b604051601f8201601f1916810167ffffffffffffffff811182821017156114ff576114ff61144f565b604052919050565b60005b8381101561152257818101518382015260200161150a565b50506000910152565b600082601f83011261153c57600080fd5b815167ffffffffffffffff8111156115565761155661144f565b611569601f8201601f19166020016114d6565b81815284602083860101111561157e57600080fd5b61158f826020830160208701611507565b949350505050565b600082601f8301126115a857600080fd5b8151602067ffffffffffffffff808311156115c5576115c561144f565b8260051b6115d48382016114d6565b93845285810183019383810190888611156115ee57600080fd5b84880192505b8583101561162a5782518481111561160c5760008081fd5b61161a8a87838c010161152b565b83525091840191908401906115f4565b98975050505050505050565b60006020828403121561164857600080fd5b815167ffffffffffffffff8082111561166057600080fd5b9083019060c0828603121561167457600080fd5b61167c611465565b8251815260208301516020820152604083015160408201526060830151828111156116a657600080fd5b6116b287828601611597565b6060830152506080830151828111156116ca57600080fd5b6116d68782860161152b565b60808301525060a0830151828111156116ee57600080fd5b6116fa8782860161152b565b60a08301525095945050505050565b6000808284036101c081121561171e57600080fd5b60c081121561172c57600080fd5b611734611465565b845181526020850151602082015260408501516040820152606085015160608201526080850151608082015260a085015160a0820152809350506101008060bf198301121561178257600080fd5b61178a61148e565b60c086810151825260e08088015160208401529287015160408301526101208701516060830152610140870151608083015261016087015160a0830152610180870151908201526101a0909501519085015250909391925050565b80516104ab81611392565b60006020828403121561180257600080fd5b815167ffffffffffffffff8082111561181a57600080fd5b908301906101a0828603121561182f57600080fd5b6118376114b2565b611840836117e5565b815261184e602084016117e5565b602082015261185f604084016117e5565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101206118b08185016117e5565b9082015261014083810151908201526101606118cd8185016117e5565b9082015261018083810151838111156118e557600080fd5b6118f18882870161152b565b918301919091525095945050505050565b60006020828403121561191457600080fd5b815167ffffffffffffffff8082111561192c57600080fd5b908301906060828603121561194057600080fd5b60405160608101818110838211171561195b5761195b61144f565b604052825161196981611392565b81526020838101519082015260408301518281111561198757600080fd5b6119938782860161152b565b60408301525095945050505050565b600081518084526119ba816020860160208601611507565b601f01601f19169290920160200192915050565b600060608201858352602060608185015281865180845260808601915060808160051b870101935082880160005b82811015611a2a57607f19888703018452611a188683516119a2565b955092840192908401906001016119fc565b50505050508281036040840152611a4181856119a2565b9695505050505050565b600060208284031215611a5d57600080fd5b8151801515811461137257600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156108b7576108b7611a6d565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600060018201611ad457611ad4611a6d565b506001019056fea2646970667358221220d84cc3f7df920aed2308d44545c280628a1d684f0e8437a965a910354d804e3a64736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "The payment attestation should be signed using the EIP-712 standard",
    "kind": "dev",
    "methods": {
      "addPaymentMethod(bytes32)": {
        "params": {
          "_paymentMethod": "The payment method hash; Hash the payment method name in lowercase"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removePaymentMethod(bytes32)": {
        "params": {
          "_paymentMethod": "The payment method to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAttestationVerifier(address)": {
        "params": {
          "_newVerifier": "The new attestation verifier address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifyPayment((bytes32,bytes,bytes))": {
        "details": "Ensure the orchestrator verifies the intent exists before calling this function",
        "params": {
          "_verifyPaymentData": "Payment proof and intent details required for verification"
        },
        "returns": {
          "result": "The payment verification result containing success status, intent hash, and release amount"
        }
      }
    },
    "title": "UnifiedPaymentVerifier",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PaymentVerified(bytes32,bytes32,bytes32,uint256,uint256,bytes32,bytes32)": {
        "notice": "Capture and emit payment details for offchain reconciliation"
      }
    },
    "kind": "user",
    "methods": {
      "addPaymentMethod(bytes32)": {
        "notice": "ONLY OWNER: Adds a new payment method with timestamp buffer"
      },
      "removePaymentMethod(bytes32)": {
        "notice": "ONLY OWNER: Removes a payment method and associated configuration"
      },
      "setAttestationVerifier(address)": {
        "notice": "Updates the attestation verifier contract"
      },
      "verifyPayment((bytes32,bytes,bytes))": {
        "notice": "ONLY ORCHESTRATOR: Verifies a standardized payment attestation generated by the attestation service. "
      }
    },
    "notice": "Verifies payment proofs for multiple payment methods. This is a unified verifier that  replaces individual payment verifiers (VenmoVerifier, PayPalVerifier, etc.) with a single  configurable contract.  Key features: - Supports multiple payment methods, each with custom configuration - Uses AttestationVerifier to validate offchain payment attestations    - Ensures trust anchor integrity for off-chain verification processes - Verifies standardized payment details against provided data",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/unifiedVerifier/UnifiedPaymentVerifier.sol:UnifiedPaymentVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1521,
        "contract": "contracts/unifiedVerifier/UnifiedPaymentVerifier.sol:UnifiedPaymentVerifier",
        "label": "attestationVerifier",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAttestationVerifier)559"
      },
      {
        "astId": 1524,
        "contract": "contracts/unifiedVerifier/UnifiedPaymentVerifier.sol:UnifiedPaymentVerifier",
        "label": "paymentMethods",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 1528,
        "contract": "contracts/unifiedVerifier/UnifiedPaymentVerifier.sol:UnifiedPaymentVerifier",
        "label": "isPaymentMethod",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAttestationVerifier)559": {
        "encoding": "inplace",
        "label": "contract IAttestationVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}