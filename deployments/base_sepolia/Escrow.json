{
  "address": "0x2CE748dd6fCB8bcCD0837E1bb42dC6DE91213203",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_paymentVerifierRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_makerProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_makerFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dustThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxIntentsPerDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intentExpirationPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "AmountAboveMax",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "AmountBelowMin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "AmountExceedsAvailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length2",
          "type": "uint256"
        }
      ],
      "name": "ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        }
      ],
      "name": "CurrencyAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        }
      ],
      "name": "CurrencyNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        }
      ],
      "name": "CurrencyNotSupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "name": "DelegateNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "currentState",
          "type": "bool"
        }
      ],
      "name": "DepositAlreadyInState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "name": "DepositNotAcceptingIntents",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "name": "DepositNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyPayeeDetails",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        }
      ],
      "name": "FeeExceedsMaximum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientDepositLiquidity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        }
      ],
      "name": "IntentNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "InvalidRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReferrerFeeConfiguration",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "current",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "MaxIntentsExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "PaymentMethodAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "PaymentMethodNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "PaymentMethodNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "authorized",
          "type": "address"
        }
      ],
      "name": "UnauthorizedCaller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "UnauthorizedCallerOrDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroConversionRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroMinValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "acceptingIntents",
          "type": "bool"
        }
      ],
      "name": "DepositAcceptingIntentsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "DepositClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        }
      ],
      "name": "DepositCurrencyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "currencyCode",
          "type": "bytes32"
        }
      ],
      "name": "DepositCurrencyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "DepositDelegateRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "DepositDelegateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositFundsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IEscrow.Range",
          "name": "intentAmountRange",
          "type": "tuple"
        }
      ],
      "name": "DepositIntentAmountRangeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "currency",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinConversionRate",
          "type": "uint256"
        }
      ],
      "name": "DepositMinConversionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "payeeDetails",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "intentGatingService",
          "type": "address"
        }
      ],
      "name": "DepositPaymentMethodAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "DepositPaymentMethodRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IEscrow.Range",
          "name": "intentAmountRange",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "intentGuardian",
          "type": "address"
        }
      ],
      "name": "DepositReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "acceptingIntents",
          "type": "bool"
        }
      ],
      "name": "DepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dustAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "makerFeeRecipient",
          "type": "address"
        }
      ],
      "name": "DustCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dustThreshold",
          "type": "uint256"
        }
      ],
      "name": "DustThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "name": "FundsLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferredAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "makerFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "referrerFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "FundsUnlockedAndTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "intentExpirationPeriod",
          "type": "uint256"
        }
      ],
      "name": "IntentExpirationPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "intentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExpiryTime",
          "type": "uint256"
        }
      ],
      "name": "IntentExpiryExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "makerFeeRecipient",
          "type": "address"
        }
      ],
      "name": "MakerFeeRecipientUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectedFees",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "makerFeeRecipient",
          "type": "address"
        }
      ],
      "name": "MakerFeesCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "makerProtocolFee",
          "type": "uint256"
        }
      ],
      "name": "MakerProtocolFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxIntentsPerDeposit",
          "type": "uint256"
        }
      ],
      "name": "MaxIntentsPerDepositUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDepositAmount",
          "type": "uint256"
        }
      ],
      "name": "MinDepositAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "orchestrator",
          "type": "address"
        }
      ],
      "name": "OrchestratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "paymentVerifierRegistry",
          "type": "address"
        }
      ],
      "name": "PaymentVerifierRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectedFees",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "ReferrerFeesCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "minConversionRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEscrow.Currency[]",
          "name": "_currencies",
          "type": "tuple[]"
        }
      ],
      "name": "addCurrenciesToDepositPaymentMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addFundsToDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_paymentMethods",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "intentGatingService",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "payeeDetails",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IEscrow.DepositPaymentMethodData[]",
          "name": "_paymentMethodData",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "code",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "minConversionRate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEscrow.Currency[][]",
          "name": "_currencies",
          "type": "tuple[][]"
        }
      ],
      "name": "addPaymentMethodsToDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "min",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "max",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IEscrow.Range",
              "name": "intentAmountRange",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "paymentMethods",
              "type": "bytes32[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "intentGatingService",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "payeeDetails",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IEscrow.DepositPaymentMethodData[]",
              "name": "paymentMethodData",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "code",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "minConversionRate",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IEscrow.Currency[][]",
              "name": "currencies",
              "type": "tuple[][]"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "intentGuardian",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referrerFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEscrow.CreateDepositParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "createDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dustThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_additionalTime",
          "type": "uint256"
        }
      ],
      "name": "extendIntentExpiry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getAccountDeposits",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getDeposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "min",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "max",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IEscrow.Range",
              "name": "intentAmountRange",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "acceptingIntents",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "remainingDeposits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outstandingIntentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerProtocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reservedMakerFees",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accruedMakerFees",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accruedReferrerFees",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "intentGuardian",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referrerFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEscrow.Deposit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "getDepositCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_currencyCode",
          "type": "bytes32"
        }
      ],
      "name": "getDepositCurrencyMinRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        }
      ],
      "name": "getDepositIntent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "intentHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEscrow.Intent",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getDepositIntentHashes",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "getDepositPaymentMethodData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "intentGatingService",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "payeeDetails",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IEscrow.DepositPaymentMethodData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getDepositPaymentMethods",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "getExpiredIntents",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "expiredIntents",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "reclaimedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "intentExpirationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "lockFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makerFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makerProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxIntentsPerDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orchestrator",
      "outputs": [
        {
          "internalType": "contract IOrchestrator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentVerifierRegistry",
      "outputs": [
        {
          "internalType": "contract IPaymentVerifierRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "pruneExpiredIntents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_currencyCode",
          "type": "bytes32"
        }
      ],
      "name": "removeCurrencyFromDepositPaymentMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "removeDepositDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeFundsFromDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "removePaymentMethodFromDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_acceptingIntents",
          "type": "bool"
        }
      ],
      "name": "setDepositAcceptingIntents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDepositDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dustThreshold",
          "type": "uint256"
        }
      ],
      "name": "setDustThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_intentExpirationPeriod",
          "type": "uint256"
        }
      ],
      "name": "setIntentExpirationPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_makerFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setMakerFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_makerProtocolFee",
          "type": "uint256"
        }
      ],
      "name": "setMakerProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxIntentsPerDeposit",
          "type": "uint256"
        }
      ],
      "name": "setMaxIntentsPerDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_orchestrator",
          "type": "address"
        }
      ],
      "name": "setOrchestrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentVerifierRegistry",
          "type": "address"
        }
      ],
      "name": "setPaymentVerifierRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_transferAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "unlockAndTransferFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_intentHash",
          "type": "bytes32"
        }
      ],
      "name": "unlockFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "max",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEscrow.Range",
          "name": "_intentAmountRange",
          "type": "tuple"
        }
      ],
      "name": "updateDepositIntentAmountRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_fiatCurrency",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_newMinConversionRate",
          "type": "uint256"
        }
      ],
      "name": "updateDepositMinConversionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositId",
          "type": "uint256"
        }
      ],
      "name": "withdrawDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f7eb2e3aa0c0f0b5c6f83d1dceeee858009a1468db74f974bc0c8709674623b",
  "receipt": {
    "to": null,
    "from": "0x84e113087C97Cd80eA9D78983D4B8Ff61ECa1929",
    "contractAddress": "0x2CE748dd6fCB8bcCD0837E1bb42dC6DE91213203",
    "transactionIndex": 10,
    "gasUsed": "4340284",
    "logsBloom": "0x
    "blockHash": "0xb969b1e8adf09c972d276085fde13784e731635bd6fca7a6516209e7d1200a4a",
    "transactionHash": "0x8f7eb2e3aa0c0f0b5c6f83d1dceeee858009a1468db74f974bc0c8709674623b",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 30306103,
        "transactionHash": "0x8f7eb2e3aa0c0f0b5c6f83d1dceeee858009a1468db74f974bc0c8709674623b",
        "address": "0x2CE748dd6fCB8bcCD0837E1bb42dC6DE91213203",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0xb969b1e8adf09c972d276085fde13784e731635bd6fca7a6516209e7d1200a4a"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 30306103,
        "transactionHash": "0x8f7eb2e3aa0c0f0b5c6f83d1dceeee858009a1468db74f974bc0c8709674623b",
        "address": "0x2CE748dd6fCB8bcCD0837E1bb42dC6DE91213203",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929"
        ],
        "data": "0x",
        "logIndex": 67,
        "blockHash": "0xb969b1e8adf09c972d276085fde13784e731635bd6fca7a6516209e7d1200a4a"
      }
    ],
    "blockNumber": 30306103,
    "cumulativeGasUsed": "7493115",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x84e113087C97Cd80eA9D78983D4B8Ff61ECa1929",
    84532,
    "0xFC9FF90C16e73143e7AF9DB7c4BA96F2367ebE26",
    "0",
    "0x84e113087C97Cd80eA9D78983D4B8Ff61ECa1929",
    "100000",
    200,
    "3600"
  ],
  "numDeployments": 1,
  "solcInputHash": "a8b7ca78066148b53bbe418be6e5d05f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentVerifierRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_makerProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_makerFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dustThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIntentsPerDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intentExpirationPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"AmountAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"AmountBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"AmountExceedsAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length2\",\"type\":\"uint256\"}],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"CurrencyAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"CurrencyNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"CurrencyNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"DelegateNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"currentState\",\"type\":\"bool\"}],\"name\":\"DepositAlreadyInState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"DepositNotAcceptingIntents\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"DepositNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyPayeeDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"name\":\"FeeExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientDepositLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"}],\"name\":\"IntentNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"InvalidRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReferrerFeeConfiguration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"MaxIntentsExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"PaymentMethodAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"PaymentMethodNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"PaymentMethodNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorized\",\"type\":\"address\"}],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"UnauthorizedCallerOrDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroConversionRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMinValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptingIntents\",\"type\":\"bool\"}],\"name\":\"DepositAcceptingIntentsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"DepositClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"name\":\"DepositCurrencyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"currencyCode\",\"type\":\"bytes32\"}],\"name\":\"DepositCurrencyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"DepositDelegateRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"DepositDelegateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositFundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IEscrow.Range\",\"name\":\"intentAmountRange\",\"type\":\"tuple\"}],\"name\":\"DepositIntentAmountRangeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinConversionRate\",\"type\":\"uint256\"}],\"name\":\"DepositMinConversionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"payeeDetails\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"}],\"name\":\"DepositPaymentMethodAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"DepositPaymentMethodRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IEscrow.Range\",\"name\":\"intentAmountRange\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"intentGuardian\",\"type\":\"address\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptingIntents\",\"type\":\"bool\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dustAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"makerFeeRecipient\",\"type\":\"address\"}],\"name\":\"DustCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dustThreshold\",\"type\":\"uint256\"}],\"name\":\"DustThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"FundsLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferredAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"makerFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FundsUnlockedAndTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intentExpirationPeriod\",\"type\":\"uint256\"}],\"name\":\"IntentExpirationPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpiryTime\",\"type\":\"uint256\"}],\"name\":\"IntentExpiryExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"makerFeeRecipient\",\"type\":\"address\"}],\"name\":\"MakerFeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectedFees\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"makerFeeRecipient\",\"type\":\"address\"}],\"name\":\"MakerFeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"makerProtocolFee\",\"type\":\"uint256\"}],\"name\":\"MakerProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxIntentsPerDeposit\",\"type\":\"uint256\"}],\"name\":\"MaxIntentsPerDepositUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"MinDepositAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"orchestrator\",\"type\":\"address\"}],\"name\":\"OrchestratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentVerifierRegistry\",\"type\":\"address\"}],\"name\":\"PaymentVerifierRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectedFees\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerFeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minConversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Currency[]\",\"name\":\"_currencies\",\"type\":\"tuple[]\"}],\"name\":\"addCurrenciesToDepositPaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addFundsToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_paymentMethods\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payeeDetails\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEscrow.DepositPaymentMethodData[]\",\"name\":\"_paymentMethodData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minConversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Currency[][]\",\"name\":\"_currencies\",\"type\":\"tuple[][]\"}],\"name\":\"addPaymentMethodsToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Range\",\"name\":\"intentAmountRange\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"paymentMethods\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payeeDetails\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEscrow.DepositPaymentMethodData[]\",\"name\":\"paymentMethodData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minConversionRate\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Currency[][]\",\"name\":\"currencies\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"intentGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.CreateDepositParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"createDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dustThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_additionalTime\",\"type\":\"uint256\"}],\"name\":\"extendIntentExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountDeposits\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Range\",\"name\":\"intentAmountRange\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"acceptingIntents\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"remainingDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outstandingIntentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservedMakerFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedMakerFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedReferrerFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"intentGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"getDepositCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_currencyCode\",\"type\":\"bytes32\"}],\"name\":\"getDepositCurrencyMinRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"}],\"name\":\"getDepositIntent\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Intent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDepositIntentHashes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"getDepositPaymentMethodData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"intentGatingService\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payeeDetails\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IEscrow.DepositPaymentMethodData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDepositPaymentMethods\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getExpiredIntents\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"expiredIntents\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"reclaimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intentExpirationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxIntentsPerDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orchestrator\",\"outputs\":[{\"internalType\":\"contract IOrchestrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentVerifierRegistry\",\"outputs\":[{\"internalType\":\"contract IPaymentVerifierRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"pruneExpiredIntents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_currencyCode\",\"type\":\"bytes32\"}],\"name\":\"removeCurrencyFromDepositPaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"removeDepositDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeFundsFromDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"removePaymentMethodFromDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_acceptingIntents\",\"type\":\"bool\"}],\"name\":\"setDepositAcceptingIntents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDepositDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dustThreshold\",\"type\":\"uint256\"}],\"name\":\"setDustThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_intentExpirationPeriod\",\"type\":\"uint256\"}],\"name\":\"setIntentExpirationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_makerFeeRecipient\",\"type\":\"address\"}],\"name\":\"setMakerFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_makerProtocolFee\",\"type\":\"uint256\"}],\"name\":\"setMakerProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxIntentsPerDeposit\",\"type\":\"uint256\"}],\"name\":\"setMaxIntentsPerDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_orchestrator\",\"type\":\"address\"}],\"name\":\"setOrchestrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentVerifierRegistry\",\"type\":\"address\"}],\"name\":\"setPaymentVerifierRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_transferAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unlockAndTransferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_intentHash\",\"type\":\"bytes32\"}],\"name\":\"unlockFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrow.Range\",\"name\":\"_intentAmountRange\",\"type\":\"tuple\"}],\"name\":\"updateDepositIntentAmountRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_fiatCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_newMinConversionRate\",\"type\":\"uint256\"}],\"name\":\"updateDepositMinConversionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addCurrenciesToDepositPaymentMethod(uint256,bytes32,(bytes32,uint256)[])\":{\"details\":\"WARNING: Adding excessive currencies may cause withdrawal to exceed gas limits. Depositors can remove entries individually if needed. Recommended: <50 currencies per payment method.\",\"params\":{\"_currencies\":\"The currencies to add (code and conversion rate)\",\"_depositId\":\"The deposit ID\",\"_paymentMethod\":\"The payment method\"}},\"addFundsToDeposit(uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to add\",\"_depositId\":\"The deposit ID to add funds to\"}},\"addPaymentMethodsToDeposit(uint256,bytes32[],(address,bytes32,bytes)[],(bytes32,uint256)[][])\":{\"details\":\"WARNING: Adding excessive payment methods or currencies may cause withdrawal to exceed gas limits. Depositors can remove entries individually if needed. Recommended: <10 payment methods, <50 currencies each.\",\"params\":{\"_currencies\":\"The currencies for the payment methods\",\"_depositId\":\"The deposit ID\",\"_paymentMethodData\":\"The payment verification data for the payment methods\",\"_paymentMethods\":\"The payment methods to add\"}},\"extendIntentExpiry(uint256,bytes32,uint256)\":{\"params\":{\"_additionalTime\":\"The additional time to extend the expiry by\",\"_depositId\":\"The deposit ID containing the intent\",\"_intentHash\":\"The intent hash to extend expiry for\"}},\"lockFunds(uint256,bytes32,uint256)\":{\"params\":{\"_amount\":\"The amount to lock\",\"_depositId\":\"The deposit ID to lock funds from\",\"_intentHash\":\"The intent hash this intent corresponds to\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pruneExpiredIntents(uint256)\":{\"params\":{\"_depositId\":\"The deposit ID to prune expired intents for\"}},\"removeCurrencyFromDepositPaymentMethod(uint256,bytes32,bytes32)\":{\"params\":{\"_currencyCode\":\"The currency code to remove\",\"_depositId\":\"The deposit ID\",\"_paymentMethod\":\"The payment method\"}},\"removeDepositDelegate(uint256)\":{\"params\":{\"_depositId\":\"The deposit ID\"}},\"removeFundsFromDeposit(uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to remove\",\"_depositId\":\"The deposit ID to remove funds from\"}},\"removePaymentMethodFromDeposit(uint256,bytes32)\":{\"params\":{\"_depositId\":\"The deposit ID\",\"_paymentMethod\":\"The payment method to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDepositAcceptingIntents(uint256,bool)\":{\"params\":{\"_acceptingIntents\":\"The new accepting intents state\",\"_depositId\":\"The deposit ID\"}},\"setDepositDelegate(uint256,address)\":{\"params\":{\"_delegate\":\"The address to set as delegate (address(0) to remove delegate)\",\"_depositId\":\"The deposit ID\"}},\"setDustThreshold(uint256)\":{\"params\":{\"_dustThreshold\":\"The new dust threshold amount\"}},\"setIntentExpirationPeriod(uint256)\":{\"params\":{\"_intentExpirationPeriod\":\"The new intent expiration period in seconds\"}},\"setMakerFeeRecipient(address)\":{\"params\":{\"_makerFeeRecipient\":\"The address to receive maker fees\"}},\"setMakerProtocolFee(uint256)\":{\"params\":{\"_makerProtocolFee\":\"The maker protocol fee in preciseUnits (1e16 = 1%)\"}},\"setMaxIntentsPerDeposit(uint256)\":{\"params\":{\"_maxIntentsPerDeposit\":\"The new maximum number of active intents per deposit\"}},\"setOrchestrator(address)\":{\"params\":{\"_orchestrator\":\"The orchestrator contract address\"}},\"setPaymentVerifierRegistry(address)\":{\"params\":{\"_paymentVerifierRegistry\":\"New payment verifier registry address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockAndTransferFunds(uint256,bytes32,uint256,address)\":{\"params\":{\"_depositId\":\"The deposit ID to transfer from\",\"_intentHash\":\"The intent hash to find and remove the intent for\",\"_to\":\"The address to transfer to (orchestrator)\",\"_transferAmount\":\"The amount to actually transfer (may be less than intent amount)\"}},\"unlockFunds(uint256,bytes32)\":{\"params\":{\"_depositId\":\"The deposit ID to unlock funds from\",\"_intentHash\":\"The intent hash to find and remove the intent for\"}},\"updateDepositIntentAmountRange(uint256,(uint256,uint256))\":{\"params\":{\"_depositId\":\"The deposit ID\",\"_intentAmountRange\":\"The new intent amount range\"}},\"updateDepositMinConversionRate(uint256,bytes32,bytes32,uint256)\":{\"params\":{\"_depositId\":\"The deposit ID\",\"_fiatCurrency\":\"The fiat currency code to update the min conversion rate for\",\"_newMinConversionRate\":\"The new min conversion rate. Must be greater than 0.\",\"_paymentMethod\":\"The payment method to update the min conversion rate for\"}},\"withdrawDeposit(uint256)\":{\"params\":{\"_depositId\":\"DepositId the depositor is attempting to withdraw\"}}},\"title\":\"Escrow\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCurrenciesToDepositPaymentMethod(uint256,bytes32,(bytes32,uint256)[])\":{\"notice\":\"Allows depositor to add a new currencies to an existing verifier for a deposit.\"},\"addFundsToDeposit(uint256,uint256)\":{\"notice\":\"Adds additional funds to an existing deposit. Only the depositor can add funds. The funds will be added to the remaining deposits amount, making it available for new intents.\"},\"addPaymentMethodsToDeposit(uint256,bytes32[],(address,bytes32,bytes)[],(bytes32,uint256)[][])\":{\"notice\":\"Allows depositor to add a new payment verifier and its associated currencies to an existing deposit.\"},\"createDeposit((address,uint256,(uint256,uint256),bytes32[],(address,bytes32,bytes)[],(bytes32,uint256)[][],address,address,address,uint256))\":{\"notice\":\"Creates a deposit entry by locking liquidity in the escrow contract that can be taken by signaling intents. This function will  not add to previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount of deposit token. Every deposit specifies the payment methods it supports by specifying their verification data, supported currencies and  their min conversion rates for each payment method. Optionally, a referrer and a referrer fee can be specified. Note that the order of the payment methods, verification data, and currency data must match.\"},\"extendIntentExpiry(uint256,bytes32,uint256)\":{\"notice\":\"INTENT GUARDIAN ONLY: Extends the expiry time of an existing intent. Only callable by intent guardian. \"},\"lockFunds(uint256,bytes32,uint256)\":{\"notice\":\"ORCHESTRATOR ONLY: Locks funds for an intent with expiry time. Only callable by orchestrator.\"},\"pauseEscrow()\":{\"notice\":\"GOVERNANCE ONLY: Pauses deposit modifications and new deposit creation.  Functionalities that are paused: - Deposit creation (createDeposit) - Adding/removing funds to deposits (addFundsToDeposit, removeFundsFromDeposit) - Updating deposit parameters (conversion rates, intent ranges, accepting intents state) - Adding/removing payment methods and currencies Functionalities that remain unpaused to allow users to retrieve funds: - Full deposit withdrawal (withdrawDeposit) - Delegate management (setDepositDelegate, removeDepositDelegate) - Expired intent pruning (pruneExpiredIntents) - Orchestrator operations (lockFunds, unlockFunds, unlockAndTransferFunds) - Intent expiry extensions by guardian - All view functions\"},\"pruneExpiredIntents(uint256)\":{\"notice\":\"ANYONE: Can be called by anyone to clean up expired intents. \"},\"removeCurrencyFromDepositPaymentMethod(uint256,bytes32,bytes32)\":{\"notice\":\"Allows depositor to remove an existing currency from a verifier for a deposit.\"},\"removeDepositDelegate(uint256)\":{\"notice\":\"Allows depositor to remove the delegate for a specific deposit\"},\"removeFundsFromDeposit(uint256,uint256)\":{\"notice\":\"Removes funds from an existing deposit. Only the depositor can remove funds. If the amount to remove is greater than the remaining deposits, then expired intents will be pruned to reclaim liquidity. If the remaining deposits is less than the min intent amount, then the deposit will be marked as not accepting intents. Reserved maker fees remain locked until full withdrawal via withdrawDeposit().\"},\"removePaymentMethodFromDeposit(uint256,bytes32)\":{\"notice\":\"Allows depositor to remove an existing payment verifier from a deposit.  NOTE: This function does not delete the veirifier data, it only removes the verifier from the deposit.\"},\"setDepositAcceptingIntents(uint256,bool)\":{\"notice\":\"Allows depositor or delegateto set the accepting intents state for a deposit.\"},\"setDepositDelegate(uint256,address)\":{\"notice\":\"Allows depositor to set a delegate address that can manage a specific deposit\"},\"setDustThreshold(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Sets the dust threshold below which deposits can be closed automatically.\"},\"setIntentExpirationPeriod(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Sets the intent expiration period.\"},\"setMakerFeeRecipient(address)\":{\"notice\":\"GOVERNANCE ONLY: Sets the address that receives maker protocol fees.\"},\"setMakerProtocolFee(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Sets the maker protocol fee rate. This fee is charged to makers upon fulfillment of  intents.\"},\"setMaxIntentsPerDeposit(uint256)\":{\"notice\":\"GOVERNANCE ONLY: Sets the maximum number of active intents per deposit.\"},\"setOrchestrator(address)\":{\"notice\":\"NEW: Sets the orchestrator contract address. Only callable by owner.\"},\"setPaymentVerifierRegistry(address)\":{\"notice\":\"GOVERNANCE ONLY: Updates the payment verifier registry address.\"},\"unlockAndTransferFunds(uint256,bytes32,uint256,address)\":{\"notice\":\"ORCHESTRATOR ONLY: Unlocks and transfers funds from a fulfilled intent by removing the specific intent. Only callable by orchestrator. \"},\"unlockFunds(uint256,bytes32)\":{\"notice\":\"ORCHESTRATOR ONLY: Unlocks funds from a cancelled intent by removing the specific intent.  Only callable by orchestrator. \"},\"unpauseEscrow()\":{\"notice\":\"GOVERNANCE ONLY: Restarts paused functionality for the escrow.\"},\"updateDepositIntentAmountRange(uint256,(uint256,uint256))\":{\"notice\":\"Allows depositor to update the intent amount range for a deposit. Since intent's are already created within the previous intent amount range, changing the intent amount range will not affect any intents that have already been signaled.\"},\"updateDepositMinConversionRate(uint256,bytes32,bytes32,uint256)\":{\"notice\":\"Only callable by the depositor for a deposit. Allows depositor to update the min conversion rate for a currency for a  payment verifier. Since intent's store the conversion rate at the time of intent, changing the min conversion rate will not affect any intents that have already been signaled.\"},\"withdrawDeposit(uint256)\":{\"notice\":\"Depositor is returned all remaining deposits, any outstanding intents that are expired, and unused maker fees. Only the depositor can withdraw. If an intent is not expired then those funds will not be returned. Deposit is marked as to not accept new intents and the funds locked due to intents can be withdrawn once they expire by calling this function again. Deposit will be deleted and accrued maker fees collected to protocol as long as there are no more outstanding intents.\"}},\"notice\":\"Escrows deposits and manages deposit lifecycle.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Escrow.sol\":\"Escrow\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Escrow.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { SignatureChecker } from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"./external/AddressArrayUtils.sol\\\";\\nimport { Bytes32ArrayUtils } from \\\"./external/Bytes32ArrayUtils.sol\\\";\\nimport { StringArrayUtils } from \\\"./external/StringArrayUtils.sol\\\";\\nimport { Uint256ArrayUtils } from \\\"./external/Uint256ArrayUtils.sol\\\";\\n\\nimport { IEscrow } from \\\"./interfaces/IEscrow.sol\\\";\\nimport { IOrchestrator } from \\\"./interfaces/IOrchestrator.sol\\\";\\nimport { IPostIntentHook } from \\\"./interfaces/IPostIntentHook.sol\\\";\\nimport { IPaymentVerifier } from \\\"./interfaces/IPaymentVerifier.sol\\\";\\nimport { IPaymentVerifierRegistry } from \\\"./interfaces/IPaymentVerifierRegistry.sol\\\";\\nimport { IPostIntentHookRegistry } from \\\"./interfaces/IPostIntentHookRegistry.sol\\\";\\nimport { IRelayerRegistry } from \\\"./interfaces/IRelayerRegistry.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title Escrow\\n * @notice Escrows deposits and manages deposit lifecycle.\\n */\\ncontract Escrow is Ownable, Pausable, IEscrow {\\n\\n    using AddressArrayUtils for address[];\\n    using Bytes32ArrayUtils for bytes32[];\\n    using ECDSA for bytes32;\\n    using SafeERC20 for IERC20;\\n    using SignatureChecker for address;\\n    using StringArrayUtils for string[];\\n    using Uint256ArrayUtils for uint256[];\\n\\n    /* ============ Constants ============ */\\n    uint256 internal constant PRECISE_UNIT = 1e18;\\n    uint256 internal constant MAX_MAKER_FEE = 5e16;                 // 5% max maker fee\\n    uint256 internal constant MAX_REFERRER_FEE = 5e16;             // 5% max referrer fee\\n    uint256 internal constant MAX_DUST_THRESHOLD = 1e6;            // 1 USDC\\n    uint256 internal constant MAX_TOTAL_INTENT_EXPIRATION_PERIOD = 86400 * 5; // 5 days\\n    \\n    /* ============ State Variables ============ */\\n\\n    IOrchestrator public orchestrator;                               // Address of the orchestrator contract\\n    IPaymentVerifierRegistry public paymentVerifierRegistry;         // Address of the payment verifier registry contract\\n    uint256 immutable public chainId;                                // chainId of the chain the escrow is deployed on\\n\\n    mapping(address => uint256[]) internal accountDeposits;          // Mapping of address to depositIds\\n\\n    // Mapping of depositId to verifier address to deposit's verification data. A single deposit can support multiple payment \\n    // services. Each payment service has it's own verification data which includes the payee details hash and the data used for \\n    // payment verification.\\n    // Example: Deposit 1 => Venmo => payeeDetails: 0x123, data: 0x456\\n    //                    => Revolut => payeeDetails: 0x789, data: 0xabc\\n    mapping(uint256 => mapping(bytes32 => DepositPaymentMethodData)) internal depositPaymentMethodData;\\n    mapping(uint256 => bytes32[]) internal depositPaymentMethods;          // Handy mapping to get all payment methods for a deposit\\n    \\n    // Mapping of depositId to verifier address to mapping of fiat currency to min conversion rate. Each payment service can support\\n    // multiple currencies. Depositor can specify list of currencies and min conversion rates for each payment service.\\n    // Example: Deposit 1 => Venmo => USD: 1e18\\n    //                    => Revolut => USD: 1e18, EUR: 1.2e18, SGD: 1.5e18\\n    mapping(uint256 => mapping(bytes32 => mapping(bytes32 => uint256))) internal depositCurrencyMinRate;\\n    mapping(uint256 => mapping(bytes32 => bytes32[])) internal depositCurrencies; // Handy mapping to get all currencies for a deposit and verifier\\n\\n    mapping(uint256 => Deposit) internal deposits;                          // Mapping of depositIds to deposit structs\\n    mapping(uint256 => bytes32[]) internal depositIntentHashes;             // Mapping of depositId to array of intentHashes\\n    mapping(uint256 => mapping(bytes32 => Intent)) internal depositIntents; // Mapping of depositId to intentHash to intent\\n\\n    uint256 public depositCounter;          // Counter for depositIds\\n    \\n    uint256 public makerProtocolFee;        // Protocol fee taken from maker (in preciseUnits, 1e16 = 1%)\\n    address public makerFeeRecipient;       // Address that receives maker protocol fees\\n    uint256 public dustThreshold;           // Amount below which deposits are considered dust and can be closed\\n    uint256 public maxIntentsPerDeposit;    // Maximum active intents per deposit (suggested to keep below 100 to prevent deposit withdraw DOS)\\n    uint256 public intentExpirationPeriod;  // Time period after which an intent expires\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * @notice Modifier to check if caller is depositor or their delegate for a specific deposit\\n     * @param _depositId The deposit ID to check authorization for\\n     */\\n    modifier onlyDepositorOrDelegate(uint256 _depositId) {\\n        Deposit storage deposit = deposits[_depositId];\\n        if (!(deposit.depositor == msg.sender || \\n            (deposit.delegate != address(0) && deposit.delegate == msg.sender))) {\\n            revert UnauthorizedCallerOrDelegate(msg.sender, deposit.depositor, deposit.delegate);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to restrict access to orchestrator-only functions\\n     */\\n    modifier onlyOrchestrator() {\\n        if (msg.sender != address(orchestrator)) revert UnauthorizedCaller(msg.sender, address(orchestrator));\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _owner,\\n        uint256 _chainId,\\n        address _paymentVerifierRegistry,\\n        uint256 _makerProtocolFee,\\n        address _makerFeeRecipient,\\n        uint256 _dustThreshold,\\n        uint256 _maxIntentsPerDeposit,\\n        uint256 _intentExpirationPeriod\\n    )\\n        Ownable()\\n    {\\n        chainId = _chainId;\\n        paymentVerifierRegistry = IPaymentVerifierRegistry(_paymentVerifierRegistry);\\n        makerProtocolFee = _makerProtocolFee;\\n        makerFeeRecipient = _makerFeeRecipient;\\n        dustThreshold = _dustThreshold;\\n        maxIntentsPerDeposit = _maxIntentsPerDeposit;\\n        intentExpirationPeriod = _intentExpirationPeriod;\\n\\n        transferOwnership(_owner);\\n    }\\n\\n    /* ============ Deposit Owner Only (External Functions) ============ */\\n\\n    /**\\n     * @notice Creates a deposit entry by locking liquidity in the escrow contract that can be taken by signaling intents. This function will \\n     * not add to previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount\\n     * of deposit token. Every deposit specifies the payment methods it supports by specifying their verification data, supported currencies and \\n     * their min conversion rates for each payment method. Optionally, a referrer and a referrer fee can be specified.\\n     * Note that the order of the payment methods, verification data, and currency data must match.\\n     */\\n    function createDeposit(CreateDepositParams calldata _params) external whenNotPaused {\\n        // Checks\\n        if (_params.intentAmountRange.min == 0) revert ZeroMinValue();\\n        if (_params.intentAmountRange.min > _params.intentAmountRange.max) { \\n            revert InvalidRange(_params.intentAmountRange.min, _params.intentAmountRange.max);\\n        }\\n\\n        // Validate referrer fee configuration\\n        if (_params.referrerFee > MAX_REFERRER_FEE) revert FeeExceedsMaximum(_params.referrerFee, MAX_REFERRER_FEE);\\n        if (_params.referrer == address(0) && _params.referrerFee != 0) revert InvalidReferrerFeeConfiguration();\\n\\n        // Calculate maker fees and net deposit amount\\n        uint256 totalFees = 0;\\n        if (makerProtocolFee > 0) {\\n            totalFees += (_params.amount * makerProtocolFee) / PRECISE_UNIT;\\n        }\\n        if (_params.referrerFee > 0) {\\n            totalFees += (_params.amount * _params.referrerFee) / PRECISE_UNIT;\\n        }\\n        uint256 netDepositAmount = _params.amount - totalFees;\\n        if (netDepositAmount < _params.intentAmountRange.min) {\\n            revert AmountBelowMin(netDepositAmount, _params.intentAmountRange.min);\\n        }\\n        \\n        // Effects\\n        uint256 depositId = depositCounter++;\\n        accountDeposits[msg.sender].push(depositId);\\n        deposits[depositId] = Deposit({\\n            depositor: msg.sender,\\n            delegate: _params.delegate,\\n            token: _params.token,\\n            amount: _params.amount,\\n            intentAmountRange: _params.intentAmountRange,\\n            acceptingIntents: true,\\n            remainingDeposits: netDepositAmount,    // Net amount available for intents\\n            outstandingIntentAmount: 0,\\n            makerProtocolFee: makerProtocolFee,\\n            reservedMakerFees: totalFees,\\n            accruedMakerFees: 0,\\n            accruedReferrerFees: 0,\\n            intentGuardian: _params.intentGuardian,\\n            referrer: _params.referrer,\\n            referrerFee: _params.referrerFee\\n        });\\n\\n        emit DepositReceived(\\n            depositId, \\n            msg.sender, \\n            _params.token, \\n            _params.amount, \\n            _params.intentAmountRange, \\n            _params.delegate, \\n            _params.intentGuardian\\n        );\\n\\n        _addPaymentMethodsToDeposit(depositId, _params.paymentMethods, _params.paymentMethodData, _params.currencies);\\n\\n        // Interactions\\n        _params.token.safeTransferFrom(msg.sender, address(this), _params.amount);\\n    }\\n\\n    /**\\n     * @notice Adds additional funds to an existing deposit. Only the depositor can add funds.\\n     * The funds will be added to the remaining deposits amount, making it available for new intents.\\n     *\\n     * @param _depositId    The deposit ID to add funds to\\n     * @param _amount       The amount of tokens to add\\n     */\\n    function addFundsToDeposit(uint256 _depositId, uint256 _amount)\\n        external\\n        whenNotPaused\\n    {\\n        // Checks\\n        Deposit storage deposit = deposits[_depositId];\\n        if (deposit.depositor != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.depositor);\\n        if (_amount == 0) revert ZeroValue();\\n        \\n        // Effects\\n        uint256 additionalMakerFees = 0;\\n        uint256 additionalReferrerFees = 0;\\n\\n        if (deposit.makerProtocolFee > 0) {\\n            additionalMakerFees = (_amount * deposit.makerProtocolFee) / PRECISE_UNIT;\\n        }\\n        if (deposit.referrerFee > 0) {\\n            additionalReferrerFees = (_amount * deposit.referrerFee) / PRECISE_UNIT;\\n        }\\n\\n        uint256 totalFees = additionalMakerFees + additionalReferrerFees;\\n        uint256 netAdditionalAmount = _amount - totalFees;\\n        \\n        deposit.amount += _amount;\\n        deposit.remainingDeposits += netAdditionalAmount;\\n        deposit.reservedMakerFees += totalFees;\\n        \\n        emit DepositFundsAdded(_depositId, msg.sender, _amount);\\n        \\n        // Interactions\\n        deposit.token.safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @notice Removes funds from an existing deposit. Only the depositor can remove funds. If the amount to remove is greater\\n     * than the remaining deposits, then expired intents will be pruned to reclaim liquidity. If the remaining deposits is less than\\n     * the min intent amount, then the deposit will be marked as not accepting intents. Reserved maker fees remain locked until full\\n     * withdrawal via withdrawDeposit().\\n     *\\n     * @param _depositId    The deposit ID to remove funds from\\n     * @param _amount       The amount of tokens to remove\\n     */\\n    function removeFundsFromDeposit(uint256 _depositId, uint256 _amount)\\n        external\\n        whenNotPaused\\n    {\\n        // Checks\\n        Deposit storage deposit = deposits[_depositId];\\n        if (deposit.depositor != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.depositor);\\n        if (_amount == 0) revert ZeroValue();\\n        \\n        // Effects\\n        if (deposit.remainingDeposits < _amount) {\\n            _pruneExpiredIntents(deposit, _depositId, _amount);\\n        }\\n        \\n        deposit.amount -= _amount;\\n        deposit.remainingDeposits -= _amount;\\n        \\n        if (deposit.acceptingIntents && deposit.remainingDeposits < deposit.intentAmountRange.min) {\\n            deposit.acceptingIntents = false;\\n        }\\n\\n        emit DepositWithdrawn(_depositId, msg.sender, _amount, deposit.acceptingIntents);\\n        \\n        // Interactions\\n        deposit.token.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Depositor is returned all remaining deposits, any outstanding intents that are expired, and unused maker fees.\\n     * Only the depositor can withdraw. If an intent is not expired then those funds will not be returned. Deposit is marked\\n     * as to not accept new intents and the funds locked due to intents can be withdrawn once they expire by calling this\\n     * function again. Deposit will be deleted and accrued maker fees collected to protocol as long as there are no more\\n     * outstanding intents.\\n     *\\n     * @param _depositId   DepositId the depositor is attempting to withdraw\\n     */\\n    function withdrawDeposit(uint256 _depositId) external {\\n        // Checks\\n        Deposit storage deposit = deposits[_depositId];\\n        if (deposit.depositor != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.depositor);\\n\\n        // Effects\\n        (\\n            bytes32[] memory expiredIntents,\\n            uint256 reclaimableAmount\\n        ) = _getExpiredIntents(_depositId);\\n\\n        _pruneIntents(_depositId, expiredIntents);\\n\\n        uint256 unusedFees = deposit.reservedMakerFees - deposit.accruedMakerFees - deposit.accruedReferrerFees;\\n        uint256 returnAmount = deposit.remainingDeposits + reclaimableAmount + unusedFees;\\n        \\n        _collectAccruedMakerFees(_depositId, deposit);\\n        _collectAccruedReferrerFees(_depositId, deposit);\\n\\n        IERC20 token = deposit.token;\\n        deposit.outstandingIntentAmount -= reclaimableAmount;\\n        delete deposit.remainingDeposits;\\n        delete deposit.acceptingIntents;\\n        delete deposit.accruedMakerFees;\\n        delete deposit.accruedReferrerFees;\\n\\n        emit DepositWithdrawn(_depositId, deposit.depositor, returnAmount, false);\\n\\n        if (deposit.outstandingIntentAmount == 0) {\\n            _closeDeposit(_depositId, deposit);\\n        }\\n        \\n        // Interactions\\n        token.safeTransfer(msg.sender, returnAmount);\\n    }\\n\\n    /**\\n     * @notice Allows depositor to set a delegate address that can manage a specific deposit\\n     *\\n     * @param _depositId    The deposit ID\\n     * @param _delegate     The address to set as delegate (address(0) to remove delegate)\\n     */\\n    \\n    function setDepositDelegate(uint256 _depositId, address _delegate) external {\\n        Deposit storage deposit = deposits[_depositId];\\n        if (deposit.depositor != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.depositor);\\n        if (_delegate == address(0)) revert ZeroAddress();\\n        \\n        deposit.delegate = _delegate;\\n        \\n        emit DepositDelegateSet(_depositId, msg.sender, _delegate);\\n    }\\n\\n    /**\\n     * @notice Allows depositor to remove the delegate for a specific deposit\\n     *\\n     * @param _depositId    The deposit ID\\n     */\\n    function removeDepositDelegate(uint256 _depositId) external {\\n        Deposit storage deposit = deposits[_depositId];\\n        if (deposit.depositor != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.depositor);\\n        if (deposit.delegate == address(0)) revert DelegateNotFound(_depositId);\\n        \\n        delete deposit.delegate;\\n        \\n        emit DepositDelegateRemoved(_depositId, msg.sender);\\n    }\\n\\n    /* ============ Deposit Owner OR Delegate Only (External Functions) ============ */\\n\\n    /**\\n     * @notice Only callable by the depositor for a deposit. Allows depositor to update the min conversion rate for a currency for a \\n     * payment verifier. Since intent's store the conversion rate at the time of intent, changing the min conversion rate will not affect\\n     * any intents that have already been signaled.\\n     *\\n     * @param _depositId                The deposit ID\\n     * @param _paymentMethod            The payment method to update the min conversion rate for\\n     * @param _fiatCurrency             The fiat currency code to update the min conversion rate for\\n     * @param _newMinConversionRate     The new min conversion rate. Must be greater than 0.\\n     */\\n    function updateDepositMinConversionRate(\\n        uint256 _depositId, \\n        bytes32 _paymentMethod, \\n        bytes32 _fiatCurrency, \\n        uint256 _newMinConversionRate\\n    )\\n        external\\n        whenNotPaused\\n        onlyDepositorOrDelegate(_depositId)\\n    {\\n        uint256 oldMinConversionRate = depositCurrencyMinRate[_depositId][_paymentMethod][_fiatCurrency];\\n\\n        if (oldMinConversionRate == 0) revert CurrencyNotSupported(_paymentMethod, _fiatCurrency);\\n        if (_newMinConversionRate == 0) revert ZeroConversionRate();\\n\\n        depositCurrencyMinRate[_depositId][_paymentMethod][_fiatCurrency] = _newMinConversionRate;\\n\\n        emit DepositMinConversionRateUpdated(_depositId, _paymentMethod, _fiatCurrency, _newMinConversionRate);\\n    }\\n\\n    /**\\n     * @notice Allows depositor to update the intent amount range for a deposit. Since intent's are already created within the\\n     * previous intent amount range, changing the intent amount range will not affect any intents that have already been signaled.\\n     *\\n     * @param _depositId                The deposit ID\\n     * @param _intentAmountRange        The new intent amount range\\n     */\\n    function updateDepositIntentAmountRange(\\n        uint256 _depositId, \\n        Range calldata _intentAmountRange\\n    )\\n        external\\n        whenNotPaused\\n        onlyDepositorOrDelegate(_depositId)\\n    {\\n        Deposit storage deposit = deposits[_depositId];\\n        if (_intentAmountRange.min == 0) revert ZeroMinValue();\\n        if (_intentAmountRange.min > _intentAmountRange.max) revert InvalidRange(_intentAmountRange.min, _intentAmountRange.max);\\n\\n        deposit.intentAmountRange = _intentAmountRange;\\n\\n        emit DepositIntentAmountRangeUpdated(_depositId, _intentAmountRange);\\n    }\\n\\n    /**\\n     * @notice Allows depositor to add a new payment verifier and its associated currencies to an existing deposit.\\n     * @dev WARNING: Adding excessive payment methods or currencies may cause withdrawal to exceed gas limits. Depositors\\n     * can remove entries individually if needed. Recommended: <10 payment methods, <50 currencies each.\\n     *\\n     * @param _depositId             The deposit ID\\n     * @param _paymentMethods        The payment methods to add\\n     * @param _paymentMethodData     The payment verification data for the payment methods\\n     * @param _currencies            The currencies for the payment methods\\n     */\\n    function addPaymentMethodsToDeposit(\\n        uint256 _depositId,\\n        bytes32[] calldata _paymentMethods,\\n        DepositPaymentMethodData[] calldata _paymentMethodData,\\n        Currency[][] calldata _currencies\\n    )\\n        external\\n        whenNotPaused\\n        onlyDepositorOrDelegate(_depositId)\\n    {\\n        _addPaymentMethodsToDeposit(_depositId, _paymentMethods, _paymentMethodData, _currencies);\\n    }\\n\\n    /**\\n     * @notice Allows depositor to remove an existing payment verifier from a deposit. \\n     * NOTE: This function does not delete the veirifier data, it only removes the verifier from the deposit.\\n     *\\n     * @param _depositId             The deposit ID\\n     * @param _paymentMethod         The payment method to remove\\n     */\\n    function removePaymentMethodFromDeposit(\\n        uint256 _depositId,\\n        bytes32 _paymentMethod\\n    )\\n        external\\n        whenNotPaused\\n        onlyDepositorOrDelegate(_depositId)\\n    {\\n        if (depositPaymentMethodData[_depositId][_paymentMethod].payeeDetails == bytes32(0)) {\\n            revert PaymentMethodNotFound(_depositId, _paymentMethod);\\n        }\\n\\n        depositPaymentMethods[_depositId].removeStorage(_paymentMethod);\\n\\n        bytes32[] storage currenciesForPaymentMethod = depositCurrencies[_depositId][_paymentMethod];\\n        for (uint256 i = 0; i < currenciesForPaymentMethod.length; i++) {\\n            bytes32 currencyCode = currenciesForPaymentMethod[i];\\n            delete depositCurrencyMinRate[_depositId][_paymentMethod][currencyCode];\\n        }\\n        delete depositCurrencies[_depositId][_paymentMethod];\\n        \\n        // Don't delete deposit payment method data to allow existing intents to be fulfilled        \\n\\n        emit DepositPaymentMethodRemoved(_depositId, _paymentMethod);\\n    }\\n\\n    /**\\n     * @notice Allows depositor to add a new currencies to an existing verifier for a deposit.\\n     * @dev WARNING: Adding excessive currencies may cause withdrawal to exceed gas limits. Depositors\\n     * can remove entries individually if needed. Recommended: <50 currencies per payment method.\\n     *\\n     * @param _depositId             The deposit ID\\n     * @param _paymentMethod         The payment method\\n     * @param _currencies            The currencies to add (code and conversion rate)\\n     */\\n    function addCurrenciesToDepositPaymentMethod(\\n        uint256 _depositId,\\n        bytes32 _paymentMethod,\\n        Currency[] calldata _currencies\\n    )\\n        external\\n        whenNotPaused\\n        onlyDepositorOrDelegate(_depositId)\\n    {\\n        bytes32 payeeDetails = depositPaymentMethodData[_depositId][_paymentMethod].payeeDetails;\\n        if (payeeDetails == bytes32(0)) revert PaymentMethodNotFound(_depositId, _paymentMethod);\\n        \\n        for (uint256 i = 0; i < _currencies.length; i++) {\\n            _addCurrencyToDeposit(\\n                _depositId, \\n                _paymentMethod, \\n                _currencies[i].code, \\n                _currencies[i].minConversionRate\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows depositor to remove an existing currency from a verifier for a deposit.\\n     *\\n     * @param _depositId             The deposit ID\\n     * @param _paymentMethod         The payment method\\n     * @param _currencyCode          The currency code to remove\\n     */\\n    function removeCurrencyFromDepositPaymentMethod(\\n        uint256 _depositId,\\n        bytes32 _paymentMethod,\\n        bytes32 _currencyCode\\n    )\\n        external\\n        whenNotPaused\\n        onlyDepositorOrDelegate(_depositId)\\n    {\\n        bytes32 payeeDetails = depositPaymentMethodData[_depositId][_paymentMethod].payeeDetails;\\n        if (payeeDetails == bytes32(0)) revert PaymentMethodNotFound(_depositId, _paymentMethod);\\n\\n        uint256 currencyMinRate = depositCurrencyMinRate[_depositId][_paymentMethod][_currencyCode];\\n        if (currencyMinRate == 0) revert CurrencyNotFound(_paymentMethod, _currencyCode);\\n\\n        depositCurrencies[_depositId][_paymentMethod].removeStorage(_currencyCode);\\n        delete depositCurrencyMinRate[_depositId][_paymentMethod][_currencyCode];\\n\\n        emit DepositCurrencyRemoved(_depositId, _paymentMethod, _currencyCode);\\n    }\\n\\n    /**\\n     * @notice Allows depositor or delegateto set the accepting intents state for a deposit.\\n     *\\n     * @param _depositId             The deposit ID\\n     * @param _acceptingIntents      The new accepting intents state\\n     */\\n    function setDepositAcceptingIntents(\\n        uint256 _depositId, \\n        bool _acceptingIntents\\n    )\\n        external\\n        whenNotPaused\\n        onlyDepositorOrDelegate(_depositId)\\n    {\\n        Deposit storage deposit = deposits[_depositId];\\n        if (deposit.acceptingIntents == _acceptingIntents) revert DepositAlreadyInState(_depositId, _acceptingIntents);\\n        // Doesn't reclaim liquidity for gas savings\\n        if (deposit.remainingDeposits == 0) revert InsufficientDepositLiquidity(_depositId, 0, 1);\\n        \\n        deposit.acceptingIntents = _acceptingIntents;\\n        emit DepositAcceptingIntentsUpdated(_depositId, _acceptingIntents);\\n    }\\n\\n    /* ============ Anyone callable (External Functions) ============ */\\n\\n    /**\\n     * @notice ANYONE: Can be called by anyone to clean up expired intents.\\n     * \\n     * @param _depositId The deposit ID to prune expired intents for\\n     */\\n    function pruneExpiredIntents(uint256 _depositId) external {\\n        _pruneExpiredIntents(deposits[_depositId], _depositId, 0);\\n    }\\n\\n    /* ============ Orchestrator-Only Locking and Unlocking Functions ============ */\\n\\n    /**\\n     * @notice ORCHESTRATOR ONLY: Locks funds for an intent with expiry time. Only callable by orchestrator.\\n     *\\n     * @param _depositId The deposit ID to lock funds from\\n     * @param _amount The amount to lock\\n     * @param _intentHash The intent hash this intent corresponds to\\n     */\\n    function lockFunds(\\n        uint256 _depositId, \\n        bytes32 _intentHash,\\n        uint256 _amount\\n    ) \\n        external \\n        onlyOrchestrator \\n    {\\n        // Checks\\n        Deposit storage deposit = deposits[_depositId];\\n        if (deposit.depositor == address(0)) revert DepositNotFound(_depositId);\\n        if (!deposit.acceptingIntents) revert DepositNotAcceptingIntents(_depositId);\\n        if (_amount < deposit.intentAmountRange.min) revert AmountBelowMin(_amount, deposit.intentAmountRange.min);\\n        if (_amount > deposit.intentAmountRange.max) revert AmountAboveMax(_amount, deposit.intentAmountRange.max);\\n        \\n        // Effects\\n        // Check if we need to reclaim expired liquidity first\\n        uint256 currentIntentCount = depositIntentHashes[_depositId].length;\\n        if (deposit.remainingDeposits < _amount || currentIntentCount >= maxIntentsPerDeposit) {\\n            _pruneExpiredIntents(deposit, _depositId, _amount);\\n\\n            currentIntentCount = depositIntentHashes[_depositId].length;\\n            if (currentIntentCount >= maxIntentsPerDeposit) {\\n                revert MaxIntentsExceeded(_depositId, currentIntentCount, maxIntentsPerDeposit);\\n            }\\n        }\\n        \\n        // Update deposit state\\n        deposit.remainingDeposits -= _amount;\\n        deposit.outstandingIntentAmount += _amount;\\n        \\n        depositIntentHashes[_depositId].push(_intentHash);\\n        uint256 expiryTime = block.timestamp + intentExpirationPeriod;\\n        depositIntents[_depositId][_intentHash] = Intent({\\n            intentHash: _intentHash,\\n            amount: _amount,\\n            timestamp: block.timestamp,\\n            expiryTime: expiryTime\\n        });\\n\\n        emit FundsLocked(_depositId, _intentHash, _amount, expiryTime);\\n    }\\n\\n    /**\\n     * @notice ORCHESTRATOR ONLY: Unlocks funds from a cancelled intent by removing the specific intent. \\n     * Only callable by orchestrator.\\n     * \\n     * @param _depositId The deposit ID to unlock funds from\\n     * @param _intentHash The intent hash to find and remove the intent for\\n     */\\n    function unlockFunds(uint256 _depositId, bytes32 _intentHash) \\n        external \\n        onlyOrchestrator \\n    {\\n        // Checks\\n        Deposit storage deposit = deposits[_depositId];\\n        Intent memory intent = depositIntents[_depositId][_intentHash];\\n\\n        if (deposit.depositor == address(0)) revert DepositNotFound(_depositId);\\n        if (intent.intentHash == bytes32(0)) revert IntentNotFound(_intentHash);\\n\\n        // Effects\\n        deposit.remainingDeposits += intent.amount;\\n        deposit.outstandingIntentAmount -= intent.amount;\\n\\n        _pruneIntent(_depositId, _intentHash);\\n\\n        emit FundsUnlocked(_depositId, _intentHash, intent.amount);\\n    }\\n\\n    /**\\n     * @notice ORCHESTRATOR ONLY: Unlocks and transfers funds from a fulfilled intent by removing the specific intent.\\n     * Only callable by orchestrator.\\n     * \\n     * @param _depositId The deposit ID to transfer from\\n     * @param _intentHash The intent hash to find and remove the intent for\\n     * @param _transferAmount The amount to actually transfer (may be less than intent amount)\\n     * @param _to The address to transfer to (orchestrator)\\n     */\\n    function unlockAndTransferFunds(\\n        uint256 _depositId, \\n        bytes32 _intentHash,\\n        uint256 _transferAmount, \\n        address _to\\n    ) \\n        external \\n        onlyOrchestrator \\n    {\\n        // Checks\\n        Deposit storage deposit = deposits[_depositId];\\n        Intent memory intent = depositIntents[_depositId][_intentHash];\\n        \\n        if (deposit.depositor == address(0)) revert DepositNotFound(_depositId);\\n        if (intent.intentHash == bytes32(0)) revert IntentNotFound(_intentHash);\\n        if (_transferAmount == 0) revert ZeroValue();\\n        if (_transferAmount > intent.amount) revert AmountExceedsAvailable(_transferAmount, intent.amount);\\n        \\n        // Effects\\n        uint256 makerFeeForThisTransfer = 0;\\n        uint256 referrerFeeForThisTransfer = 0;\\n\\n        if (deposit.makerProtocolFee > 0) {\\n            makerFeeForThisTransfer = (_transferAmount * deposit.makerProtocolFee) / PRECISE_UNIT;\\n            deposit.accruedMakerFees += makerFeeForThisTransfer;\\n        }\\n        if (deposit.referrerFee > 0) {\\n            referrerFeeForThisTransfer = (_transferAmount * deposit.referrerFee) / PRECISE_UNIT;\\n            deposit.accruedReferrerFees += referrerFeeForThisTransfer;\\n        }\\n\\n        deposit.outstandingIntentAmount -= intent.amount;\\n        \\n        // If this is a partial release, return the unused portion to remainingDeposits\\n        if (_transferAmount < intent.amount) {\\n            deposit.remainingDeposits += (intent.amount - _transferAmount);\\n        }\\n\\n        _pruneIntent(_depositId, _intentHash);\\n        \\n        IERC20 token = deposit.token;\\n        _closeDepositIfNecessary(_depositId, deposit);\\n        \\n        emit FundsUnlockedAndTransferred(\\n            _depositId, _intentHash, intent.amount, _transferAmount, makerFeeForThisTransfer, referrerFeeForThisTransfer, _to\\n        );\\n\\n        // Interactions\\n        token.safeTransfer(_to, _transferAmount);\\n    }\\n\\n    /* ============ Intent Guardian Only (External Functions) ============ */\\n\\n    /**\\n     * @notice INTENT GUARDIAN ONLY: Extends the expiry time of an existing intent. Only callable by intent guardian.\\n     * \\n     * @param _depositId The deposit ID containing the intent\\n     * @param _intentHash The intent hash to extend expiry for\\n     * @param _additionalTime The additional time to extend the expiry by\\n     */\\n    function extendIntentExpiry(\\n        uint256 _depositId, \\n        bytes32 _intentHash,\\n        uint256 _additionalTime\\n    ) \\n        external \\n    {\\n        Deposit storage deposit = deposits[_depositId];\\n        Intent storage intent = depositIntents[_depositId][_intentHash];\\n        \\n        if (deposit.depositor == address(0)) revert DepositNotFound(_depositId);\\n        if (intent.intentHash == bytes32(0)) revert IntentNotFound(_intentHash);\\n        if (deposit.intentGuardian != msg.sender) revert UnauthorizedCaller(msg.sender, deposit.intentGuardian);\\n        if (_additionalTime == 0) revert ZeroValue();\\n        if (intent.expiryTime + _additionalTime > intent.timestamp + MAX_TOTAL_INTENT_EXPIRATION_PERIOD) {\\n            revert AmountAboveMax(_additionalTime, MAX_TOTAL_INTENT_EXPIRATION_PERIOD);\\n        }\\n        \\n        intent.expiryTime += _additionalTime;\\n        \\n        emit IntentExpiryExtended(_depositId, _intentHash, intent.expiryTime);\\n    }\\n\\n    /* ============ Governance Functions ============ */\\n    \\n    /**\\n     * @notice NEW: Sets the orchestrator contract address. Only callable by owner.\\n     *\\n     * @param _orchestrator The orchestrator contract address\\n     */\\n    function setOrchestrator(address _orchestrator) external onlyOwner {\\n        if (_orchestrator == address(0)) revert ZeroAddress();\\n        \\n        orchestrator = IOrchestrator(_orchestrator);\\n        emit OrchestratorUpdated(_orchestrator);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Updates the payment verifier registry address.\\n     *\\n     * @param _paymentVerifierRegistry   New payment verifier registry address\\n     */\\n    function setPaymentVerifierRegistry(address _paymentVerifierRegistry) external onlyOwner {\\n        if (_paymentVerifierRegistry == address(0)) revert ZeroAddress();\\n        \\n        paymentVerifierRegistry = IPaymentVerifierRegistry(_paymentVerifierRegistry);\\n        emit PaymentVerifierRegistryUpdated(_paymentVerifierRegistry);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Sets the maker protocol fee rate. This fee is charged to makers upon fulfillment of \\n     * intents.\\n     *\\n     * @param _makerProtocolFee The maker protocol fee in preciseUnits (1e16 = 1%)\\n     */\\n    function setMakerProtocolFee(uint256 _makerProtocolFee) external onlyOwner {\\n        if (_makerProtocolFee > MAX_MAKER_FEE) revert AmountAboveMax(_makerProtocolFee, MAX_MAKER_FEE);\\n        \\n        makerProtocolFee = _makerProtocolFee;\\n        emit MakerProtocolFeeUpdated(_makerProtocolFee);\\n    }\\n    \\n    /**\\n     * @notice GOVERNANCE ONLY: Sets the address that receives maker protocol fees.\\n     *\\n     * @param _makerFeeRecipient The address to receive maker fees\\n     */\\n    function setMakerFeeRecipient(address _makerFeeRecipient) external onlyOwner {\\n        if (_makerFeeRecipient == address(0)) revert ZeroAddress();\\n        \\n        makerFeeRecipient = _makerFeeRecipient;\\n        emit MakerFeeRecipientUpdated(_makerFeeRecipient);\\n    }\\n    \\n    /**\\n     * @notice GOVERNANCE ONLY: Sets the dust threshold below which deposits can be closed automatically.\\n     *\\n     * @param _dustThreshold The new dust threshold amount\\n     */\\n    function setDustThreshold(uint256 _dustThreshold) external onlyOwner {\\n        if (_dustThreshold > MAX_DUST_THRESHOLD) revert AmountAboveMax(_dustThreshold, MAX_DUST_THRESHOLD);\\n        \\n        dustThreshold = _dustThreshold;\\n        emit DustThresholdUpdated(_dustThreshold);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Sets the maximum number of active intents per deposit.\\n     *\\n     * @param _maxIntentsPerDeposit The new maximum number of active intents per deposit\\n     */\\n    function setMaxIntentsPerDeposit(uint256 _maxIntentsPerDeposit) external onlyOwner {\\n        if (_maxIntentsPerDeposit == 0) revert ZeroValue();\\n        \\n        maxIntentsPerDeposit = _maxIntentsPerDeposit;\\n        emit MaxIntentsPerDepositUpdated(_maxIntentsPerDeposit);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Sets the intent expiration period.\\n     *\\n     * @param _intentExpirationPeriod The new intent expiration period in seconds\\n     */\\n    function setIntentExpirationPeriod(uint256 _intentExpirationPeriod) external onlyOwner {\\n        if (_intentExpirationPeriod == 0) revert ZeroValue();\\n        \\n        intentExpirationPeriod = _intentExpirationPeriod;\\n        emit IntentExpirationPeriodUpdated(_intentExpirationPeriod);\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Pauses deposit modifications and new deposit creation.\\n     * \\n     * Functionalities that are paused:\\n     * - Deposit creation (createDeposit)\\n     * - Adding/removing funds to deposits (addFundsToDeposit, removeFundsFromDeposit)\\n     * - Updating deposit parameters (conversion rates, intent ranges, accepting intents state)\\n     * - Adding/removing payment methods and currencies\\n     *\\n     * Functionalities that remain unpaused to allow users to retrieve funds:\\n     * - Full deposit withdrawal (withdrawDeposit)\\n     * - Delegate management (setDepositDelegate, removeDepositDelegate)\\n     * - Expired intent pruning (pruneExpiredIntents)\\n     * - Orchestrator operations (lockFunds, unlockFunds, unlockAndTransferFunds)\\n     * - Intent expiry extensions by guardian\\n     * - All view functions\\n     */\\n    function pauseEscrow() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice GOVERNANCE ONLY: Restarts paused functionality for the escrow.\\n     */\\n    function unpauseEscrow() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /* ============ External View Functions ============ */\\n\\n    function getDeposit(uint256 _depositId) external view returns (Deposit memory) {\\n        return deposits[_depositId];\\n    }\\n\\n    function getDepositIntentHashes(uint256 _depositId) external view returns (bytes32[] memory) {\\n        return depositIntentHashes[_depositId];\\n    }\\n\\n    function getDepositIntent(uint256 _depositId, bytes32 _intentHash) external view returns (Intent memory) {\\n        return depositIntents[_depositId][_intentHash];\\n    }\\n\\n    function getDepositPaymentMethods(uint256 _depositId) external view returns (bytes32[] memory) {\\n        return depositPaymentMethods[_depositId];\\n    }\\n\\n    function getDepositCurrencies(uint256 _depositId, bytes32 _paymentMethod) external view returns (bytes32[] memory) {\\n        return depositCurrencies[_depositId][_paymentMethod];\\n    }\\n\\n    function getDepositCurrencyMinRate(uint256 _depositId, bytes32 _paymentMethod, bytes32 _currencyCode) external view returns (uint256) {\\n        return depositCurrencyMinRate[_depositId][_paymentMethod][_currencyCode];\\n    }\\n\\n    function getDepositPaymentMethodData(uint256 _depositId, bytes32 _paymentMethod) external view returns (DepositPaymentMethodData memory) {\\n        return depositPaymentMethodData[_depositId][_paymentMethod];\\n    }\\n\\n    function getAccountDeposits(address _account) external view returns (uint256[] memory) {\\n        return accountDeposits[_account];\\n    }\\n    \\n    function getExpiredIntents(uint256 _depositId) external view returns (bytes32[] memory expiredIntents, uint256 reclaimedAmount) {\\n        return _getExpiredIntents(_depositId);\\n    }\\n\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\\n     * the outstanding amounts are summed and returned alongside the intentHashes.\\n     */\\n    function _getExpiredIntents(\\n        uint256 _depositId\\n    )\\n        internal\\n        view\\n        returns(bytes32[] memory expiredIntents, uint256 reclaimedAmount)\\n    {\\n        bytes32[] memory intentHashes = depositIntentHashes[_depositId];\\n        expiredIntents = new bytes32[](intentHashes.length);\\n\\n        for (uint256 i = 0; i < intentHashes.length; ++i) {\\n            Intent memory intent = depositIntents[_depositId][intentHashes[i]];\\n            if (intent.expiryTime < block.timestamp) {\\n                expiredIntents[i] = intentHashes[i];\\n                reclaimedAmount += intent.amount;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Free up deposit liquidity by removing intents that have expired. Tries to remove all expired intents that are expired\\n     * and adds the reclaimable amount to the deposit's remaining deposits. If the remaining amount including the new recovered amount\\n     * is less than the minimum required amount, this function will revert with a NotEnoughLiquidity error.\\n     */\\n    function _pruneExpiredIntents(Deposit storage _deposit, uint256 _depositId, uint256 _minRequiredAmount) internal {\\n        (\\n            bytes32[] memory expiredIntents,\\n            uint256 reclaimableAmount\\n        ) = _getExpiredIntents(_depositId);\\n        \\n        uint256 availableAmount = _deposit.remainingDeposits;\\n        availableAmount += reclaimableAmount;\\n        \\n        if (availableAmount < _minRequiredAmount) revert InsufficientDepositLiquidity(_depositId, availableAmount, _minRequiredAmount);\\n        \\n        // Prune expired intents to free up funds\\n        _pruneIntents(_depositId, expiredIntents);\\n        _deposit.remainingDeposits += reclaimableAmount;\\n        _deposit.outstandingIntentAmount -= reclaimableAmount;\\n    }\\n\\n    /**\\n     * @notice Prunes given intents from a deposit. Also calls orchestrator to clean up intents.\\n     */\\n    function _pruneIntents(uint256 _depositId, bytes32[] memory _intents) internal {\\n        // Call orchestrator to clean up intents first\\n        try IOrchestrator(orchestrator).pruneIntents(_intents) {} catch {}\\n\\n        for (uint256 i = 0; i < _intents.length; i++) {\\n            Intent memory intent = depositIntents[_depositId][_intents[i]];\\n            if (intent.intentHash != bytes32(0)) {\\n                _pruneIntent(_depositId, intent.intentHash);\\n                \\n                emit FundsUnlocked(_depositId, intent.intentHash, intent.amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Prunes an intent from a deposit. Does not call orchestrator.\\n     */\\n    function _pruneIntent(uint256 _depositId, bytes32 _intentHash) internal {\\n        delete depositIntents[_depositId][_intentHash];\\n        depositIntentHashes[_depositId].removeStorage(_intentHash);\\n    }\\n\\n    /**\\n     * @notice Removes a deposit if no outstanding intents AND remaining funds is dust. Before deletion, collects any \\n     * accrued maker fees to the protocol fee recipient and transfers any remaining dust to the protocol fee recipient.\\n     */\\n    function _closeDepositIfNecessary(uint256 _depositId, Deposit storage _deposit) internal {\\n        // If no remaining deposits, delete the acceptingIntents flag\\n        if (_deposit.remainingDeposits == 0) {\\n            delete _deposit.acceptingIntents;\\n        }\\n\\n        // Close if no outstanding intents, no remaining deposits, and no reserved fees left\\n        uint256 reservedFeesLeft = _deposit.reservedMakerFees - _deposit.accruedMakerFees - _deposit.accruedReferrerFees;\\n        uint256 totalRemaining = _deposit.remainingDeposits + reservedFeesLeft;\\n\\n        if (_deposit.outstandingIntentAmount == 0 && totalRemaining <= dustThreshold) {\\n            \\n            _collectAccruedMakerFees(_depositId, _deposit);\\n            _collectAccruedReferrerFees(_depositId, _deposit);\\n            \\n            if (totalRemaining > 0) {\\n                _deposit.token.safeTransfer(makerFeeRecipient, totalRemaining);\\n                emit DustCollected(_depositId, totalRemaining, makerFeeRecipient);\\n            }\\n            \\n            _closeDeposit(_depositId, _deposit);\\n        }\\n    }\\n\\n\\n    /**\\n     * @notice Collects any accrued maker fees to the protocol fee recipient.\\n     */\\n    function _collectAccruedMakerFees(uint256 _depositId, Deposit storage _deposit) internal {\\n        if (_deposit.accruedMakerFees > 0) {\\n            _deposit.token.safeTransfer(makerFeeRecipient, _deposit.accruedMakerFees);\\n            emit MakerFeesCollected(_depositId, _deposit.accruedMakerFees, makerFeeRecipient);\\n        }\\n    }\\n\\n    /**\\n     * @notice Collects any accrued referrer fees to the referrer.\\n     */\\n    function _collectAccruedReferrerFees(uint256 _depositId, Deposit storage _deposit) internal {\\n        if (_deposit.accruedReferrerFees > 0) {\\n            _deposit.token.safeTransfer(_deposit.referrer, _deposit.accruedReferrerFees);\\n            emit ReferrerFeesCollected(_depositId, _deposit.accruedReferrerFees, _deposit.referrer);\\n        }\\n    }\\n\\n    /**\\n     * @notice Closes a deposit. Deleting a deposit deletes it from the deposits mapping and removes tracking\\n     * it in the user's accountDeposits mapping. Also deletes the verification and currency data for the deposit.\\n     */\\n    function _closeDeposit(uint256 _depositId, Deposit storage _deposit) internal {\\n        address depositor = _deposit.depositor;\\n        accountDeposits[depositor].removeStorage(_depositId);\\n        \\n        _deleteDepositPaymentMethodAndCurrencyData(_depositId);\\n        \\n        delete deposits[_depositId];\\n        \\n        emit DepositClosed(_depositId, depositor);\\n    }\\n\\n    /**\\n     * @notice Iterates through all verifiers for a deposit and deletes the corresponding verifier data and currencies.\\n     */\\n    function _deleteDepositPaymentMethodAndCurrencyData(uint256 _depositId) internal {\\n        bytes32[] memory paymentMethods = depositPaymentMethods[_depositId];\\n        for (uint256 i = 0; i < paymentMethods.length; i++) {\\n            bytes32 paymentMethod = paymentMethods[i];\\n            delete depositPaymentMethodData[_depositId][paymentMethod];\\n            bytes32[] memory currencies = depositCurrencies[_depositId][paymentMethod];\\n            for (uint256 j = 0; j < currencies.length; j++) {\\n                delete depositCurrencyMinRate[_depositId][paymentMethod][currencies[j]];\\n            }\\n            delete depositCurrencies[_depositId][paymentMethod];\\n        }\\n        delete depositPaymentMethods[_depositId];\\n    }\\n\\n    /**\\n     * @notice Adds list of payment methods and corresponding verification data and currencies to a deposit.\\n     */\\n    function _addPaymentMethodsToDeposit(\\n        uint256 _depositId,\\n        bytes32[] calldata _paymentMethods,\\n        DepositPaymentMethodData[] calldata _paymentMethodData,\\n        Currency[][] calldata _currencies\\n    ) internal {\\n\\n        // Check that the length of the payment methods, depositPaymentMethodData, and currencies arrays are the same\\n        if (_paymentMethods.length != _paymentMethodData.length) revert ArrayLengthMismatch(_paymentMethods.length, _paymentMethodData.length);\\n        if (_paymentMethods.length != _currencies.length) revert ArrayLengthMismatch(_paymentMethods.length, _currencies.length);\\n\\n        for (uint256 i = 0; i < _paymentMethods.length; i++) {\\n            bytes32 paymentMethod = _paymentMethods[i];\\n            \\n            if (paymentMethod == bytes32(0)) revert ZeroAddress();\\n            if (!paymentVerifierRegistry.isPaymentMethod(paymentMethod)) {\\n                revert PaymentMethodNotWhitelisted(paymentMethod);\\n            }\\n            if (_paymentMethodData[i].payeeDetails == bytes32(0)) revert EmptyPayeeDetails();\\n            if (depositPaymentMethodData[_depositId][paymentMethod].payeeDetails != bytes32(0)) revert PaymentMethodAlreadyExists(_depositId, paymentMethod);\\n\\n            depositPaymentMethodData[_depositId][paymentMethod] = _paymentMethodData[i];\\n            depositPaymentMethods[_depositId].push(paymentMethod);\\n\\n            emit DepositPaymentMethodAdded(_depositId, paymentMethod, _paymentMethodData[i].payeeDetails, _paymentMethodData[i].intentGatingService);\\n\\n            for (uint256 j = 0; j < _currencies[i].length; j++) {\\n                Currency memory currency = _currencies[i][j];\\n\\n                _addCurrencyToDeposit(\\n                    _depositId, \\n                    paymentMethod, \\n                    currency.code, \\n                    currency.minConversionRate\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a currency to a deposit.\\n     */\\n    function _addCurrencyToDeposit(\\n        uint256 _depositId,\\n        bytes32 _paymentMethod,\\n        bytes32 _currencyCode,\\n        uint256 _minConversionRate\\n    ) internal {\\n        if (!paymentVerifierRegistry.isCurrency(_paymentMethod, _currencyCode)) {\\n            revert CurrencyNotSupported(_paymentMethod, _currencyCode);\\n        }\\n        if (_minConversionRate == 0) revert ZeroConversionRate();\\n        if (depositCurrencyMinRate[_depositId][_paymentMethod][_currencyCode] != 0) {\\n            revert CurrencyAlreadyExists(_paymentMethod, _currencyCode);\\n        }\\n        depositCurrencyMinRate[_depositId][_paymentMethod][_currencyCode] = _minConversionRate;\\n        depositCurrencies[_depositId][_paymentMethod].push(_currencyCode);\\n\\n        emit DepositCurrencyAdded(_depositId, _paymentMethod, _currencyCode, _minConversionRate);\\n    }\\n}\\n\",\"keccak256\":\"0x0be43e8565ada0147cf0aa1f8b564d491914f102a8190396828e03c397152114\",\"license\":\"MIT\"},\"contracts/external/AddressArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG:\\n * - 4/21/21: Added validatePairsWithArray methods\\n */\\nlibrary AddressArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x486f1a373f33aa167227600ac2d0bf95b37685413d98a3e745107188f00ae405\",\"license\":\"MIT\"},\"contracts/external/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"},\"contracts/external/StringArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title StringArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle String Arrays\\n */\\nlibrary StringArrayUtils {\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input string to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(string[] memory A, string memory a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (keccak256(bytes(A[i])) == keccak256(bytes(a))) {\\n                return (i, true);\\n            }\\n        }\\n        return (type(uint256).max, false);\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The string to remove\\n     */\\n    function removeStorage(string[] storage A, string memory a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"String not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n}\",\"keccak256\":\"0x249b6dc922e7e1602f3c2e77075d3b9d259d3badc744241ecf2ca2ee1cbcd56c\",\"license\":\"Apache-2.0\"},\"contracts/external/Uint256ArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title Uint256ArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Uint256 Arrays\\n */\\nlibrary Uint256ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        uint256[] memory newUints = new uint256[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newUints[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newUints[aLength + j] = B[j];\\n        }\\n        return newUints;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(uint256[] storage A, uint256 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"uint256 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x102021415f8444ff563fc6d0082f39296f47c09ce73fb4cd642e700ac489eefe\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IPostIntentHook } from \\\"./IPostIntentHook.sol\\\";\\n\\ninterface IEscrow {\\n    \\n    /* ============ Structs ============ */\\n\\n    struct Intent {\\n        bytes32 intentHash;                        // Unique identifier for the intent\\n        uint256 amount;                            // Amount locked\\n        uint256 timestamp;                         // When this intent was created\\n        uint256 expiryTime;                        // When this intent expires\\n    }\\n\\n    struct Range {\\n        uint256 min;                                // Minimum value\\n        uint256 max;                                // Maximum value\\n    }\\n\\n    struct Deposit {\\n        address depositor;                          // Address of depositor\\n        address delegate;                           // Address that can manage this deposit (address(0) if no delegate)\\n        IERC20 token;                               // Address of deposit token\\n        uint256 amount;                             // Amount of deposit token (gross amount including reserved fees)\\n        Range intentAmountRange;                    // Range of take amount per intent\\n        // Deposit state\\n        bool acceptingIntents;                      // State: True if the deposit is accepting intents, False otherwise\\n        uint256 remainingDeposits;                  // State: Amount of remaining deposited liquidity (net of reserved fees)\\n        uint256 outstandingIntentAmount;            // State: Amount of outstanding intents (may include expired intents)\\n        // Fee tracking\\n        uint256 makerProtocolFee;                   // State: Maker protocol fee at the time of deposit creation in preciseUnits  (1e16 = 1%)\\n        uint256 reservedMakerFees;                  // State: Total fees reserved from maker (calculated upfront)\\n        uint256 accruedMakerFees;                   // State: Fees actually earned from fulfilled intents\\n        uint256 accruedReferrerFees;               // State: Referrer fees actually earned from fulfilled intents\\n        // Intent guardian\\n        address intentGuardian;                     // Address that can extend intent expiry times (address(0) if no guardian)\\n        // Referrer\\n        address referrer;                           // Address of the referrer who brought this deposit (address(0) if no referrer)\\n        uint256 referrerFee;                        // Fee to be paid to the referrer in preciseUnits (1e16 = 1%)\\n    }\\n\\n    struct Currency {\\n        bytes32 code;                               // Currency code (keccak256 hash of the currency code)\\n        uint256 minConversionRate;                  // Minimum rate of deposit token to fiat currency (in preciseUnits)\\n    }\\n\\n    struct DepositPaymentMethodData {\\n        address intentGatingService;                // Public key of gating service that will be used to verify intents\\n        bytes32 payeeDetails;                       // Payee details, has to be hash of payee details\\n        bytes data;                                 // Verification Data: Additional data used for payment verification; Can hold attester address\\n                                                    // in case of TLS proofs, domain key hash in case of zkEmail proofs, currency code etc.\\n    }\\n\\n    struct CreateDepositParams {\\n        IERC20 token;                                // The token to be deposited\\n        uint256 amount;                              // The amount of token to deposit\\n        Range intentAmountRange;                     // The max and min take amount for each intent\\n        bytes32[] paymentMethods;                    // The payment methods that deposit supports\\n        DepositPaymentMethodData[] paymentMethodData;// The payment verification data for each payment method that deposit supports\\n        Currency[][] currencies;                     // The currencies for each payment method that deposit supports\\n        address delegate;                            // Optional delegate address that can manage this deposit (address(0) for no delegate)\\n        address intentGuardian;                      // Optional intent guardian address that can extend intent expiry times (address(0) for no guardian)\\n        address referrer;                            // Address of the referrer who brought this deposit (address(0) if no referrer)\\n        uint256 referrerFee;                         // Fee to be paid to the referrer in preciseUnits (1e16 = 1%)\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    event DepositReceived(uint256 indexed depositId, address indexed depositor, IERC20 indexed token, uint256 amount, Range intentAmountRange, address delegate, address intentGuardian);\\n\\n    event DepositPaymentMethodAdded(uint256 indexed depositId, bytes32 indexed paymentMethod, bytes32 indexed payeeDetails, address intentGatingService);\\n    event DepositPaymentMethodRemoved(uint256 indexed depositId, bytes32 indexed paymentMethod);\\n\\n    event DepositCurrencyAdded(uint256 indexed depositId, bytes32 indexed paymentMethod, bytes32 indexed currency, uint256 conversionRate);\\n    event DepositCurrencyRemoved(uint256 indexed depositId, bytes32 indexed paymentMethod, bytes32 indexed currencyCode);        \\n\\n    event DepositFundsAdded(uint256 indexed depositId, address indexed depositor, uint256 amount);\\n    event DepositWithdrawn(uint256 indexed depositId, address indexed depositor, uint256 amount, bool acceptingIntents);\\n    event DepositClosed(uint256 depositId, address depositor);\\n\\n    event DepositIntentAmountRangeUpdated(uint256 indexed depositId, Range intentAmountRange);\\n    event DepositMinConversionRateUpdated(uint256 indexed depositId, bytes32 indexed paymentMethod, bytes32 indexed currency, uint256 newMinConversionRate);\\n    event DepositAcceptingIntentsUpdated(uint256 indexed depositId, bool acceptingIntents);\\n\\n    event DepositDelegateSet(uint256 indexed depositId, address indexed depositor, address indexed delegate);\\n    event DepositDelegateRemoved(uint256 indexed depositId, address indexed depositor);\\n\\n    event MinDepositAmountSet(uint256 minDepositAmount);\\n\\n    event OrchestratorUpdated(address indexed orchestrator);\\n    event PaymentVerifierRegistryUpdated(address indexed paymentVerifierRegistry);\\n\\n    event FundsLocked(uint256 indexed depositId, bytes32 indexed intentHash, uint256 amount, uint256 expiryTime);\\n    event FundsUnlocked(uint256 indexed depositId, bytes32 indexed intentHash, uint256 amount);\\n    event FundsUnlockedAndTransferred(\\n        uint256 indexed depositId, \\n        bytes32 indexed intentHash, \\n        uint256 unlockedAmount, \\n        uint256 transferredAmount, \\n        uint256 makerFees, \\n        uint256 referrerFees, \\n        address to\\n    );\\n    event IntentExpiryExtended(uint256 indexed depositId, bytes32 indexed intentHash, uint256 newExpiryTime);\\n\\n    event MakerProtocolFeeUpdated(uint256 makerProtocolFee);\\n    event MakerFeeRecipientUpdated(address indexed makerFeeRecipient);\\n    event MakerFeesCollected(uint256 indexed depositId, uint256 collectedFees, address indexed makerFeeRecipient);\\n    event ReferrerFeesCollected(uint256 indexed depositId, uint256 collectedFees, address indexed referrer);\\n    event DustCollected(uint256 indexed depositId, uint256 dustAmount, address indexed makerFeeRecipient);\\n    event DustThresholdUpdated(uint256 dustThreshold);\\n    event MaxIntentsPerDepositUpdated(uint256 maxIntentsPerDeposit);\\n    event IntentExpirationPeriodUpdated(uint256 intentExpirationPeriod);\\n\\n    /* ============ Standardized Custom Errors ============ */\\n    \\n    // Zero value errors\\n    error ZeroAddress();\\n    error ZeroValue();\\n    error ZeroMinValue();\\n    error ZeroConversionRate();\\n\\n    // Authorization errors\\n    error UnauthorizedCaller(address caller, address authorized);\\n    error UnauthorizedCallerOrDelegate(address caller, address owner, address delegate);\\n\\n    // Range and amount errors\\n    error InvalidRange(uint256 min, uint256 max);\\n    error AmountBelowMin(uint256 amount, uint256 min);\\n    error AmountAboveMax(uint256 amount, uint256 max);\\n    error AmountExceedsAvailable(uint256 requested, uint256 available);\\n    error FeeExceedsMaximum(uint256 fee, uint256 maximum);\\n\\n    // Not found errors\\n    error DepositNotFound(uint256 depositId);\\n    error IntentNotFound(bytes32 intentHash);\\n    error PaymentMethodNotFound(uint256 depositId, bytes32 paymentMethod);\\n    error CurrencyNotFound(bytes32 paymentMethod, bytes32 currency);\\n    error DelegateNotFound(uint256 depositId);\\n\\n    // Already exists errors\\n    error PaymentMethodAlreadyExists(uint256 depositId, bytes32 paymentMethod);\\n    error CurrencyAlreadyExists(bytes32 paymentMethod, bytes32 currency);\\n\\n    // State errors\\n    error DepositNotAcceptingIntents(uint256 depositId);\\n    error DepositAlreadyInState(uint256 depositId, bool currentState);\\n    error InsufficientDepositLiquidity(uint256 depositId, uint256 available, uint256 required);\\n    error MaxIntentsExceeded(uint256 depositId, uint256 current, uint256 max);\\n\\n    // Validation errors\\n    error EmptyPayeeDetails();\\n    error ArrayLengthMismatch(uint256 length1, uint256 length2);\\n    error InvalidReferrerFeeConfiguration();\\n\\n    // Payment method errors\\n    error PaymentMethodNotWhitelisted(bytes32 paymentMethod);\\n    error CurrencyNotSupported(bytes32 paymentMethod, bytes32 currency);\\n\\n    \\n    /* ============ External Functions for Orchestrator ============ */\\n\\n    function lockFunds(uint256 _depositId, bytes32 _intentHash, uint256 _amount) external;\\n    function unlockFunds(uint256 _depositId, bytes32 _intentHash) external;\\n    function unlockAndTransferFunds(uint256 _depositId, bytes32 _intentHash, uint256 _transferAmount, address _to) external;\\n    function extendIntentExpiry(uint256 _depositId, bytes32 _intentHash, uint256 _newExpiryTime) external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function getDeposit(uint256 _depositId) external view returns (Deposit memory);\\n    function getDepositIntent(uint256 _depositId, bytes32 _intentHash) external view returns (Intent memory);\\n    function getDepositPaymentMethods(uint256 _depositId) external view returns (bytes32[] memory);\\n    function getDepositCurrencies(uint256 _depositId, bytes32 _paymentMethod) external view returns (bytes32[] memory);\\n    function getDepositCurrencyMinRate(uint256 _depositId, bytes32 _paymentMethod, bytes32 _currencyCode) external view returns (uint256);\\n    function getDepositPaymentMethodData(uint256 _depositId, bytes32 _paymentMethod) external view returns (DepositPaymentMethodData memory);\\n    function getAccountDeposits(address _account) external view returns (uint256[] memory);\\n    function getDepositIntentHashes(uint256 _depositId) external view returns (bytes32[] memory);\\n    function getExpiredIntents(uint256 _depositId) external view returns (bytes32[] memory expiredIntents, uint256 reclaimedAmount);\\n}\\n\",\"keccak256\":\"0x0fa82b33c6a5ddc9ad4c2ecf6791c067f202a5a697f6392405d396688d13477e\",\"license\":\"MIT\"},\"contracts/interfaces/IOrchestrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IPostIntentHook } from \\\"./IPostIntentHook.sol\\\";\\n\\ninterface IOrchestrator {\\n    \\n    /* ============ Structs ============ */\\n\\n    struct Intent {\\n        address owner;                              // Address of the intent owner  \\n        address to;                                 // Address to forward funds to (can be same as owner)\\n        address escrow;                             // Address of the escrow contract holding the deposit\\n        uint256 depositId;                          // ID of the deposit the intent is associated with\\n        uint256 amount;                             // Amount of the deposit.token the owner wants to take\\n        uint256 timestamp;                          // Timestamp of the intent\\n        bytes32 paymentMethod;                      // The payment method to be used for the offchain payment\\n        bytes32 fiatCurrency;                       // Currency code that the owner is paying in offchain (keccak256 hash of the currency code)\\n        uint256 conversionRate;                     // Conversion rate of deposit token to fiat currency at the time of intent\\n        address referrer;                           // Address of the referrer who brought this intent (if any)\\n        uint256 referrerFee;                        // Fee to be paid to the referrer in preciseUnits (1e16 = 1%)\\n        IPostIntentHook postIntentHook;             // Address of the post-intent hook that will execute any post-intent actions\\n        bytes data;                                 // Additional data to be passed to the post-intent hook contract\\n    }\\n\\n    struct SignalIntentParams {\\n        address escrow;                             // The escrow contract where the deposit is held\\n        uint256 depositId;                          // The ID of the deposit the taker intends to use\\n        uint256 amount;                             // The amount of deposit.token the user wants to take\\n        address to;                                 // Address to forward funds to\\n        bytes32 paymentMethod;                      // The payment method to be used for the offchain payment\\n        bytes32 fiatCurrency;                       // The currency code for offchain payment\\n        uint256 conversionRate;                     // The conversion rate agreed offchain\\n        address referrer;                           // Address of the referrer (address(0) if no referrer)\\n        uint256 referrerFee;                        // Fee to be paid to the referrer\\n        bytes gatingServiceSignature;               // Signature from the deposit's gating service\\n        uint256 signatureExpiration;                // Timestamp when the gating service signature expires\\n        IPostIntentHook postIntentHook;             // Optional post-intent hook (address(0) for no hook)\\n        bytes data;                                 // Additional data for the intent\\n    }\\n\\n    struct FulfillIntentParams {\\n        bytes paymentProof;                         // Payment proof. Can be Groth16 Proof, TLSNotary proof, TLSProxy proof, attestation etc.\\n        bytes32 intentHash;                         // Identifier of intent being fulfilled\\n        bytes verificationData;                     // Additional data for payment verifier (e.g. currency resolution data)\\n        bytes postIntentHookData;                   // Additional data for post intent hook\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    event IntentSignaled(\\n        bytes32 indexed intentHash, \\n        address indexed escrow,\\n        uint256 indexed depositId, \\n        bytes32 paymentMethod, \\n        address owner, \\n        address to, \\n        uint256 amount, \\n        bytes32 fiatCurrency, \\n        uint256 conversionRate, \\n        uint256 timestamp\\n    );\\n\\n    event IntentPruned(\\n        bytes32 indexed intentHash\\n    );\\n\\n    event IntentFulfilled(\\n        bytes32 indexed intentHash,\\n        address indexed fundsTransferredTo,   // Address that funds were transferred to; can be intent.to or postIntentHook address\\n        uint256 amount,\\n        bool isManualRelease\\n    );\\n\\n    event AllowMultipleIntentsUpdated(bool allowMultiple);\\n\\n    event PaymentVerifierRegistryUpdated(address indexed paymentVerifierRegistry);\\n    event PostIntentHookRegistryUpdated(address indexed postIntentHookRegistry);\\n    event RelayerRegistryUpdated(address indexed relayerRegistry);\\n    event EscrowRegistryUpdated(address indexed escrowRegistry);\\n\\n    event ProtocolFeeUpdated(uint256 protocolFee);\\n    event ProtocolFeeRecipientUpdated(address indexed protocolFeeRecipient);\\n    event PartialManualReleaseDelayUpdated(uint256 partialManualReleaseDelay);\\n\\n    /* ============ Standardized Custom Errors ============ */\\n    \\n    // Zero value errors\\n    error ZeroAddress();\\n    error ZeroValue();\\n    \\n    // Authorization errors\\n    error UnauthorizedEscrowCaller(address caller);\\n    error UnauthorizedCaller(address caller, address authorized);\\n    \\n    // Not found errors\\n    error IntentNotFound(bytes32 intentHash);\\n    error PaymentMethodDoesNotExist(bytes32 paymentMethod);\\n    error PaymentMethodNotSupported(bytes32 paymentMethod);\\n    error CurrencyNotSupported(bytes32 paymentMethod, bytes32 currency);\\n    \\n    // Whitelist errors\\n    error PaymentMethodNotWhitelisted(bytes32 paymentMethod);\\n    error PostIntentHookNotWhitelisted(address hook);\\n    error EscrowNotWhitelisted(address escrow);\\n    \\n    // Amount and fee errors\\n    error AmountBelowMin(uint256 amount, uint256 min);\\n    error AmountAboveMax(uint256 amount, uint256 max);\\n    error AmountExceedsLimit(uint256 amount, uint256 limit);\\n    error FeeExceedsMaximum(uint256 fee, uint256 maximum);\\n    error RateBelowMinimum(uint256 rate, uint256 minRate);\\n    \\n    // Validation errors\\n    error AccountHasActiveIntent(address account, bytes32 existingIntent);\\n    error InvalidReferrerFeeConfiguration();\\n    error InvalidSignature();\\n    error SignatureExpired(uint256 expiration, uint256 currentTime);\\n    error PartialReleaseNotAllowedYet(uint256 currentTime, uint256 allowedTime);\\n\\n    // Verification errors\\n    error PaymentVerificationFailed();\\n    error HashMismatch(bytes32 expected, bytes32 actual);\\n     \\n    // Transfer errors\\n    error TransferFailed(address recipient, uint256 amount);\\n    error EscrowLockFailed();\\n\\n    /* ============ View Functions ============ */\\n\\n    function getIntent(bytes32 intentHash) external view returns (Intent memory);\\n    function getAccountIntents(address account) external view returns (bytes32[] memory);\\n    \\n    /* ============ External Functions for Users ============ */\\n\\n    function signalIntent(SignalIntentParams calldata params) external;\\n\\n    function cancelIntent(bytes32 intentHash) external;\\n\\n    function fulfillIntent(FulfillIntentParams calldata params) external;\\n\\n    function releaseFundsToPayer(bytes32 intentHash) external;\\n\\n    /* ============ External Functions for Escrow ============ */\\n\\n    function pruneIntents(bytes32[] calldata intentIds) external;\\n}\",\"keccak256\":\"0x479f618e23e740024e5ffc58e1cacfb6403cd71c3a2d626cbe93d959702d124c\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n\\ninterface IPaymentVerifier {\\n\\n    /* ============ Structs ============ */\\n\\n    struct VerifyPaymentData {\\n        bytes paymentProof;                     // Payment proof\\n        address depositToken;                   // Address of deposit token locked in escrow\\n        uint256 intentAmount;                   // Amount of deposit token that offchain payer wants to take\\n        uint256 intentTimestamp;                // Timestamp at which intent was created. Offchain payment must be made after this timestamp.\\n        bytes32 payeeDetails;                   // Payee details (hash of payee's payment platform ID)\\n        bytes32 fiatCurrency;                   // Fiat currency the offchain payer paid in\\n        uint256 conversionRate;                 // Conversion rate of deposit token to fiat currency\\n        bytes depositData;                      // Additional data provided by the depositor (e.g. witness signatures)\\n        bytes data;                             // Additional data provided by the taker (e.g. currency price etc.)\\n    }\\n\\n    struct PaymentVerificationResult {\\n        bool success;                           // Whether the payment verification succeeded\\n        bytes32 intentHash;                     // The hash of the intent being fulfilled\\n        uint256 releaseAmount;                  // The amount of tokens to release\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function verifyPayment(\\n        VerifyPaymentData calldata _verifyPaymentData\\n    )   \\n        external\\n        returns(PaymentVerificationResult memory result);\\n\\n}\\n\",\"keccak256\":\"0x2d6c2c53c1a49e85d47ac34c57f4ec24d52592c7cf7dc028d4ac750429542ec6\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentVerifierRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IPaymentVerifierRegistry {\\n    function isPaymentMethod(bytes32 _paymentMethod) external view returns (bool);\\n    function getPaymentMethods() external view returns (bytes32[] memory);\\n    function getVerifier(bytes32 _paymentMethod) external view returns (address);\\n    function isCurrency(bytes32 _paymentMethod, bytes32 _currencyCode) external view returns (bool);\\n    function getCurrencies(bytes32 _paymentMethod) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x3955b22879049d4446f520face69872dfcd365305d86ac8cd4747505899cbfbe\",\"license\":\"MIT\"},\"contracts/interfaces/IPostIntentHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { IOrchestrator } from \\\"./IOrchestrator.sol\\\";\\n\\n/**\\n * @title IPostIntentHook\\n * @notice Interface for post-intent hooks\\n */\\ninterface IPostIntentHook {\\n\\n    /**\\n     * @notice Post-intent hook\\n     * @param _intent The intent data structure containing all intent information\\n     * @param _fulfillIntentData The data passed to fulfillIntent\\n     */\\n    function execute(\\n        IOrchestrator.Intent memory _intent,\\n        uint256 _amountNetFees,\\n        bytes calldata _fulfillIntentData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x72ae0d60c98f89eb2363f455445466c1dfaddfb338a63d65d3eb8469cbd9484d\",\"license\":\"MIT\"},\"contracts/interfaces/IPostIntentHookRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IPostIntentHookRegistry {\\n    function isWhitelistedHook(address _hook) external view returns (bool);\\n    function getWhitelistedHooks() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x19d02fd4a0ae714abcc72be11c3e629fbfc739fdc26bf3177010e7188b8f928c\",\"license\":\"MIT\"},\"contracts/interfaces/IRelayerRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IRelayerRegistry {\\n    function isWhitelistedRelayer(address _relayer) external view returns (bool);\\n    function getWhitelistedRelayers() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x58b0b7153d33e5ec0ee0c8b1cf1bdee7c4653d67a24f77eff1ea9814ed475661\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addCurrenciesToDepositPaymentMethod(uint256,bytes32,(bytes32,uint256)[])": {
        "details": "WARNING: Adding excessive currencies may cause withdrawal to exceed gas limits. Depositors can remove entries individually if needed. Recommended: <50 currencies per payment method.",
        "params": {
          "_currencies": "The currencies to add (code and conversion rate)",
          "_depositId": "The deposit ID",
          "_paymentMethod": "The payment method"
        }
      },
      "addFundsToDeposit(uint256,uint256)": {
        "params": {
          "_amount": "The amount of tokens to add",
          "_depositId": "The deposit ID to add funds to"
        }
      },
      "addPaymentMethodsToDeposit(uint256,bytes32[],(address,bytes32,bytes)[],(bytes32,uint256)[][])": {
        "details": "WARNING: Adding excessive payment methods or currencies may cause withdrawal to exceed gas limits. Depositors can remove entries individually if needed. Recommended: <10 payment methods, <50 currencies each.",
        "params": {
          "_currencies": "The currencies for the payment methods",
          "_depositId": "The deposit ID",
          "_paymentMethodData": "The payment verification data for the payment methods",
          "_paymentMethods": "The payment methods to add"
        }
      },
      "extendIntentExpiry(uint256,bytes32,uint256)": {
        "params": {
          "_additionalTime": "The additional time to extend the expiry by",
          "_depositId": "The deposit ID containing the intent",
          "_intentHash": "The intent hash to extend expiry for"
        }
      },
      "lockFunds(uint256,bytes32,uint256)": {
        "params": {
          "_amount": "The amount to lock",
          "_depositId": "The deposit ID to lock funds from",
          "_intentHash": "The intent hash this intent corresponds to"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pruneExpiredIntents(uint256)": {
        "params": {
          "_depositId": "The deposit ID to prune expired intents for"
        }
      },
      "removeCurrencyFromDepositPaymentMethod(uint256,bytes32,bytes32)": {
        "params": {
          "_currencyCode": "The currency code to remove",
          "_depositId": "The deposit ID",
          "_paymentMethod": "The payment method"
        }
      },
      "removeDepositDelegate(uint256)": {
        "params": {
          "_depositId": "The deposit ID"
        }
      },
      "removeFundsFromDeposit(uint256,uint256)": {
        "params": {
          "_amount": "The amount of tokens to remove",
          "_depositId": "The deposit ID to remove funds from"
        }
      },
      "removePaymentMethodFromDeposit(uint256,bytes32)": {
        "params": {
          "_depositId": "The deposit ID",
          "_paymentMethod": "The payment method to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDepositAcceptingIntents(uint256,bool)": {
        "params": {
          "_acceptingIntents": "The new accepting intents state",
          "_depositId": "The deposit ID"
        }
      },
      "setDepositDelegate(uint256,address)": {
        "params": {
          "_delegate": "The address to set as delegate (address(0) to remove delegate)",
          "_depositId": "The deposit ID"
        }
      },
      "setDustThreshold(uint256)": {
        "params": {
          "_dustThreshold": "The new dust threshold amount"
        }
      },
      "setIntentExpirationPeriod(uint256)": {
        "params": {
          "_intentExpirationPeriod": "The new intent expiration period in seconds"
        }
      },
      "setMakerFeeRecipient(address)": {
        "params": {
          "_makerFeeRecipient": "The address to receive maker fees"
        }
      },
      "setMakerProtocolFee(uint256)": {
        "params": {
          "_makerProtocolFee": "The maker protocol fee in preciseUnits (1e16 = 1%)"
        }
      },
      "setMaxIntentsPerDeposit(uint256)": {
        "params": {
          "_maxIntentsPerDeposit": "The new maximum number of active intents per deposit"
        }
      },
      "setOrchestrator(address)": {
        "params": {
          "_orchestrator": "The orchestrator contract address"
        }
      },
      "setPaymentVerifierRegistry(address)": {
        "params": {
          "_paymentVerifierRegistry": "New payment verifier registry address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockAndTransferFunds(uint256,bytes32,uint256,address)": {
        "params": {
          "_depositId": "The deposit ID to transfer from",
          "_intentHash": "The intent hash to find and remove the intent for",
          "_to": "The address to transfer to (orchestrator)",
          "_transferAmount": "The amount to actually transfer (may be less than intent amount)"
        }
      },
      "unlockFunds(uint256,bytes32)": {
        "params": {
          "_depositId": "The deposit ID to unlock funds from",
          "_intentHash": "The intent hash to find and remove the intent for"
        }
      },
      "updateDepositIntentAmountRange(uint256,(uint256,uint256))": {
        "params": {
          "_depositId": "The deposit ID",
          "_intentAmountRange": "The new intent amount range"
        }
      },
      "updateDepositMinConversionRate(uint256,bytes32,bytes32,uint256)": {
        "params": {
          "_depositId": "The deposit ID",
          "_fiatCurrency": "The fiat currency code to update the min conversion rate for",
          "_newMinConversionRate": "The new min conversion rate. Must be greater than 0.",
          "_paymentMethod": "The payment method to update the min conversion rate for"
        }
      },
      "withdrawDeposit(uint256)": {
        "params": {
          "_depositId": "DepositId the depositor is attempting to withdraw"
        }
      }
    },
    "title": "Escrow",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCurrenciesToDepositPaymentMethod(uint256,bytes32,(bytes32,uint256)[])": {
        "notice": "Allows depositor to add a new currencies to an existing verifier for a deposit."
      },
      "addFundsToDeposit(uint256,uint256)": {
        "notice": "Adds additional funds to an existing deposit. Only the depositor can add funds. The funds will be added to the remaining deposits amount, making it available for new intents."
      },
      "addPaymentMethodsToDeposit(uint256,bytes32[],(address,bytes32,bytes)[],(bytes32,uint256)[][])": {
        "notice": "Allows depositor to add a new payment verifier and its associated currencies to an existing deposit."
      },
      "createDeposit((address,uint256,(uint256,uint256),bytes32[],(address,bytes32,bytes)[],(bytes32,uint256)[][],address,address,address,uint256))": {
        "notice": "Creates a deposit entry by locking liquidity in the escrow contract that can be taken by signaling intents. This function will  not add to previous deposits. Every deposit has it's own unique identifier. User must approve the contract to transfer the deposit amount of deposit token. Every deposit specifies the payment methods it supports by specifying their verification data, supported currencies and  their min conversion rates for each payment method. Optionally, a referrer and a referrer fee can be specified. Note that the order of the payment methods, verification data, and currency data must match."
      },
      "extendIntentExpiry(uint256,bytes32,uint256)": {
        "notice": "INTENT GUARDIAN ONLY: Extends the expiry time of an existing intent. Only callable by intent guardian. "
      },
      "lockFunds(uint256,bytes32,uint256)": {
        "notice": "ORCHESTRATOR ONLY: Locks funds for an intent with expiry time. Only callable by orchestrator."
      },
      "pauseEscrow()": {
        "notice": "GOVERNANCE ONLY: Pauses deposit modifications and new deposit creation.  Functionalities that are paused: - Deposit creation (createDeposit) - Adding/removing funds to deposits (addFundsToDeposit, removeFundsFromDeposit) - Updating deposit parameters (conversion rates, intent ranges, accepting intents state) - Adding/removing payment methods and currencies Functionalities that remain unpaused to allow users to retrieve funds: - Full deposit withdrawal (withdrawDeposit) - Delegate management (setDepositDelegate, removeDepositDelegate) - Expired intent pruning (pruneExpiredIntents) - Orchestrator operations (lockFunds, unlockFunds, unlockAndTransferFunds) - Intent expiry extensions by guardian - All view functions"
      },
      "pruneExpiredIntents(uint256)": {
        "notice": "ANYONE: Can be called by anyone to clean up expired intents. "
      },
      "removeCurrencyFromDepositPaymentMethod(uint256,bytes32,bytes32)": {
        "notice": "Allows depositor to remove an existing currency from a verifier for a deposit."
      },
      "removeDepositDelegate(uint256)": {
        "notice": "Allows depositor to remove the delegate for a specific deposit"
      },
      "removeFundsFromDeposit(uint256,uint256)": {
        "notice": "Removes funds from an existing deposit. Only the depositor can remove funds. If the amount to remove is greater than the remaining deposits, then expired intents will be pruned to reclaim liquidity. If the remaining deposits is less than the min intent amount, then the deposit will be marked as not accepting intents. Reserved maker fees remain locked until full withdrawal via withdrawDeposit()."
      },
      "removePaymentMethodFromDeposit(uint256,bytes32)": {
        "notice": "Allows depositor to remove an existing payment verifier from a deposit.  NOTE: This function does not delete the veirifier data, it only removes the verifier from the deposit."
      },
      "setDepositAcceptingIntents(uint256,bool)": {
        "notice": "Allows depositor or delegateto set the accepting intents state for a deposit."
      },
      "setDepositDelegate(uint256,address)": {
        "notice": "Allows depositor to set a delegate address that can manage a specific deposit"
      },
      "setDustThreshold(uint256)": {
        "notice": "GOVERNANCE ONLY: Sets the dust threshold below which deposits can be closed automatically."
      },
      "setIntentExpirationPeriod(uint256)": {
        "notice": "GOVERNANCE ONLY: Sets the intent expiration period."
      },
      "setMakerFeeRecipient(address)": {
        "notice": "GOVERNANCE ONLY: Sets the address that receives maker protocol fees."
      },
      "setMakerProtocolFee(uint256)": {
        "notice": "GOVERNANCE ONLY: Sets the maker protocol fee rate. This fee is charged to makers upon fulfillment of  intents."
      },
      "setMaxIntentsPerDeposit(uint256)": {
        "notice": "GOVERNANCE ONLY: Sets the maximum number of active intents per deposit."
      },
      "setOrchestrator(address)": {
        "notice": "NEW: Sets the orchestrator contract address. Only callable by owner."
      },
      "setPaymentVerifierRegistry(address)": {
        "notice": "GOVERNANCE ONLY: Updates the payment verifier registry address."
      },
      "unlockAndTransferFunds(uint256,bytes32,uint256,address)": {
        "notice": "ORCHESTRATOR ONLY: Unlocks and transfers funds from a fulfilled intent by removing the specific intent. Only callable by orchestrator. "
      },
      "unlockFunds(uint256,bytes32)": {
        "notice": "ORCHESTRATOR ONLY: Unlocks funds from a cancelled intent by removing the specific intent.  Only callable by orchestrator. "
      },
      "unpauseEscrow()": {
        "notice": "GOVERNANCE ONLY: Restarts paused functionality for the escrow."
      },
      "updateDepositIntentAmountRange(uint256,(uint256,uint256))": {
        "notice": "Allows depositor to update the intent amount range for a deposit. Since intent's are already created within the previous intent amount range, changing the intent amount range will not affect any intents that have already been signaled."
      },
      "updateDepositMinConversionRate(uint256,bytes32,bytes32,uint256)": {
        "notice": "Only callable by the depositor for a deposit. Allows depositor to update the min conversion rate for a currency for a  payment verifier. Since intent's store the conversion rate at the time of intent, changing the min conversion rate will not affect any intents that have already been signaled."
      },
      "withdrawDeposit(uint256)": {
        "notice": "Depositor is returned all remaining deposits, any outstanding intents that are expired, and unused maker fees. Only the depositor can withdraw. If an intent is not expired then those funds will not be returned. Deposit is marked as to not accept new intents and the funds locked due to intents can be withdrawn once they expire by calling this function again. Deposit will be deleted and accrued maker fees collected to protocol as long as there are no more outstanding intents."
      }
    },
    "notice": "Escrows deposits and manages deposit lifecycle.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 144,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3507,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "orchestrator",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IOrchestrator)11189"
      },
      {
        "astId": 3510,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "paymentVerifierRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPaymentVerifierRegistry)11267"
      },
      {
        "astId": 3517,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "accountDeposits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3524,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "depositPaymentMethodData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_struct(DepositPaymentMethodData)10363_storage))"
      },
      {
        "astId": 3529,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "depositPaymentMethods",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 3537,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "depositCurrencyMinRate",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256)))"
      },
      {
        "astId": 3544,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "depositCurrencies",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage))"
      },
      {
        "astId": 3549,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "deposits",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Deposit)10351_storage)"
      },
      {
        "astId": 3554,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "depositIntentHashes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 3561,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "depositIntents",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_struct(Intent)10313_storage))"
      },
      {
        "astId": 3563,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "depositCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3565,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "makerProtocolFee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3567,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "makerFeeRecipient",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 3569,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "dustThreshold",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3571,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "maxIntentsPerDeposit",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3573,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "intentExpirationPeriod",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)964": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOrchestrator)11189": {
        "encoding": "inplace",
        "label": "contract IOrchestrator",
        "numberOfBytes": "20"
      },
      "t_contract(IPaymentVerifierRegistry)11267": {
        "encoding": "inplace",
        "label": "contract IPaymentVerifierRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(DepositPaymentMethodData)10363_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IEscrow.DepositPaymentMethodData)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositPaymentMethodData)10363_storage"
      },
      "t_mapping(t_bytes32,t_struct(Intent)10313_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IEscrow.Intent)",
        "numberOfBytes": "32",
        "value": "t_struct(Intent)10313_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes32 => bytes32[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes32 => mapping(bytes32 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes32,t_struct(DepositPaymentMethodData)10363_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes32 => struct IEscrow.DepositPaymentMethodData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(DepositPaymentMethodData)10363_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes32,t_struct(Intent)10313_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes32 => struct IEscrow.Intent))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Intent)10313_storage)"
      },
      "t_mapping(t_uint256,t_struct(Deposit)10351_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IEscrow.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)10351_storage"
      },
      "t_struct(Deposit)10351_storage": {
        "encoding": "inplace",
        "label": "struct IEscrow.Deposit",
        "members": [
          {
            "astId": 10320,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "depositor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10322,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "delegate",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10325,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "token",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)964"
          },
          {
            "astId": 10327,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10330,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "intentAmountRange",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Range)10318_storage"
          },
          {
            "astId": 10332,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "acceptingIntents",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 10334,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "remainingDeposits",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 10336,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "outstandingIntentAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 10338,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "makerProtocolFee",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 10340,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "reservedMakerFees",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 10342,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "accruedMakerFees",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 10344,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "accruedReferrerFees",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 10346,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "intentGuardian",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 10348,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "referrer",
            "offset": 0,
            "slot": "14",
            "type": "t_address"
          },
          {
            "astId": 10350,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "referrerFee",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(DepositPaymentMethodData)10363_storage": {
        "encoding": "inplace",
        "label": "struct IEscrow.DepositPaymentMethodData",
        "members": [
          {
            "astId": 10358,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "intentGatingService",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10360,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "payeeDetails",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 10362,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Intent)10313_storage": {
        "encoding": "inplace",
        "label": "struct IEscrow.Intent",
        "members": [
          {
            "astId": 10306,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "intentHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 10308,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10310,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10312,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "expiryTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Range)10318_storage": {
        "encoding": "inplace",
        "label": "struct IEscrow.Range",
        "members": [
          {
            "astId": 10315,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "min",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10317,
            "contract": "contracts/Escrow.sol:Escrow",
            "label": "max",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}