{
  "address": "0xc7e5c933f0eE8A616d15129f3E582bC1910cEf8A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_witness",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zktlsAttestor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "required",
          "type": "bool"
        }
      ],
      "name": "RequireZktlsValidationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldWitness",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newWitness",
          "type": "address"
        }
      ],
      "name": "WitnessUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAttestor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAttestor",
          "type": "address"
        }
      ],
      "name": "ZktlsAttestorUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_WITNESS_SIGNATURES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newWitness",
          "type": "address"
        }
      ],
      "name": "setWitness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAttestor",
          "type": "address"
        }
      ],
      "name": "setZktlsAttestor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_digest",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "witness",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zktlsAttestor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b817f3fa7d869e078f4e08def1f4d31c39ea713dcafdceac90f2cb7bd9dc9a9",
  "receipt": {
    "to": null,
    "from": "0x84e113087C97Cd80eA9D78983D4B8Ff61ECa1929",
    "contractAddress": "0xc7e5c933f0eE8A616d15129f3E582bC1910cEf8A",
    "transactionIndex": 20,
    "gasUsed": "904222",
    "logsBloom": "0x
    "blockHash": "0x05bf740e11ed575bcadc6c3d7ec0df61aa87259371859952844f4fdc68a6daac",
    "transactionHash": "0x5b817f3fa7d869e078f4e08def1f4d31c39ea713dcafdceac90f2cb7bd9dc9a9",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 30306127,
        "transactionHash": "0x5b817f3fa7d869e078f4e08def1f4d31c39ea713dcafdceac90f2cb7bd9dc9a9",
        "address": "0xc7e5c933f0eE8A616d15129f3E582bC1910cEf8A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929"
        ],
        "data": "0x",
        "logIndex": 332,
        "blockHash": "0x05bf740e11ed575bcadc6c3d7ec0df61aa87259371859952844f4fdc68a6daac"
      }
    ],
    "blockNumber": 30306127,
    "cumulativeGasUsed": "9220149",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "a8b7ca78066148b53bbe418be6e5d05f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_witness\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zktlsAttestor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"name\":\"RequireZktlsValidationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWitness\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWitness\",\"type\":\"address\"}],\"name\":\"WitnessUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAttestor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAttestor\",\"type\":\"address\"}],\"name\":\"ZktlsAttestorUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_WITNESS_SIGNATURES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWitness\",\"type\":\"address\"}],\"name\":\"setWitness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAttestor\",\"type\":\"address\"}],\"name\":\"setZktlsAttestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_digest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"witness\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zktlsAttestor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Simplified model with one offchain attestation service and one zkTLS attestor  The verification flow: 1. User runs the zkTLS protocol with the attestor to generate a zkTLS proof 2. Off-chain service verifies zkTLS proofs and generates standardized attestation; Attestation is    signed by the witness and includes metadata about verification 3. On-chain verification checks witness signature AND validates trust anchors to ensure    offchain verification integrity\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_witness\":\"Initial witness address (can be zero to set later)\",\"_zktlsAttestor\":\"Initial zkTLS attestor address (can be zero to set later)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setWitness(address)\":{\"params\":{\"_newWitness\":\"New witness address\"}},\"setZktlsAttestor(address)\":{\"params\":{\"_newAttestor\":\"New zkTLS attestor address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verify(bytes32,bytes[],bytes)\":{\"details\":\"The data parameter contains the zkTLS attestor address that performed the verification\",\"params\":{\"_data\":\"Verification metadata including zkTLS attestor address if required\",\"_digest\":\"The message digest to verify (EIP-712 formatted)\",\"_sigs\":\"Array with single signature from the witness\"},\"returns\":{\"isValid\":\"True if attestation and trust anchor are valid \"}}},\"title\":\"SimpleAttestationVerifier\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the attestation verifier\"},\"setWitness(address)\":{\"notice\":\"Updates the witness address\"},\"setZktlsAttestor(address)\":{\"notice\":\"Updates the zkTLS attestor address\"},\"verify(bytes32,bytes[],bytes)\":{\"notice\":\"Verifies attestations and trust anchor from off-chain verification service\"}},\"notice\":\"Verifies attestations from off-chain verification service with on-chain trust anchors\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/unifiedVerifier/SimpleAttestationVerifier.sol\":\"SimpleAttestationVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IAttestationVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title IAttestationVerifier\\n * @notice Interface for verifying attestations from various sources (witnesses, TEE, etc.)\\n */\\ninterface IAttestationVerifier {\\n    /**\\n     * @notice Verifies attestations for a given digest\\n     * @param _digest The message digest to verify (EIP-712 formatted)\\n     * @param _sigs Array of signatures from attestors\\n     * @param _data Verification data containing attestor identities or hints\\n     * @return isValid Returns true if the attestation is valid, false otherwise\\n     */\\n    function verify(\\n        bytes32 _digest,\\n        bytes[] calldata _sigs,\\n        bytes calldata _data\\n    ) external view returns (bool isValid);\\n}\",\"keccak256\":\"0x04c971cef71d95e252a97e1a242adda47bcf2bd63e86f7fd4a2da2a9a1828818\",\"license\":\"MIT\"},\"contracts/lib/ThresholdSigVerifierUtils.sol\":{\"content\":\"  \\n//SPDX-License-Identifier: MIT\\n\\nimport { SignatureChecker } from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport { ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\n\\n// This library is used to verify that signatures meet the required threshold from accepted witnesses\\nlibrary ThresholdSigVerifierUtils {\\n\\n    using SignatureChecker for address;\\n    using ECDSA for bytes32;\\n\\n    /**\\n     * Verifies that signatures meet the required threshold from accepted witnesses\\n     * \\n     * @param _digest The message digest to verify (EIP-712 or pre-hashed for EIP-191)\\n     * @param _signatures Array of signatures (must have at least minWitnessSignatures)\\n     * @param _witnesses Array of accepted witness addresses\\n     * @param _reqThreshold The minimum number of witness signatures required\\n     * @return success Returns true if the threshold is met, otherwise reverts\\n     * @dev The digest should already be properly formatted:\\n     *      - For EIP-712: keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash))\\n     *      - For EIP-191: the message hash that will be signed with personal_sign\\n     *      SignatureChecker.isValidSignatureNow will handle both cases correctly\\n     */\\n    function verifyWitnessSignatures(\\n        bytes32 _digest,\\n        bytes[] memory _signatures,\\n        address[] memory _witnesses,\\n        uint256 _reqThreshold\\n    )\\n        internal\\n        view\\n        returns (bool success)\\n    {\\n        success = false;\\n        require(_reqThreshold > 0, \\\"ThresholdSigVerifierUtils: req threshold must be > 0\\\");\\n        require(_reqThreshold <= _signatures.length, \\\"ThresholdSigVerifierUtils: req threshold exceeds signatures\\\");\\n        require(_reqThreshold <= _witnesses.length, \\\"ThresholdSigVerifierUtils: req threshold exceeds witnesses\\\");\\n        \\n        // For EIP-712, the digest is already properly formatted\\n        // For EIP-191, we need to convert to Ethereum signed message hash\\n        // SignatureChecker handles both EIP-712 and EIP-191 signatures\\n        // We'll pass the digest directly and let SignatureChecker handle it\\n        \\n        // Track unique signers using an array\\n        address[] memory seenSigners = new address[](_witnesses.length);\\n        uint256 validWitnessSignatures = 0;\\n        \\n        // Check each signature to find which witness signed it\\n        for (uint256 i = 0; i < _signatures.length; i++) {\\n            // Check if any witness created this signature\\n            for (uint256 j = 0; j < _witnesses.length; j++) {\\n                if (_witnesses[j].isValidSignatureNow(_digest, _signatures[i])) {\\n                    // Check if we've already counted this witness\\n                    bool alreadySeen = false;\\n                    for (uint256 k = 0; k < validWitnessSignatures; k++) {\\n                        if (seenSigners[k] == _witnesses[j]) {\\n                            alreadySeen = true;\\n                            break;\\n                        }\\n                    }\\n                    if (!alreadySeen) {\\n                        seenSigners[validWitnessSignatures] = _witnesses[j];\\n                        validWitnessSignatures++;\\n                        \\n                        // Early exit if threshold is met\\n                        if (validWitnessSignatures >= _reqThreshold) {\\n                            success = true;\\n                        }\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        \\n        // Check threshold\\n        require(\\n            validWitnessSignatures >= _reqThreshold,\\n            \\\"ThresholdSigVerifierUtils: Not enough valid witness signatures\\\"\\n        );\\n    }\\n}\",\"keccak256\":\"0x030db913eda079571c19fd2642f6d6986ab4474f973e866989776a7ae3819b43\",\"license\":\"MIT\"},\"contracts/unifiedVerifier/SimpleAttestationVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport { IAttestationVerifier } from \\\"../interfaces/IAttestationVerifier.sol\\\";\\nimport { ThresholdSigVerifierUtils } from \\\"../lib/ThresholdSigVerifierUtils.sol\\\";\\n\\n/**\\n * @title SimpleAttestationVerifier\\n * @notice Verifies attestations from off-chain verification service with on-chain trust anchors\\n * @dev Simplified model with one offchain attestation service and one zkTLS attestor\\n * \\n * The verification flow:\\n * 1. User runs the zkTLS protocol with the attestor to generate a zkTLS proof\\n * 2. Off-chain service verifies zkTLS proofs and generates standardized attestation; Attestation is\\n *    signed by the witness and includes metadata about verification\\n * 3. On-chain verification checks witness signature AND validates trust anchors to ensure\\n *    offchain verification integrity\\n */\\ncontract SimpleAttestationVerifier is IAttestationVerifier, Ownable {\\n    \\n    using ECDSA for bytes32;\\n    \\n    /* ============ Events ============ */\\n    \\n    event WitnessUpdated(address indexed oldWitness, address indexed newWitness);\\n    event ZktlsAttestorUpdated(address indexed oldAttestor, address indexed newAttestor);\\n    event RequireZktlsValidationUpdated(bool required);\\n\\n    /* ============ Constants ============ */\\n\\n    uint256 public constant MIN_WITNESS_SIGNATURES = 1;\\n    \\n    /* ============ State Variables ============ */\\n    \\n    // Single witness that signs standardized attestations for offchain attestation service\\n    address public witness;\\n    \\n    // Single zkTLS attestor that performed the zkTLS verification\\n    address public zktlsAttestor;\\n    \\n    /* ============ Constructor ============ */\\n    \\n    /**\\n     * @notice Initializes the attestation verifier\\n     * @param _witness Initial witness address (can be zero to set later)\\n     * @param _zktlsAttestor Initial zkTLS attestor address (can be zero to set later)\\n     */\\n    constructor(address _witness, address _zktlsAttestor) Ownable() {\\n        witness = _witness;\\n        zktlsAttestor = _zktlsAttestor;\\n    }\\n    \\n    /* ============ External Functions ============ */\\n    \\n    /**\\n     * @notice Verifies attestations and trust anchor from off-chain verification service\\n     * @param _digest The message digest to verify (EIP-712 formatted)\\n     * @param _sigs Array with single signature from the witness\\n     * @param _data Verification metadata including zkTLS attestor address if required\\n     * @return isValid True if attestation and trust anchor are valid\\n     * \\n     * @dev The data parameter contains the zkTLS attestor address that performed the verification\\n     */\\n    function verify(\\n        bytes32 _digest,\\n        bytes[] calldata _sigs,\\n        bytes calldata _data\\n    ) external view override returns (bool isValid) {\\n        isValid = _verifyAttestation(_digest, _sigs);\\n\\n        if (isValid) {\\n            isValid = _verifyTrustAnchor(_data);\\n        }\\n\\n        return isValid;\\n    }\\n    \\n    /* ============ Governance Functions ============ */\\n    \\n    /**\\n     * @notice Updates the witness address\\n     * @param _newWitness New witness address\\n     */\\n    function setWitness(address _newWitness) external onlyOwner {\\n        require(_newWitness != address(0), \\\"SimpleAttestationVerifier: Zero address\\\");\\n        \\n        address oldWitness = witness;\\n        witness = _newWitness;\\n        \\n        emit WitnessUpdated(oldWitness, _newWitness);\\n    }\\n    \\n    /**\\n     * @notice Updates the zkTLS attestor address\\n     * @param _newAttestor New zkTLS attestor address\\n     */\\n    function setZktlsAttestor(address _newAttestor) external onlyOwner {\\n        require(_newAttestor != address(0), \\\"SimpleAttestationVerifier: Zero address\\\");\\n        \\n        address oldAttestor = zktlsAttestor;\\n        zktlsAttestor = _newAttestor;\\n        \\n        emit ZktlsAttestorUpdated(oldAttestor, _newAttestor);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Verifies the attestation\\n     * @param _digest The message digest to verify (EIP-712 formatted)\\n     * @param _sigs Array with single signature from the witness\\n     * @return isValid True if attestation is valid\\n     */\\n    function _verifyAttestation(bytes32 _digest, bytes[] calldata _sigs) internal view returns (bool isValid) {\\n        address[] memory witnesses = new address[](1);\\n        witnesses[0] = witness;\\n        \\n        // Verify signatures meet threshold\\n        isValid = ThresholdSigVerifierUtils.verifyWitnessSignatures(\\n            _digest,\\n            _sigs,\\n            witnesses,\\n            MIN_WITNESS_SIGNATURES\\n        );\\n\\n        // Only return isValid if it's true, otherwise library reverts\\n        return isValid;\\n    }\\n\\n    /**\\n     * @notice Verifies the zkTLS attestor address (trust anchor)\\n     * @param _data Encoded zkTLS attestor address\\n     * @return isValid True if attestor is valid\\n     */\\n    function _verifyTrustAnchor(bytes calldata _data) internal view returns (bool isValid) {\\n        // Decode zkTLS attestor address from data\\n        address attestor = abi.decode(_data, (address));\\n        \\n        // Verify attestor is the registered zkTLS attestor\\n        if (attestor != zktlsAttestor) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\",\"keccak256\":\"0xc1bce0960a7998092da649cba2dfb5795d2c9c206dae0be6e7a1ab033446954e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610f2a380380610f2a83398101604081905261002f916100d5565b61003833610069565b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055610108565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100d057600080fd5b919050565b600080604083850312156100e857600080fd5b6100f1836100b9565b91506100ff602084016100b9565b90509250929050565b610e13806101176000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063522ebb0011610066578063522ebb00146101065780636c66af7114610129578063715018a61461013c5780638da5cb5b14610144578063f2fde38b1461015557600080fd5b80630bc14f8b1461009857806331780d20146100ad57806333bea3d1146100c057806339046e8b146100db575b600080fd5b6100ab6100a6366004610a83565b610168565b005b6100ab6100bb366004610a83565b6101f1565b6100c8600181565b6040519081526020015b60405180910390f35b6001546100ee906001600160a01b031681565b6040516001600160a01b0390911681526020016100d2565b610119610114366004610ae9565b610271565b60405190151581526020016100d2565b6002546100ee906001600160a01b031681565b6100ab61029c565b6000546001600160a01b03166100ee565b6100ab610163366004610a83565b6102b0565b610170610329565b6001600160a01b03811661019f5760405162461bcd60e51b815260040161019690610b94565b60405180910390fd5b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fad0ebd2f1d8e9b159896a7a3a362003409a5101cb7f082fbbca652ab5906ea5790600090a35050565b6101f9610329565b6001600160a01b03811661021f5760405162461bcd60e51b815260040161019690610b94565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f533586196cabca2fe5d3449a1552591977e617d7bf33b1c4812035cc3331d2fe90600090a35050565b600061027e868686610383565b905080156102935761029083836103f6565b90505b95945050505050565b6102a4610329565b6102ae6000610433565b565b6102b8610329565b6001600160a01b03811661031d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610196565b61032681610433565b50565b6000546001600160a01b031633146102ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610196565b60408051600180825281830190925260009182919060208083019080368337505060015482519293506001600160a01b0316918391506000906103c8576103c8610bf1565b6001600160a01b0390921660209283029190910190910152610293856103ee8587610c38565b836001610483565b60008061040583850185610a83565b6002549091506001600160a01b0380831691161461042757600091505061042d565b60019150505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008082116104f15760405162461bcd60e51b815260206004820152603460248201527f5468726573686f6c6453696756657269666965725574696c733a207265712074604482015273068726573686f6c64206d757374206265203e20360641b6064820152608401610196565b83518211156105685760405162461bcd60e51b815260206004820152603b60248201527f5468726573686f6c6453696756657269666965725574696c733a20726571207460448201527f68726573686f6c642065786365656473207369676e61747572657300000000006064820152608401610196565b82518211156105df5760405162461bcd60e51b815260206004820152603a60248201527f5468726573686f6c6453696756657269666965725574696c733a20726571207460448201527f68726573686f6c642065786365656473207769746e65737365730000000000006064820152608401610196565b6000835167ffffffffffffffff8111156105fb576105fb610bdb565b604051908082528060200260200182016040528015610624578160200160208202803683370190505b5090506000805b86518110156107975760005b8651811015610784576106908989848151811061065657610656610bf1565b602002602001015189848151811061067057610670610bf1565b60200260200101516001600160a01b03166108189092919063ffffffff16565b15610772576000805b84811015610707578883815181106106b3576106b3610bf1565b60200260200101516001600160a01b03168682815181106106d6576106d6610bf1565b60200260200101516001600160a01b0316036106f55760019150610707565b806106ff81610d0d565b915050610699565b50806107705787828151811061071f5761071f610bf1565b602002602001015185858151811061073957610739610bf1565b6001600160a01b03909216602092830291909101909101528361075b81610d0d565b94505086841061076a57600195505b50610784565b505b8061077c81610d0d565b915050610637565b508061078f81610d0d565b91505061062b565b508381101561080e5760405162461bcd60e51b815260206004820152603e60248201527f5468726573686f6c6453696756657269666965725574696c733a204e6f74206560448201527f6e6f7567682076616c6964207769746e657373207369676e61747572657300006064820152608401610196565b5050949350505050565b60008060006108278585610879565b9092509050600081600481111561084057610840610d34565b14801561085e5750856001600160a01b0316826001600160a01b0316145b8061086f575061086f8686866108be565b9695505050505050565b60008082516041036108af5760208301516040840151606085015160001a6108a3878285856109aa565b945094505050506108b7565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b86866040516024016108e8929190610d6e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516109269190610da8565b600060405180830381855afa9150503d8060008114610961576040519150601f19603f3d011682016040523d82523d6000602084013e610966565b606091505b509150915081801561097a57506020815110155b801561086f57508051630b135d3f60e11b9061099f9083016020908101908401610dc4565b149695505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156109e15750600090506003610a65565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610a35573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610a5e57600060019250925050610a65565b9150600090505b94509492505050565b6001600160a01b038116811461032657600080fd5b600060208284031215610a9557600080fd5b8135610aa081610a6e565b9392505050565b60008083601f840112610ab957600080fd5b50813567ffffffffffffffff811115610ad157600080fd5b6020830191508360208285010111156108b757600080fd5b600080600080600060608688031215610b0157600080fd5b85359450602086013567ffffffffffffffff80821115610b2057600080fd5b818801915088601f830112610b3457600080fd5b813581811115610b4357600080fd5b8960208260051b8501011115610b5857600080fd5b602083019650809550506040880135915080821115610b7657600080fd5b50610b8388828901610aa7565b969995985093965092949392505050565b60208082526027908201527f53696d706c654174746573746174696f6e56657269666965723a205a65726f206040820152666164647265737360c81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610c3057610c30610bdb565b604052919050565b600067ffffffffffffffff80841115610c5357610c53610bdb565b8360051b6020610c64818301610c07565b868152918501918181019036841115610c7c57600080fd5b865b84811015610d0157803586811115610c965760008081fd5b8801601f3681830112610ca95760008081fd5b813588811115610cbb57610cbb610bdb565b610ccc818301601f19168801610c07565b91508082523687828501011115610ce35760008081fd5b80878401888401376000908201870152845250918301918301610c7e565b50979650505050505050565b600060018201610d2d57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052602160045260246000fd5b60005b83811015610d65578181015183820152602001610d4d565b50506000910152565b8281526040602082015260008251806040840152610d93816060850160208701610d4a565b601f01601f1916919091016060019392505050565b60008251610dba818460208701610d4a565b9190910192915050565b600060208284031215610dd657600080fd5b505191905056fea26469706673582212205533637d47e5651a89fa1f4dacd8f4a017b5386356abaedad3aeb6b462c37b7b64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063522ebb0011610066578063522ebb00146101065780636c66af7114610129578063715018a61461013c5780638da5cb5b14610144578063f2fde38b1461015557600080fd5b80630bc14f8b1461009857806331780d20146100ad57806333bea3d1146100c057806339046e8b146100db575b600080fd5b6100ab6100a6366004610a83565b610168565b005b6100ab6100bb366004610a83565b6101f1565b6100c8600181565b6040519081526020015b60405180910390f35b6001546100ee906001600160a01b031681565b6040516001600160a01b0390911681526020016100d2565b610119610114366004610ae9565b610271565b60405190151581526020016100d2565b6002546100ee906001600160a01b031681565b6100ab61029c565b6000546001600160a01b03166100ee565b6100ab610163366004610a83565b6102b0565b610170610329565b6001600160a01b03811661019f5760405162461bcd60e51b815260040161019690610b94565b60405180910390fd5b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fad0ebd2f1d8e9b159896a7a3a362003409a5101cb7f082fbbca652ab5906ea5790600090a35050565b6101f9610329565b6001600160a01b03811661021f5760405162461bcd60e51b815260040161019690610b94565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f533586196cabca2fe5d3449a1552591977e617d7bf33b1c4812035cc3331d2fe90600090a35050565b600061027e868686610383565b905080156102935761029083836103f6565b90505b95945050505050565b6102a4610329565b6102ae6000610433565b565b6102b8610329565b6001600160a01b03811661031d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610196565b61032681610433565b50565b6000546001600160a01b031633146102ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610196565b60408051600180825281830190925260009182919060208083019080368337505060015482519293506001600160a01b0316918391506000906103c8576103c8610bf1565b6001600160a01b0390921660209283029190910190910152610293856103ee8587610c38565b836001610483565b60008061040583850185610a83565b6002549091506001600160a01b0380831691161461042757600091505061042d565b60019150505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008082116104f15760405162461bcd60e51b815260206004820152603460248201527f5468726573686f6c6453696756657269666965725574696c733a207265712074604482015273068726573686f6c64206d757374206265203e20360641b6064820152608401610196565b83518211156105685760405162461bcd60e51b815260206004820152603b60248201527f5468726573686f6c6453696756657269666965725574696c733a20726571207460448201527f68726573686f6c642065786365656473207369676e61747572657300000000006064820152608401610196565b82518211156105df5760405162461bcd60e51b815260206004820152603a60248201527f5468726573686f6c6453696756657269666965725574696c733a20726571207460448201527f68726573686f6c642065786365656473207769746e65737365730000000000006064820152608401610196565b6000835167ffffffffffffffff8111156105fb576105fb610bdb565b604051908082528060200260200182016040528015610624578160200160208202803683370190505b5090506000805b86518110156107975760005b8651811015610784576106908989848151811061065657610656610bf1565b602002602001015189848151811061067057610670610bf1565b60200260200101516001600160a01b03166108189092919063ffffffff16565b15610772576000805b84811015610707578883815181106106b3576106b3610bf1565b60200260200101516001600160a01b03168682815181106106d6576106d6610bf1565b60200260200101516001600160a01b0316036106f55760019150610707565b806106ff81610d0d565b915050610699565b50806107705787828151811061071f5761071f610bf1565b602002602001015185858151811061073957610739610bf1565b6001600160a01b03909216602092830291909101909101528361075b81610d0d565b94505086841061076a57600195505b50610784565b505b8061077c81610d0d565b915050610637565b508061078f81610d0d565b91505061062b565b508381101561080e5760405162461bcd60e51b815260206004820152603e60248201527f5468726573686f6c6453696756657269666965725574696c733a204e6f74206560448201527f6e6f7567682076616c6964207769746e657373207369676e61747572657300006064820152608401610196565b5050949350505050565b60008060006108278585610879565b9092509050600081600481111561084057610840610d34565b14801561085e5750856001600160a01b0316826001600160a01b0316145b8061086f575061086f8686866108be565b9695505050505050565b60008082516041036108af5760208301516040840151606085015160001a6108a3878285856109aa565b945094505050506108b7565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b86866040516024016108e8929190610d6e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516109269190610da8565b600060405180830381855afa9150503d8060008114610961576040519150601f19603f3d011682016040523d82523d6000602084013e610966565b606091505b509150915081801561097a57506020815110155b801561086f57508051630b135d3f60e11b9061099f9083016020908101908401610dc4565b149695505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156109e15750600090506003610a65565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610a35573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610a5e57600060019250925050610a65565b9150600090505b94509492505050565b6001600160a01b038116811461032657600080fd5b600060208284031215610a9557600080fd5b8135610aa081610a6e565b9392505050565b60008083601f840112610ab957600080fd5b50813567ffffffffffffffff811115610ad157600080fd5b6020830191508360208285010111156108b757600080fd5b600080600080600060608688031215610b0157600080fd5b85359450602086013567ffffffffffffffff80821115610b2057600080fd5b818801915088601f830112610b3457600080fd5b813581811115610b4357600080fd5b8960208260051b8501011115610b5857600080fd5b602083019650809550506040880135915080821115610b7657600080fd5b50610b8388828901610aa7565b969995985093965092949392505050565b60208082526027908201527f53696d706c654174746573746174696f6e56657269666965723a205a65726f206040820152666164647265737360c81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610c3057610c30610bdb565b604052919050565b600067ffffffffffffffff80841115610c5357610c53610bdb565b8360051b6020610c64818301610c07565b868152918501918181019036841115610c7c57600080fd5b865b84811015610d0157803586811115610c965760008081fd5b8801601f3681830112610ca95760008081fd5b813588811115610cbb57610cbb610bdb565b610ccc818301601f19168801610c07565b91508082523687828501011115610ce35760008081fd5b80878401888401376000908201870152845250918301918301610c7e565b50979650505050505050565b600060018201610d2d57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052602160045260246000fd5b60005b83811015610d65578181015183820152602001610d4d565b50506000910152565b8281526040602082015260008251806040840152610d93816060850160208701610d4a565b601f01601f1916919091016060019392505050565b60008251610dba818460208701610d4a565b9190910192915050565b600060208284031215610dd657600080fd5b505191905056fea26469706673582212205533637d47e5651a89fa1f4dacd8f4a017b5386356abaedad3aeb6b462c37b7b64736f6c63430008120033",
  "devdoc": {
    "details": "Simplified model with one offchain attestation service and one zkTLS attestor  The verification flow: 1. User runs the zkTLS protocol with the attestor to generate a zkTLS proof 2. Off-chain service verifies zkTLS proofs and generates standardized attestation; Attestation is    signed by the witness and includes metadata about verification 3. On-chain verification checks witness signature AND validates trust anchors to ensure    offchain verification integrity",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_witness": "Initial witness address (can be zero to set later)",
          "_zktlsAttestor": "Initial zkTLS attestor address (can be zero to set later)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setWitness(address)": {
        "params": {
          "_newWitness": "New witness address"
        }
      },
      "setZktlsAttestor(address)": {
        "params": {
          "_newAttestor": "New zkTLS attestor address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verify(bytes32,bytes[],bytes)": {
        "details": "The data parameter contains the zkTLS attestor address that performed the verification",
        "params": {
          "_data": "Verification metadata including zkTLS attestor address if required",
          "_digest": "The message digest to verify (EIP-712 formatted)",
          "_sigs": "Array with single signature from the witness"
        },
        "returns": {
          "isValid": "True if attestation and trust anchor are valid "
        }
      }
    },
    "title": "SimpleAttestationVerifier",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initializes the attestation verifier"
      },
      "setWitness(address)": {
        "notice": "Updates the witness address"
      },
      "setZktlsAttestor(address)": {
        "notice": "Updates the zkTLS attestor address"
      },
      "verify(bytes32,bytes[],bytes)": {
        "notice": "Verifies attestations and trust anchor from off-chain verification service"
      }
    },
    "notice": "Verifies attestations from off-chain verification service with on-chain trust anchors",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/unifiedVerifier/SimpleAttestationVerifier.sol:SimpleAttestationVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15403,
        "contract": "contracts/unifiedVerifier/SimpleAttestationVerifier.sol:SimpleAttestationVerifier",
        "label": "witness",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15405,
        "contract": "contracts/unifiedVerifier/SimpleAttestationVerifier.sol:SimpleAttestationVerifier",
        "label": "zktlsAttestor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}