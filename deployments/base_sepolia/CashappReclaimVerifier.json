{
  "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_escrow",
          "type": "address"
        },
        {
          "internalType": "contract INullifierRegistry",
          "name": "_nullifierRegistry",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timestampBuffer",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_currencies",
          "type": "bytes32[]"
        },
        {
          "internalType": "string[]",
          "name": "_providerHashes",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "currencyCode",
          "type": "bytes32"
        }
      ],
      "name": "CurrencyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "currencyCode",
          "type": "bytes32"
        }
      ],
      "name": "CurrencyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "providerHash",
          "type": "string"
        }
      ],
      "name": "ProviderHashAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "providerHash",
          "type": "string"
        }
      ],
      "name": "ProviderHashRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestampBuffer",
          "type": "uint256"
        }
      ],
      "name": "TimestampBufferSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COMPLETE_PAYMENT_STATUS",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_currencyCode",
          "type": "bytes32"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newProviderHash",
          "type": "string"
        }
      ],
      "name": "addProviderHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProviderHashes",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isCurrency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "isProviderHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nullifierRegistry",
      "outputs": [
        {
          "internalType": "contract INullifierRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "providerHashes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_currencyCode",
          "type": "bytes32"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_removeProviderHash",
          "type": "string"
        }
      ],
      "name": "removeProviderHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestampBuffer",
          "type": "uint256"
        }
      ],
      "name": "setTimestampBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestampBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "paymentProof",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "intentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "intentTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "payeeDetails",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "fiatCurrency",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "conversionRate",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "depositData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPaymentVerifier.VerifyPaymentData",
          "name": "_verifyPaymentData",
          "type": "tuple"
        }
      ],
      "name": "verifyPayment",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "intentHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "releaseAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "paymentCurrency",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "paymentId",
              "type": "string"
            }
          ],
          "internalType": "struct IPaymentVerifier.PaymentVerificationResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "provider",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "parameters",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "context",
                  "type": "string"
                }
              ],
              "internalType": "struct Claims.ClaimInfo",
              "name": "claimInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "identifier",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "owner",
                      "type": "address"
                    },
                    {
                      "internalType": "uint32",
                      "name": "timestampS",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "epoch",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct Claims.CompleteClaimData",
                  "name": "claim",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes[]",
                  "name": "signatures",
                  "type": "bytes[]"
                }
              ],
              "internalType": "struct Claims.SignedClaim",
              "name": "signedClaim",
              "type": "tuple"
            }
          ],
          "internalType": "struct IReclaimVerifier.ReclaimProof",
          "name": "proof",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "_witnesses",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_requiredThreshold",
          "type": "uint256"
        }
      ],
      "name": "verifyProofSignatures",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
  "receipt": {
    "to": null,
    "from": "0x84e113087C97Cd80eA9D78983D4B8Ff61ECa1929",
    "contractAddress": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
    "transactionIndex": 36,
    "gasUsed": "5726760",
    "logsBloom": "0x
    "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc",
    "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929"
        ],
        "data": "0x",
        "logIndex": 341,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0x15e2bb2d9733845f72b6cc683c4d7bafd2d79cfd5c160cb1be756b6faa97dbdc"
        ],
        "data": "0xc4ae21aac0c6549d71dd96035b7e0bdb6c79ebdba8891b666115bc976d16a29e",
        "logIndex": 342,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307835653362313964323535396639346262303965633036626233623131613039396634376166333734643534633862393865653231656661333035343335376231000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 343,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307862303365333634333337316237383037326565616137313666643761343831376565373437633839656234613462616231353936636237306336623761346135000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 344,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307830303762373165383835316433313634626231316165356338373735326437333663636431336437633464613631616334623665663936353666393931346333000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 345,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307839346563356137613933613663656339663639386665623837336362636466616337373133653433653365633736363837333366656133643661633736343930000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 346,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307865613537653363666464643237646134383861343937386361343039666365313866653138303765346134393730393738343365343232626263643833363264000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 347,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307833636439656563383561313439373433616338363361653737343133303335623335313231366338333339306235656262663830373961643332623739343164000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 348,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307861343333373261303439356163353131326265366539633133376162343765383964326234306632643166316539396335333964393536643839336533366231000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 349,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307861353838376265363939643234306230633638656232373736633562313337363939366162633437303836643762623564323361666634633932616662636230000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 350,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307862346330633561616530323636316164333061356561393639346330643830343264393765363066323761326335303030343930383763363961633561303262000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 351,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307863643866373363346465623366336236383132353130323738376461363731626630383238353537383931346165613232393135333339386131336563306266000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 352,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307832306264623736656238383336346465633765323036656133366561333331343365396234633139386635653836393439303761303862376137633333353237000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 353,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307839336163633765633434383133666363336431353434313365393930663664356636323132343032643435333561376161393364323664663535376634376333000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 354,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307863336239653231373961343835633130356539303930303738386135353334376438353539363330343332636236393033343039646362613135313030366337000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 355,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307864663063383931343631333461633834336135643961376162343461373938356130613862303630326434663565663664306439396363383866653834646439000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 356,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      },
      {
        "transactionIndex": 36,
        "blockNumber": 29914542,
        "transactionHash": "0xfbc3c37d8fe784434bcc3bfce7fa7ee26feb1e8814f10e8a253ff68396df20a5",
        "address": "0xD3cd3B579b76ec560953132946d2bf9b89E9dA80",
        "topics": [
          "0xc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f4096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000042307839346363666466336563343062373263323830636365313930643064383136346135363533626632383338666331663239643862376431623031643231306131000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 357,
        "blockHash": "0xe9f4374bff701a17d021607fe4d0b3f5fc54f506d139216fa8ac49a4490a63fc"
      }
    ],
    "blockNumber": 29914542,
    "cumulativeGasUsed": "16511994",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf906F893326a1A98e62cAB45C980b2afE0e2A8a0",
    "0xbfEe97ec04f21882E4F23D32631477D653839AcB",
    "30",
    [
      "0xc4ae21aac0c6549d71dd96035b7e0bdb6c79ebdba8891b666115bc976d16a29e"
    ],
    [
      "0x5e3b19d2559f94bb09ec06bb3b11a099f47af374d54c8b98ee21efa3054357b1",
      "0xb03e3643371b78072eeaa716fd7a4817ee747c89eb4a4bab1596cb70c6b7a4a5",
      "0x007b71e8851d3164bb11ae5c87752d736ccd13d7c4da61ac4b6ef9656f9914c3",
      "0x94ec5a7a93a6cec9f698feb873cbcdfac7713e43e3ec7668733fea3d6ac76490",
      "0xea57e3cfddd27da488a4978ca409fce18fe1807e4a497097843e422bbcd8362d",
      "0x3cd9eec85a149743ac863ae77413035b351216c83390b5ebbf8079ad32b7941d",
      "0xa43372a0495ac5112be6e9c137ab47e89d2b40f2d1f1e99c539d956d893e36b1",
      "0xa5887be699d240b0c68eb2776c5b1376996abc47086d7bb5d23aff4c92afbcb0",
      "0xb4c0c5aae02661ad30a5ea9694c0d8042d97e60f27a2c500049087c69ac5a02b",
      "0xcd8f73c4deb3f3b68125102787da671bf08285578914aea229153398a13ec0bf",
      "0x20bdb76eb88364dec7e206ea36ea33143e9b4c198f5e8694907a08b7a7c33527",
      "0x93acc7ec44813fcc3d154413e990f6d5f6212402d4535a7aa93d26df557f47c3",
      "0xc3b9e2179a485c105e90900788a55347d8559630432cb6903409dcba151006c7",
      "0xdf0c89146134ac843a5d9a7ab44a7985a0a8b0602d4f5ef6d0d99cc88fe84dd9",
      "0x94ccfdf3ec40b72c280cce190d0d8164a5653bf2838fc1f29d8b7d1b01d210a1"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "22aa06e4f37e501f1f267dbeb03cdb0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"},{\"internalType\":\"contract INullifierRegistry\",\"name\":\"_nullifierRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestampBuffer\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_currencies\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"_providerHashes\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyCode\",\"type\":\"bytes32\"}],\"name\":\"CurrencyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyCode\",\"type\":\"bytes32\"}],\"name\":\"CurrencyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"providerHash\",\"type\":\"string\"}],\"name\":\"ProviderHashAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"providerHash\",\"type\":\"string\"}],\"name\":\"ProviderHashRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestampBuffer\",\"type\":\"uint256\"}],\"name\":\"TimestampBufferSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMPLETE_PAYMENT_STATUS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currencyCode\",\"type\":\"bytes32\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newProviderHash\",\"type\":\"string\"}],\"name\":\"addProviderHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProviderHashes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isProviderHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nullifierRegistry\",\"outputs\":[{\"internalType\":\"contract INullifierRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providerHashes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_currencyCode\",\"type\":\"bytes32\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_removeProviderHash\",\"type\":\"string\"}],\"name\":\"removeProviderHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestampBuffer\",\"type\":\"uint256\"}],\"name\":\"setTimestampBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"paymentProof\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"intentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"payeeDetails\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"fiatCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IPaymentVerifier.VerifyPaymentData\",\"name\":\"_verifyPaymentData\",\"type\":\"tuple\"}],\"name\":\"verifyPayment\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paymentCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"paymentId\",\"type\":\"string\"}],\"internalType\":\"struct IPaymentVerifier.PaymentVerificationResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parameters\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"internalType\":\"struct Claims.ClaimInfo\",\"name\":\"claimInfo\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"internalType\":\"struct Claims.CompleteClaimData\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Claims.SignedClaim\",\"name\":\"signedClaim\",\"type\":\"tuple\"}],\"internalType\":\"struct IReclaimVerifier.ReclaimProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_witnesses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_requiredThreshold\",\"type\":\"uint256\"}],\"name\":\"verifyProofSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addCurrency(bytes32)\":{\"params\":{\"_currencyCode\":\"Currency code to add\"}},\"addProviderHash(string)\":{\"params\":{\"_newProviderHash\":\"New provider hash to be added\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeCurrency(bytes32)\":{\"params\":{\"_currencyCode\":\"Currency code to remove\"}},\"removeProviderHash(string)\":{\"params\":{\"_removeProviderHash\":\"Provider hash to be removed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setTimestampBuffer(uint256)\":{\"params\":{\"_timestampBuffer\":\"The timestamp buffer for payments\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyPayment((bytes,address,uint256,uint256,string,bytes32,uint256,bytes,bytes))\":{\"params\":{\"_verifyPaymentData\":\"Payment proof and intent details required for verification\"},\"returns\":{\"_0\":\"result The payment verification result containing success status, intent hash, release amount, payment currency and payment ID\"}},\"verifyProofSignatures(((string,string,string),((bytes32,address,uint32,uint32),bytes[])),address[],uint256)\":{\"params\":{\"_requiredThreshold\":\"Minimum number of signatures required from accepted witnesses\",\"_witnesses\":\"List of accepted witnesses\",\"proof\":\"Proof to be verified\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCurrency(bytes32)\":{\"notice\":\"OWNER ONLY: Adds a currency code to supported currencies\"},\"addProviderHash(string)\":{\"notice\":\"ONLY OWNER: Add provider hash string. Provider hash must not have been previously added.\"},\"removeCurrency(bytes32)\":{\"notice\":\"OWNER ONLY: Removes a currency code from supported currencies\"},\"removeProviderHash(string)\":{\"notice\":\"ONLY OWNER: Remove provider hash string. Provider hash must have been previously added.\"},\"setTimestampBuffer(uint256)\":{\"notice\":\"OWNER ONLY: Sets the timestamp buffer for payments. This is the amount of time in seconds that the timestamp can be off by and still be considered valid. Necessary to build in flexibility  with L2 timestamps.\"},\"verifyPayment((bytes,address,uint256,uint256,string,bytes32,uint256,bytes,bytes))\":{\"notice\":\"ONLY RAMP: Verifies a reclaim proof of an offchain Cashapp payment. Ensures the right _intentAmount * _conversionRate was paid to _payeeDetails after _intentTimestamp + timestampBuffer on Cashapp. Additionaly, checks the right fiatCurrency was paid and the payment status is COMPLETE.\"},\"verifyProofSignatures(((string,string,string),((bytes32,address,uint32,uint32),bytes[])),address[],uint256)\":{\"notice\":\"Verify proof generated by witnesses. Claim is constructed by hashing claimInfo (provider, context, parameters) to get the identifier. And then signing on (identifier, owner, timestamp, epoch) to get claim signature.  This function verifies a claim by performing the following checks on the claim - Calculates the hash of the claimInfo and checks if it matches the identifier in the claim - Checks if the signatures are valid and from the witnesses This function reverts if - No signatures are found on the proof - ClaimInfo hash does not match the identifier in the claim - Signatures are invalid (not from the witnesses)  DEV NOTE: This function does NOT validate that the claim provider hash is valid. That is the  responsibility of the caller. Ensure witnesses are unique otherwise the threshold can be met  with duplicate witnesses.  Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code    \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/CashappReclaimVerifeir.sol\":\"CashappReclaimVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/external/AddressArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG:\\n * - 4/21/21: Added validatePairsWithArray methods\\n */\\nlibrary AddressArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x486f1a373f33aa167227600ac2d0bf95b37685413d98a3e745107188f00ae405\",\"license\":\"MIT\"},\"contracts/external/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"},\"contracts/external/Claims.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./ReclaimStringUtils.sol\\\";\\n\\n// Imported from @reclaimprotocol/verifier-solidity-sdk\\n\\n/**\\n * Library to assist with requesting,\\n * serialising & verifying credentials\\n */\\nlibrary Claims {\\n\\t/** Data required to describe a claim */\\n\\tstruct CompleteClaimData {\\n\\t\\tbytes32 identifier;\\n\\t\\taddress owner;\\n\\t\\tuint32 timestampS;\\n\\t\\tuint32 epoch;\\n\\t}\\n\\n\\tstruct ClaimInfo {\\n\\t\\tstring provider;\\n\\t\\tstring parameters;\\n\\t\\tstring context;\\n\\t}\\n\\n\\t/** Claim with signatures & signer */\\n\\tstruct SignedClaim {\\n\\t\\tCompleteClaimData claim;\\n\\t\\tbytes[] signatures;\\n\\t}\\n\\n\\t/**\\n\\t * Asserts that the claim is signed by the expected witnesses\\n\\t */\\n\\tfunction assertValidSignedClaim(\\n\\t\\tSignedClaim memory self,\\n\\t\\taddress[] memory expectedWitnessAddresses\\n\\t) internal pure {\\n\\t\\trequire(self.signatures.length > 0, \\\"No signatures\\\");\\n\\t\\taddress[] memory signedWitnesses = recoverSignersOfSignedClaim(self);\\n\\t\\tfor (uint256 i = 0; i < expectedWitnessAddresses.length; i++) {\\n\\t\\t\\tbool found = false;\\n\\t\\t\\tfor (uint256 j = 0; j < signedWitnesses.length; j++) {\\n\\t\\t\\t\\tif (signedWitnesses[j] == expectedWitnessAddresses[i]) {\\n\\t\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\trequire(found, \\\"Missing witness signature\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev recovers the signer of the claim\\n\\t */\\n\\tfunction recoverSignersOfSignedClaim(\\n\\t\\tSignedClaim memory self\\n\\t) internal pure returns (address[] memory) {\\n\\t\\tbytes memory serialised = serialise(self.claim);\\n\\t\\taddress[] memory signers = new address[](self.signatures.length);\\n\\t\\tfor (uint256 i = 0; i < self.signatures.length; i++) {\\n\\t\\t\\tsigners[i] = verifySignature(serialised, self.signatures[i]);\\n\\t\\t}\\n\\n\\t\\treturn signers;\\n\\t}\\n\\n\\t/**\\n\\t * @dev serialises the credential into a string;\\n\\t * the string is used to verify the signature\\n\\t *\\n\\t * the serialisation is the same as done by the TS library\\n\\t */\\n\\tfunction serialise(\\n\\t\\tCompleteClaimData memory self\\n\\t) internal pure returns (bytes memory) {\\n\\t\\treturn\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tStringUtils.bytes2str(abi.encodePacked(self.identifier)),\\n\\t\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.address2str(self.owner),\\n\\t\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.uint2str(self.timestampS),\\n\\t\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.uint2str(self.epoch)\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns the address of the user that generated the signature\\n\\t */\\n\\tfunction verifySignature(\\n\\t\\tbytes memory content,\\n\\t\\tbytes memory signature\\n\\t) internal pure returns (address signer) {\\n\\t\\tbytes32 signedHash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.uint2str(content.length),\\n\\t\\t\\t\\tcontent\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn ECDSA.recover(signedHash, signature);\\n\\t}\\n\\n\\tfunction hashClaimInfo(ClaimInfo memory claimInfo) internal pure returns (bytes32) {\\n\\t\\tbytes memory serialised = abi.encodePacked(\\n\\t\\t\\tclaimInfo.provider,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\tclaimInfo.parameters,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\tclaimInfo.context\\n\\t\\t);\\n\\t\\treturn keccak256(serialised);\\n\\t}\\n}\\n\",\"keccak256\":\"0xf0b288f11aceea9744feb5d2c052e732eba175eb832dbc0e7e9fc505186fcd09\",\"license\":\"MIT\"},\"contracts/external/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// DateTime Library v2.0\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n//\\n// NOTE: This library has been pruned to keep only functions needed by zkp2p\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day - 32075 + (1461 * (_year + 4800 + (_month - 14) / 12)) / 4\\n            + (367 * (_month - 2 - ((_month - 14) / 12) * 12)) / 12\\n            - (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) / 4 - OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    )\\n        internal\\n        pure\\n        returns (uint256 timestamp)\\n    {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR\\n            + minute * SECONDS_PER_MINUTE + second;\\n    }\\n}\\n\",\"keccak256\":\"0x64f6113ad342f8bd3c2eb74fde279401d604faf77dd08f6c16c3912c3519f170\",\"license\":\"MIT\"},\"contracts/external/ReclaimStringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// Imported from @reclaimprotocol/verifier-solidity-sdk\\n\\n/**\\n * Utilities for string manipulation & conversion\\n */\\nlibrary StringUtils {\\n\\tfunction address2str(address x) internal pure returns (string memory) {\\n\\t\\tbytes memory s = new bytes(40);\\n\\t\\tfor (uint i = 0; i < 20; i++) {\\n\\t\\t\\tbytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\\n\\t\\t\\tbytes1 hi = bytes1(uint8(b) / 16);\\n\\t\\t\\tbytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n\\t\\t\\ts[2 * i] = getChar(hi);\\n\\t\\t\\ts[2 * i + 1] = getChar(lo);\\n\\t\\t}\\n\\t\\treturn string(abi.encodePacked(\\\"0x\\\", s));\\n\\t}\\n\\n\\tfunction bytes2str(bytes memory buffer) internal pure returns (string memory) {\\n\\t\\t// Fixed buffer size for hexadecimal convertion\\n\\t\\tbytes memory converted = new bytes(buffer.length * 2);\\n\\t\\tbytes memory _base = \\\"0123456789abcdef\\\";\\n\\n\\t\\tfor (uint256 i = 0; i < buffer.length; i++) {\\n\\t\\t\\tconverted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n\\t\\t\\tconverted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n\\t\\t}\\n\\n\\t\\treturn string(abi.encodePacked(\\\"0x\\\", converted));\\n\\t}\\n\\n\\tfunction getChar(bytes1 b) internal pure returns (bytes1 c) {\\n\\t\\tif (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n\\t\\telse return bytes1(uint8(b) + 0x57);\\n\\t}\\n\\n\\tfunction bool2str(bool _b) internal pure returns (string memory _uintAsString) {\\n\\t\\tif (_b) {\\n\\t\\t\\treturn \\\"true\\\";\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"false\\\";\\n\\t\\t}\\n\\t}\\n\\n\\tfunction uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n\\t\\tif (_i == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint j = _i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len;\\n\\t\\twhile (_i != 0) {\\n\\t\\t\\tk = k - 1;\\n\\t\\t\\tuint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n\\t\\t\\tbytes1 b1 = bytes1(temp);\\n\\t\\t\\tbstr[k] = b1;\\n\\t\\t\\t_i /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n\\n\\tfunction areEqual(\\n\\t\\tstring calldata _a,\\n\\t\\tstring storage _b\\n\\t) internal pure returns (bool) {\\n\\t\\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\\n\\t}\\n\\n\\tfunction areEqual(string memory _a, string memory _b) internal pure returns (bool) {\\n\\t\\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\\n\\t}\\n\\n\\tfunction toLower(string memory str) internal pure returns (string memory) {\\n\\t\\tbytes memory bStr = bytes(str);\\n\\t\\tbytes memory bLower = new bytes(bStr.length);\\n\\t\\tfor (uint i = 0; i < bStr.length; i++) {\\n\\t\\t\\t// Uppercase character...\\n\\t\\t\\tif ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\n\\t\\t\\t\\t// So we add 32 to make it lowercase\\n\\t\\t\\t\\tbLower[i] = bytes1(uint8(bStr[i]) + 32);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbLower[i] = bStr[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn string(bLower);\\n\\t}\\n\\n\\tfunction substring(\\n\\t\\tstring memory str,\\n\\t\\tuint startIndex,\\n\\t\\tuint endIndex\\n\\t) internal pure returns (string memory) {\\n\\t\\tbytes memory strBytes = bytes(str);\\n\\t\\tbytes memory result = new bytes(endIndex - startIndex);\\n\\t\\tfor (uint i = startIndex; i < endIndex; i++) {\\n\\t\\t\\tresult[i - startIndex] = strBytes[i];\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n}\\n\",\"keccak256\":\"0x9ad3cf0def8c7d9dcbcf553b99285775cc06ed38a2ff3b0f8169c2fb51fe5bed\",\"license\":\"MIT\"},\"contracts/external/StringArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title StringArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle String Arrays\\n */\\nlibrary StringArrayUtils {\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input string to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(string[] memory A, string memory a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (keccak256(bytes(A[i])) == keccak256(bytes(a))) {\\n                return (i, true);\\n            }\\n        }\\n        return (type(uint256).max, false);\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The string to remove\\n     */\\n    function removeStorage(string[] storage A, string memory a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"String not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n}\",\"keccak256\":\"0x249b6dc922e7e1602f3c2e77075d3b9d259d3badc744241ecf2ca2ee1cbcd56c\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/INullifierRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface INullifierRegistry {\\n    function addNullifier(bytes32 _nullifier) external;\\n    function isNullified(bytes32 _nullifier) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x107164bc9a320938b513305878163b7fa884da4cdae58d0c8e81bfbb00c97c5e\",\"license\":\"MIT\"},\"contracts/lib/ClaimVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary ClaimVerifier {\\n    \\n    /* ============ Constants ============ */\\n\\n    bytes constant CONTEXT_ADDRESS_BYTES      = bytes(\\\"{\\\\\\\"contextAddress\\\\\\\":\\\\\\\"\\\");\\n    bytes constant CONTEXT_MESSAGE_BYTES      = bytes(\\\"\\\\\\\"contextMessage\\\\\\\":\\\\\\\"\\\");\\n    bytes constant EXTRACTED_PARAMETERS_BYTES = bytes(\\\"\\\\\\\"extractedParameters\\\\\\\":{\\\\\\\"\\\");\\n    bytes constant PROVIDER_HASH_PARAM_BYTES  = bytes(\\\"\\\\\\\"providerHash\\\\\\\":\\\\\\\"\\\");\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Find the end index of target string in the data string. Returns the end index + 1 if\\n     * the target string in the data string if found. Returns type(uint256).max if:\\n     * - Target is longer than data\\n     * - Target is not found\\n     * Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code\\n     */\\n    function findSubstringEndIndex(\\n        string memory data,\\n        string memory target\\n    ) internal pure returns (uint256) {\\n        bytes memory dataBytes = bytes(data);\\n        bytes memory targetBytes = bytes(target);\\n\\n        if (dataBytes.length < targetBytes.length) {\\n            return type(uint256).max;\\n        }\\n\\n        // Find start of target\\n        for (uint i = 0; i <= dataBytes.length - targetBytes.length; i++) {\\n            bool isMatch = true;\\n            for (uint j = 0; j < targetBytes.length && isMatch; j++) {\\n                if (dataBytes[i + j] != targetBytes[j]) {\\n                    isMatch = false;\\n                    break;\\n                }\\n            }\\n            if (isMatch) {\\n                return i + targetBytes.length; // Return end index + 1\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n\\n    /**\\n     * Extracts given target field value from context in claims. Extracts only ONE value.\\n     * Pass prefix formatted with quotes, for example '\\\"providerHash\\\\\\\":\\\\\\\"'\\n     * Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code\\n     *\\n     * @param data      Context string from which target value needs to be extracted\\n     * @param prefix    Prefix of the target value that needs to be extracted            \\n     */\\n    function extractFieldFromContext(\\n        string memory data,\\n        string memory prefix\\n    ) internal pure returns (string memory) {\\n        // Find end index of prefix; which is the start index of the value\\n        uint256 start = findSubstringEndIndex(data, prefix);\\n        bytes memory dataBytes = bytes(data);\\n        if (start == dataBytes.length) {\\n            return \\\"\\\"; // Prefix not found. Malformed or missing message\\n        }\\n\\n        // Find the end of the VALUE, assuming it ends with a quote not preceded by a backslash\\n        uint256 end = start;\\n        while (\\n            end < dataBytes.length &&\\n            !(dataBytes[end] == '\\\"' && dataBytes[end - 1] != \\\"\\\\\\\\\\\")\\n        ) {\\n            end++;\\n        }\\n        if (end <= start) {\\n            return \\\"\\\"; // Malformed or missing message\\n        }\\n        bytes memory contextMessage = new bytes(end - start);\\n        for (uint i = start; i < end; i++) {\\n            contextMessage[i - start] = dataBytes[i];\\n        }\\n        return string(contextMessage);\\n    }\\n\\n    /**\\n     * Extracts ALL values from context in a single pass. Context is stored as serialized JSON string with \\n     * two keys: extractedParameters and providerHash. ExtractedParameters itself is a JSON string with \\n     * key-value pairs. This function returns extracted individual values from extractedParameters along \\n     * with providerHash (if extractProviderHash is true). Use maxValues to limit the number of expected values\\n     * to be extracted from extractedParameters. In most cases, one would need to extract all values from\\n     * extractedParameters and providerHash, hence use this function over calling extractFieldFromContext \\n     * multiple times.\\n     * \\n     * @param data                  Context string from which target value needs to be extracted\\n     * @param maxValues             Maximum number of values to be extracted from extractedParameters including intentHash and providerHash\\n     * @param extractIntentAndProviderHash Extracts and returns intentHash and providerHash if true\\n     */\\n    function extractAllFromContext(\\n        string memory data,\\n        uint8 maxValues,\\n        bool extractIntentAndProviderHash\\n    ) internal pure returns (string[] memory) {\\n        require(maxValues > 0, \\\"Max values must be greater than 0\\\");\\n\\n        bytes memory dataBytes = bytes(data);\\n        \\n        // Reuse variables to avoid \\\"stack too deep\\\"\\n        uint index = 0;\\n        uint valuesFound = 0;\\n        uint startIndex;\\n        uint endIndex;\\n        bool isValue;\\n\\n        uint[] memory valueIndices = new uint[](2 * maxValues);\\n\\n        // Extract context address\\n        for (uint i = 0; i < CONTEXT_ADDRESS_BYTES.length; i++) {\\n            require(\\n                dataBytes[index + i] == CONTEXT_ADDRESS_BYTES[i],\\n                \\\"Extraction failed. Malformed contextAddress\\\"\\n            );\\n        }\\n        index += CONTEXT_ADDRESS_BYTES.length;\\n\\n        // Extract context address value if it exists\\n        startIndex = index;\\n        while (\\n            index < dataBytes.length &&\\n            !(dataBytes[index] == '\\\"' && dataBytes[index - 1] != \\\"\\\\\\\\\\\")\\n        ) {\\n            index++;\\n        }\\n        require(index < dataBytes.length, \\\"Extraction failed. Malformed contextAddress\\\");\\n        endIndex = index;\\n        if (endIndex == startIndex) {\\n            revert(\\\"Extraction failed. Empty contextAddress value\\\");\\n        }\\n        valueIndices[2 * valuesFound] = startIndex;\\n        valueIndices[2 * valuesFound + 1] = endIndex;\\n        valuesFound++;\\n        index += 2; // move past the closing quote and comma\\n\\n        // Extract context message\\n        for (uint i = 0; i < CONTEXT_MESSAGE_BYTES.length; i++) {\\n            require(\\n                dataBytes[index + i] == CONTEXT_MESSAGE_BYTES[i],\\n                \\\"Extraction failed. Malformed contextMessage\\\"\\n            );\\n        }\\n        index += CONTEXT_MESSAGE_BYTES.length;\\n\\n        // Extract context message value if it exists\\n        startIndex = index;\\n        while (\\n            index < dataBytes.length &&\\n            !(dataBytes[index] == '\\\"' && dataBytes[index - 1] != \\\"\\\\\\\\\\\")\\n        ) {\\n            index++;\\n        }\\n        require(index < dataBytes.length, \\\"Extraction failed. Malformed contextMessage\\\");\\n        endIndex = index;\\n        if (endIndex == startIndex) {\\n            revert(\\\"Extraction failed. Empty contextMessage value\\\");\\n        }\\n        valueIndices[2 * valuesFound] = startIndex;\\n        valueIndices[2 * valuesFound + 1] = endIndex;\\n        valuesFound++;\\n        index += 2; // move past the closing quote and comma\\n\\n        for (uint i = 0; i < EXTRACTED_PARAMETERS_BYTES.length; i++) {\\n            require(\\n                dataBytes[index + i] == EXTRACTED_PARAMETERS_BYTES[i],\\n                \\\"Extraction failed. Malformed extractedParameters\\\"\\n            );\\n        }\\n        index += EXTRACTED_PARAMETERS_BYTES.length;\\n        isValue = false; // starts with a key right after '{\\\\\\\"extractedParameters\\\\\\\":{\\\\\\\"'\\n\\n        while (index < dataBytes.length) {\\n            // Keep incrementing until '\\\"', escaped quotes are not considered\\n            if (!(dataBytes[index] == '\\\"' && dataBytes[index - 1] != \\\"\\\\\\\\\\\")) {\\n                index++;\\n                continue;\\n            }\\n            if (!isValue) {\\n                // \\\\\\\":\\\\\\\" (3 chars)\\n                require(\\n                    dataBytes[index + 1] == \\\":\\\" && dataBytes[index + 2] == '\\\"',\\n                    \\\"Extraction failed. Malformed data 1\\\"\\n                );\\n                index += 3; // move it after \\\\\\\"\\n                isValue = true;\\n                // Mark start\\n                valueIndices[2 * valuesFound] = index; // start index\\n            } else {\\n                // \\\\\\\",\\\\\\\" (3 chars) or \\\\\\\"}, (3 chars)\\n                // \\\\\\\"}} is not supported, there should always be a providerHash\\n                bool commaThenQuote = (dataBytes[index + 1] == \\\",\\\" && dataBytes[index + 2] == '\\\"');\\n                bool braceThenComma = (dataBytes[index + 1] == '}' && dataBytes[index + 2] == \\\",\\\");\\n                require(\\n                    commaThenQuote || braceThenComma,\\n                    \\\"Extraction failed. Malformed data 2\\\"\\n                );\\n                valueIndices[2 * valuesFound + 1] = index; // end index\\n                valuesFound++;\\n\\n                // Revert if valuesFound == maxValues and next char is a comma as there will be more values\\n                if (commaThenQuote) {\\n                    // Revert if valuesFound == maxValues and next char is a comma as there will be more values\\n                    require(valuesFound != maxValues, \\\"Extraction failed. Exceeded max values\\\");\\n                    index += 3;\\n                    isValue = false;\\n                } else { // index + 1 = \\\"}\\\"\\n                    index += 3;\\n                    break; // end of extractedParameters\\n                }\\n            }\\n        }\\n\\n        if (extractIntentAndProviderHash) {\\n            for (uint i = 0; i < PROVIDER_HASH_PARAM_BYTES.length; i++) {\\n                require(\\n                    dataBytes[index + i] == PROVIDER_HASH_PARAM_BYTES[i],\\n                    \\\"Extraction failed. Malformed providerHash\\\"\\n                );\\n            }\\n            index += PROVIDER_HASH_PARAM_BYTES.length;\\n\\n            // final indices tuple in valueIndices will be for star and end indices of provider hash\\n            valueIndices[2 * valuesFound] = index;\\n            // Keep incrementing until '\\\"'\\n            while (index < dataBytes.length && dataBytes[index] != '\\\"') {\\n                index++;\\n            }\\n            valueIndices[2 * valuesFound + 1] = index;\\n            valuesFound++;\\n        }\\n\\n        string[] memory values = new string[](valuesFound);\\n        for (uint i = 0; i < valuesFound; i++) {\\n            startIndex = valueIndices[2 * i];\\n            endIndex = valueIndices[2 * i + 1];\\n            bytes memory contextValue = new bytes(endIndex - startIndex);\\n            for (uint j = startIndex; j < endIndex; j++) {\\n                contextValue[j - startIndex] = dataBytes[j];\\n            }\\n            values[i] = string(contextValue);\\n        }\\n        return values;\\n    }\\n}\\n\",\"keccak256\":\"0xea55a91149253df7b7fd73ff24a33f2ee7594611de0fd4c1cc520f4413ce6df5\",\"license\":\"MIT\"},\"contracts/lib/DateParsing.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { DateTime } from \\\"../external/DateTime.sol\\\";\\n\\nimport { StringConversionUtils } from \\\"./StringConversionUtils.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\nlibrary DateParsing {\\n    \\n    using StringConversionUtils for string;\\n\\n    /**\\n     * @notice Iterates through every character in the date string and splits the string at each dash, \\\"T\\\", or colon. Function will revert\\n     * if there are not 6 substrings formed from the split. The substrings are then converted to uints and passed to the DateTime lib\\n     * to get the unix timestamp. This function is SPECIFIC TO THE DATE FORMAT YYYY-MM-DDTHH:MM:SS or YYYY-MM-DDTHH:MM:SS.SSSZ, not suitable for \\n     * use with other date formats. It skips the milliseconds and timezone offset, as they are not present in all date strings. It returns UTC \\n     * timestamps.\\n     *\\n     * @param _dateString       Date string to be converted to a UTC timestamp\\n     */\\n    function _dateStringToTimestamp(string memory _dateString) internal pure returns (uint256 utcTimestamp) {\\n        string[6] memory extractedStrings;\\n        uint256 breakCounter;\\n        uint256 lastBreak;\\n        uint256 lastIndex = bytes(_dateString).length;\\n        for (uint256 i = 0; i < lastIndex; i++) {\\n            if (\\n                bytes(_dateString)[i] == 0x2d       // dash (-)\\n                || bytes(_dateString)[i] == 0x3a    // colon (:)\\n                || bytes(_dateString)[i] == 0x54    // T\\n                || bytes(_dateString)[i] == 0x20    // space\\n            ) {\\n                extractedStrings[breakCounter] = _dateString.substring(lastBreak, i);\\n                lastBreak = i + 1;\\n                breakCounter++;\\n            }\\n\\n            if (bytes(_dateString)[i] == 0x2e) {    // dot (.)\\n                lastIndex = i;\\n                break;\\n            }\\n        }\\n        // Add last substring to array\\n        extractedStrings[breakCounter] = _dateString.substring(lastBreak, lastIndex);\\n\\n        // Check that exactly 6 substrings were found (string is split at 5 different places)\\n        require(breakCounter == 5, \\\"Invalid date string\\\");\\n\\n        utcTimestamp = DateTime.timestampFromDateTime(\\n            extractedStrings[0].stringToUint(0),    // year\\n            extractedStrings[1].stringToUint(0),    // month\\n            extractedStrings[2].stringToUint(0),    // day\\n            extractedStrings[3].stringToUint(0),    // hour\\n            extractedStrings[4].stringToUint(0),    // minute\\n            extractedStrings[5].stringToUint(0)     // second\\n        );\\n    }\\n}\",\"keccak256\":\"0x842b6630212f0392f80ea83b870cd8edbbef5c04d05f2024b5d65e15ed63b0c3\",\"license\":\"MIT\"},\"contracts/lib/StringConversionUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n// Building on zk-email's StringUtils library we add the ability to handle decimals when\\n// converting from string to Uint\\nlibrary StringConversionUtils {\\n    \\n    /**\\n     * @notice Function that parses numbers returned as strings including floating point numbers. Returned floating point\\n     * numbers are to have the desired amount of decimal specified. If the stringified version of the floating point\\n     * number has more decimal places than desired then the function will revert in order to be maximally safe. If\\n     * the returned number has multiple floating points then the function will revert.\\n     *\\n     * Examples: _s = \\\"12.34\\\", _expectedDecimals = 6 => 12340000\\n     *           _s = \\\"12.34\\\", _expectedDecimals = 2 => 1234\\n     *           _s = \\\"12.34\\\", _expectedDecimals = 1 => REVERT (we never want loss of precision only addition)\\n     *           _s = \\\"12.34.56\\\", _expectedDecimals = 6 => REVERT (Invalid number)\\n     *\\n     * @param _s                    String being processed\\n     * @param _desiredDecimals      Desired amount of decimal places\\n     */\\n    function stringToUint(string memory _s, uint256 _desiredDecimals) internal pure returns (uint256) {\\n        return stringToUint(_s, 0x2E, _desiredDecimals);\\n    }\\n\\n    function stringToUint(\\n        string memory _s,\\n        bytes1 _decimalCharacter,\\n        uint256 _desiredDecimals\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        bytes memory b = bytes(_s);\\n\\n        uint256 result = 0;\\n        uint256 decimalPlaces = 0;\\n\\n        bool decimals = false;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\\n            }\\n\\n            if (decimals) {\\n                decimalPlaces++;\\n            }\\n\\n            if (b[i] == _decimalCharacter) {\\n                require(decimals == false, \\\"String has multiple decimals\\\");\\n                decimals = true;\\n            }\\n        }\\n\\n        require(decimalPlaces <= _desiredDecimals, \\\"String has too many decimal places\\\");\\n        return result * (10 ** (_desiredDecimals - decimalPlaces));\\n    }\\n\\n    /**\\n     * @notice Function that returns a substring from _startIndex to _endIndex (non-inclusive).\\n     *\\n     * @param _str           String being processed\\n     * @param _startIndex    Index to start parsing from\\n     * @param _endIndex      Index to stop parsing at (index not included in result)\\n     */\\n    function substring(string memory _str, uint _startIndex, uint _endIndex) internal pure returns (string memory ) {\\n        bytes memory strBytes = bytes(_str);\\n        bytes memory result = new bytes(_endIndex-_startIndex);\\n        for(uint i = _startIndex; i < _endIndex; i++) {\\n            result[i-_startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n\\n    function stringComparison(string memory _a, string memory _b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b)));\\n    }\\n}\\n\",\"keccak256\":\"0xd605fa585faceeaae5c46c2e3f71ccdae26ca613a0432ef8b28c683fe071b42d\",\"license\":\"MIT\"},\"contracts/verifiers/BaseVerifiers/BasePaymentVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { Bytes32ArrayUtils } from \\\"../../external/Bytes32ArrayUtils.sol\\\";\\nimport { INullifierRegistry } from \\\"../../interfaces/INullifierRegistry.sol\\\";\\nimport { IBasePaymentVerifier } from \\\"../interfaces/IBasePaymentVerifier.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract BasePaymentVerifier is Ownable, IBasePaymentVerifier {\\n\\n    using Bytes32ArrayUtils for bytes32[];\\n\\n    /* ============ Events ============ */\\n    event TimestampBufferSet(uint256 timestampBuffer);\\n    event CurrencyAdded(bytes32 currencyCode);\\n    event CurrencyRemoved(bytes32 currencyCode);\\n    \\n    /* ============ State Variables ============ */\\n    address public immutable escrow;\\n    INullifierRegistry public nullifierRegistry;\\n    \\n    uint256 public timestampBuffer;\\n\\n    bytes32[] internal currencies;\\n    mapping(bytes32 => bool) public isCurrency;\\n    \\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _escrow,\\n        INullifierRegistry _nullifierRegistry,\\n        uint256 _timestampBuffer,\\n        bytes32[] memory _currencies\\n    )\\n        Ownable()\\n    {\\n        escrow = _escrow;\\n        nullifierRegistry = _nullifierRegistry;\\n        timestampBuffer = _timestampBuffer;\\n\\n        for (uint256 i = 0; i < _currencies.length; i++) {\\n            addCurrency(_currencies[i]);\\n        }\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice OWNER ONLY: Adds a currency code to supported currencies\\n     * @param _currencyCode Currency code to add\\n     */\\n    function addCurrency(bytes32 _currencyCode) public onlyOwner {\\n        require(!isCurrency[_currencyCode], \\\"Currency already added\\\");\\n        \\n        currencies.push(_currencyCode);\\n        isCurrency[_currencyCode] = true;\\n        \\n        emit CurrencyAdded(_currencyCode);\\n    }\\n\\n    /**\\n     * @notice OWNER ONLY: Removes a currency code from supported currencies\\n     * @param _currencyCode Currency code to remove\\n     */\\n    function removeCurrency(bytes32 _currencyCode) external onlyOwner {\\n        require(isCurrency[_currencyCode], \\\"Currency not added\\\");\\n        \\n        currencies.removeStorage(_currencyCode);\\n        isCurrency[_currencyCode] = false;\\n        \\n        emit CurrencyRemoved(_currencyCode);\\n    }\\n\\n    /**\\n     * @notice OWNER ONLY: Sets the timestamp buffer for payments. This is the amount of time in seconds\\n     * that the timestamp can be off by and still be considered valid. Necessary to build in flexibility \\n     * with L2 timestamps.\\n     *\\n     * @param _timestampBuffer    The timestamp buffer for payments\\n     */\\n    function setTimestampBuffer(uint256 _timestampBuffer) external onlyOwner {\\n        timestampBuffer = _timestampBuffer;\\n        emit TimestampBufferSet(_timestampBuffer);\\n    }\\n\\n    /* ============ External View Functions ============ */\\n\\n    function getCurrencies() external view returns (bytes32[] memory) {\\n        return currencies;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\\n        require(!nullifierRegistry.isNullified(_nullifier), \\\"Nullifier has already been used\\\");\\n        nullifierRegistry.addNullifier(_nullifier);\\n    }\\n}\\n\",\"keccak256\":\"0x14b72fca65f9acd0acf0d5f8bab9b90471d2b0e75b3ebaf731bac34d93a577b1\",\"license\":\"MIT\"},\"contracts/verifiers/BaseVerifiers/BaseReclaimPaymentVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"../../external/AddressArrayUtils.sol\\\";\\nimport { Claims } from \\\"../../external/Claims.sol\\\";\\nimport { StringArrayUtils } from \\\"../../external/StringArrayUtils.sol\\\";\\n\\nimport { ClaimVerifier } from \\\"../../lib/ClaimVerifier.sol\\\";\\nimport { INullifierRegistry } from \\\"../../interfaces/INullifierRegistry.sol\\\";\\nimport { IReclaimVerifier } from \\\"../interfaces/IReclaimVerifier.sol\\\";\\n\\nimport { BasePaymentVerifier } from \\\"../BaseVerifiers/BasePaymentVerifier.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract BaseReclaimPaymentVerifier is IReclaimVerifier, BasePaymentVerifier {\\n\\n    using AddressArrayUtils for address[];\\n    using StringArrayUtils for string[];\\n\\n    /* ============ Constants ============ */\\n\\n    uint256 internal constant PRECISE_UNIT = 1e18;\\n\\n    /* ============ State Variables ============ */\\n    mapping(string => bool) public isProviderHash;\\n    string[] public providerHashes;                         // Set of provider hashes that these proofs should be for\\n\\n    /* ============ Events ============ */\\n    event ProviderHashAdded(string providerHash);\\n    event ProviderHashRemoved(string providerHash);\\n\\n    /* ============ Constructor ============ */\\n    constructor(\\n        address _ramp,\\n        INullifierRegistry _nulliferRegistry,\\n        uint256 _timestampBuffer,\\n        bytes32[] memory _currencies,\\n        string[] memory _providerHashes\\n    )\\n        BasePaymentVerifier(\\n            _ramp,\\n            _nulliferRegistry,\\n            _timestampBuffer,\\n            _currencies\\n        )\\n    {\\n        for (uint256 i = 0; i < _providerHashes.length; i++) {\\n            require(!isProviderHash[_providerHashes[i]], \\\"Provider hash already added\\\");\\n            isProviderHash[_providerHashes[i]] = true;\\n            providerHashes.push(_providerHashes[i]);\\n\\n            emit ProviderHashAdded(_providerHashes[i]);\\n        }\\n    }\\n\\n    /* ============ Admin Functions ============ */\\n\\n    /**\\n     * ONLY OWNER: Add provider hash string. Provider hash must not have been previously added.\\n     *\\n     * @param _newProviderHash    New provider hash to be added\\n     */\\n    function addProviderHash(string memory _newProviderHash) external onlyOwner {\\n        require(!isProviderHash[_newProviderHash], \\\"Provider hash already added\\\");\\n\\n        isProviderHash[_newProviderHash] = true;\\n        providerHashes.push(_newProviderHash);\\n\\n        emit ProviderHashAdded(_newProviderHash);\\n    }\\n\\n    /**\\n     * ONLY OWNER: Remove provider hash string. Provider hash must have been previously added.\\n     *\\n     * @param _removeProviderHash    Provider hash to be removed\\n     */\\n    function removeProviderHash(string memory _removeProviderHash) external onlyOwner {\\n        require(isProviderHash[_removeProviderHash], \\\"Provider hash not found\\\");\\n\\n        delete isProviderHash[_removeProviderHash];\\n        providerHashes.removeStorage(_removeProviderHash);\\n\\n        emit ProviderHashRemoved(_removeProviderHash);\\n    }\\n\\n    /* ============ Public Functions ============ */\\n    \\n    /**\\n     * Verify proof generated by witnesses. Claim is constructed by hashing claimInfo (provider, context, parameters)\\n     * to get the identifier. And then signing on (identifier, owner, timestamp, epoch) to get claim signature. \\n     * This function verifies a claim by performing the following checks on the claim\\n     * - Calculates the hash of the claimInfo and checks if it matches the identifier in the claim\\n     * - Checks if the signatures are valid and from the witnesses\\n     * This function reverts if\\n     * - No signatures are found on the proof\\n     * - ClaimInfo hash does not match the identifier in the claim\\n     * - Signatures are invalid (not from the witnesses)\\n     * \\n     * DEV NOTE: This function does NOT validate that the claim provider hash is valid. That is the \\n     * responsibility of the caller. Ensure witnesses are unique otherwise the threshold can be met \\n     * with duplicate witnesses.\\n     * \\n     * Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code\\n     *    \\n     * @param proof                 Proof to be verified\\n     * @param _witnesses            List of accepted witnesses\\n     * @param _requiredThreshold    Minimum number of signatures required from accepted witnesses\\n     */\\n    function verifyProofSignatures(\\n        ReclaimProof memory proof, \\n        address[] memory _witnesses,\\n        uint256 _requiredThreshold\\n    ) public pure returns (bool) {\\n\\n        require(_requiredThreshold > 0, \\\"Required threshold must be greater than 0\\\");\\n        require(_requiredThreshold <= _witnesses.length, \\\"Required threshold must be less than or equal to number of witnesses\\\");\\n        require(proof.signedClaim.signatures.length > 0, \\\"No signatures\\\");\\n\\n        Claims.SignedClaim memory signed = Claims.SignedClaim(\\n            proof.signedClaim.claim,\\n            proof.signedClaim.signatures\\n        );\\n\\n        // check if the hash from the claimInfo is equal to the infoHash in the claimData\\n        bytes32 hashed = Claims.hashClaimInfo(proof.claimInfo);\\n        require(proof.signedClaim.claim.identifier == hashed, \\\"ClaimInfo hash doesn't match\\\");\\n        require(hashed != bytes32(0), \\\"ClaimInfo hash is zero\\\");\\n\\n        // Recover signers of the signed claim\\n        address[] memory claimSigners = Claims.recoverSignersOfSignedClaim(signed);\\n        require(claimSigners.length >= _requiredThreshold, \\\"Fewer signatures than required threshold\\\");\\n\\n        // Track unique signers using an array\\n        address[] memory seenSigners = new address[](claimSigners.length);\\n        uint256 validWitnessSignatures;\\n\\n        // Count how many signers are accepted witnesses, skipping duplicates\\n        for (uint256 i = 0; i < claimSigners.length; i++) {\\n            address currSigner = claimSigners[i];\\n            if (seenSigners.contains(currSigner)) {\\n                continue;\\n            }\\n\\n            if (_witnesses.contains(currSigner)) {\\n                seenSigners[validWitnessSignatures] = currSigner;\\n                validWitnessSignatures++;\\n            }\\n        }\\n\\n        // Check threshold\\n        require(\\n            validWitnessSignatures >= _requiredThreshold,\\n            \\\"Not enough valid witness signatures\\\"\\n        );\\n\\n        return true;\\n    }\\n\\n\\n    /* ============ View Functions ============ */\\n\\n    function getProviderHashes() external view returns (string[] memory) {\\n        return providerHashes;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _validateProviderHash(string memory _providerHash) internal view returns (bool) {\\n        return isProviderHash[_providerHash];\\n    }\\n\\n    function _validateAndAddSigNullifier(bytes[] memory _sigArray) internal {\\n        bytes32 nullifier = keccak256(abi.encode(_sigArray));\\n        require(!nullifierRegistry.isNullified(nullifier), \\\"Nullifier has already been used\\\");\\n        nullifierRegistry.addNullifier(nullifier);\\n    }\\n\\n    /**\\n     * Calculates the release amount based on the actual payment amount and conversion rate.\\n     * Caps the release amount at the intent amount.\\n     * NOTES:\\n     * - Assumes that _conversionRate is not zero and is in the same precision as PRECISE_UNIT.\\n     * - Function might overflow if _paymentAmount is very very large.\\n     * \\n     * @param _paymentAmount The actual payment amount.\\n     * @param _conversionRate The conversion rate of the deposit token to the fiat currency.\\n     * @param _intentAmount The max amount of tokens the offchain payer wants to take.\\n     * @return The release amount.\\n     */\\n    function _calculateReleaseAmount(uint256 _paymentAmount, uint256 _conversionRate, uint256 _intentAmount) internal pure returns (uint256) {\\n        // releaseAmount = paymentAmount / conversionRate\\n        uint256 releaseAmount = (_paymentAmount * PRECISE_UNIT) / _conversionRate;\\n        \\n        // Ensure release amount doesn't exceed the intent amount (cap at intent amount)\\n        if (releaseAmount > _intentAmount) {\\n            releaseAmount = _intentAmount;\\n        }\\n\\n        return releaseAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xfc8e193d60ef9e2f0e806f78ef2ef30394b80f632877f5c92fa88f74299b2b8b\",\"license\":\"MIT\"},\"contracts/verifiers/CashappReclaimVerifeir.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport { ClaimVerifier } from \\\"../lib/ClaimVerifier.sol\\\";\\nimport { DateParsing } from \\\"../lib/DateParsing.sol\\\";\\nimport { StringConversionUtils } from \\\"../lib/StringConversionUtils.sol\\\";\\nimport { BaseReclaimPaymentVerifier } from \\\"./BaseVerifiers/BaseReclaimPaymentVerifier.sol\\\";\\nimport { INullifierRegistry } from \\\"../interfaces/INullifierRegistry.sol\\\";\\nimport { IPaymentVerifier } from \\\"./interfaces/IPaymentVerifier.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract CashappReclaimVerifier is IPaymentVerifier, BaseReclaimPaymentVerifier {\\n\\n    using StringConversionUtils for string;\\n\\n    /* ============ Structs ============ */\\n\\n    // Struct to hold the payment details extracted from the proof\\n    struct PaymentDetails {\\n        string amountString;\\n        string timestampString;\\n        string currencyCode;\\n        string paymentId;\\n        string paymentStatus;\\n        string recipientId;\\n        string intentHash;\\n        string providerHash;\\n    }\\n\\n    /* ============ Constants ============ */\\n    \\n    uint8 internal constant MAX_EXTRACT_VALUES = 10;\\n    uint8 internal constant MIN_WITNESS_SIGNATURE_REQUIRED = 1;\\n    bytes32 public constant COMPLETE_PAYMENT_STATUS = keccak256(abi.encodePacked(\\\"COMPLETE\\\"));\\n\\n    /* ============ Constructor ============ */\\n    \\n    constructor(\\n        address _escrow,\\n        INullifierRegistry _nullifierRegistry,\\n        uint256 _timestampBuffer,\\n        bytes32[] memory _currencies,\\n        string[] memory _providerHashes\\n    )   \\n        BaseReclaimPaymentVerifier(\\n            _escrow, \\n            _nullifierRegistry, \\n            _timestampBuffer, \\n            _currencies,\\n            _providerHashes\\n        )\\n    { }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * ONLY RAMP: Verifies a reclaim proof of an offchain Cashapp payment. Ensures the right _intentAmount * _conversionRate\\n     * was paid to _payeeDetails after _intentTimestamp + timestampBuffer on Cashapp.\\n     * Additionaly, checks the right fiatCurrency was paid and the payment status is COMPLETE.\\n     *\\n     * @param _verifyPaymentData Payment proof and intent details required for verification\\n     * @return result The payment verification result containing success status, intent hash, release amount, payment currency and payment ID\\n     */\\n    function verifyPayment(\\n        IPaymentVerifier.VerifyPaymentData calldata _verifyPaymentData\\n    )\\n        external \\n        override\\n        returns (IPaymentVerifier.PaymentVerificationResult memory)\\n    {\\n        require(msg.sender == escrow, \\\"Only escrow can call\\\");\\n\\n        PaymentDetails memory paymentDetails = _verifyProofAndExtractValues(\\n            _verifyPaymentData.paymentProof, \\n            _verifyPaymentData.depositData\\n        );\\n                \\n        uint256 paymentAmount = _verifyPaymentDetails(\\n            paymentDetails, \\n            _verifyPaymentData\\n        );\\n\\n        uint256 releaseAmount = _calculateReleaseAmount(\\n            paymentAmount, \\n            _verifyPaymentData.conversionRate, \\n            _verifyPaymentData.intentAmount\\n        );\\n        \\n        // Nullify the payment\\n        _validateAndAddNullifier(keccak256(abi.encodePacked(paymentDetails.paymentId)));\\n\\n        bytes32 intentHash = bytes32(paymentDetails.intentHash.stringToUint(0));\\n\\n        return IPaymentVerifier.PaymentVerificationResult({\\n            success: true,\\n            intentHash: intentHash,\\n            releaseAmount: releaseAmount,\\n            paymentCurrency: _verifyPaymentData.fiatCurrency, // Use the intended currency as payment currency\\n            paymentId: paymentDetails.paymentId\\n        });\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Verifies the proof and extracts the public values from the proof and _depositData.\\n     *\\n     * @param _proof The proof to verify.\\n     * @param _depositData The deposit data to extract the verification data from.\\n     */\\n    function _verifyProofAndExtractValues(bytes calldata _proof, bytes calldata _depositData) \\n        internal\\n        view\\n        returns (PaymentDetails memory paymentDetails) \\n    {\\n        // Decode proof\\n        ReclaimProof memory proof = abi.decode(_proof, (ReclaimProof));\\n\\n        // Extract verification data\\n        address[] memory witnesses = _decodeDepositData(_depositData);\\n        verifyProofSignatures(proof, witnesses, MIN_WITNESS_SIGNATURE_REQUIRED);     // claim must have at least 1 signature from witnesses\\n        \\n        // Extract public values\\n        paymentDetails = _extractValues(proof);\\n\\n        // Check provider hash (Required for Reclaim proofs)\\n        require(_validateProviderHash(paymentDetails.providerHash), \\\"No valid providerHash\\\");\\n    }\\n\\n    /**\\n     * Verifies that payment was made to _payeeDetailsHash after _intentTimestamp + timestampBuffer on Cashapp. \\n     * Additionaly, checks the right fiatCurrency was paid and the payment status is COMPLETED. Reverts if any \\n     * of the conditions are not met.\\n     * Returns the actual payment amount.\\n     */\\n    function _verifyPaymentDetails(\\n        PaymentDetails memory paymentDetails,\\n        VerifyPaymentData memory _verifyPaymentData\\n    ) internal view returns (uint256) {\\n        uint8 decimals = IERC20Metadata(_verifyPaymentData.depositToken).decimals();\\n\\n        // Validate amount - Allow partial payments but ensure payment amount > 0\\n        uint256 paymentAmount = _parseAmount(paymentDetails.amountString, decimals);\\n        require(paymentAmount > 0, \\\"Payment amount must be greater than zero\\\");\\n        \\n        // Validate recipient\\n        require(\\n            paymentDetails.recipientId.stringComparison(_verifyPaymentData.payeeDetails), \\n            \\\"Incorrect payment recipient\\\"\\n        );\\n        \\n        // Validate timestamp; Divide by 1000 to convert to seconds and add in buffer to build flexibility\\n        // for L2 timestamps\\n        uint256 paymentTimestamp = paymentDetails.timestampString.stringToUint(0) / 1000 + timestampBuffer;\\n        require(paymentTimestamp >= _verifyPaymentData.intentTimestamp, \\\"Incorrect payment timestamp\\\");\\n\\n        // Validate currency\\n        require(\\n            keccak256(abi.encodePacked(paymentDetails.currencyCode)) == _verifyPaymentData.fiatCurrency,\\n            \\\"Incorrect payment currency\\\"\\n        );\\n\\n        // Validate status\\n        require(\\n            keccak256(abi.encodePacked(paymentDetails.paymentStatus)) == COMPLETE_PAYMENT_STATUS,\\n            \\\"Invalid payment status\\\"\\n        );\\n\\n        return paymentAmount;\\n    }\\n\\n    /**\\n     * Extracts the verification data from the data. In case of a Reclaim/TLSN/ZK proof, data contains the attester's address.\\n     * In case of a zkEmail proof, data contains the DKIM key hash. Can also contain additional data like currency code, etc.\\n     *\\n     * @param _data The data to extract the verification data from.\\n     */\\n    function _decodeDepositData(bytes calldata _data) internal pure returns (address[] memory witnesses) {\\n        witnesses = abi.decode(_data, (address[]));\\n    }\\n\\n    /**\\n     * Extracts all values from the proof context.\\n     *\\n     * @param _proof The proof containing the context to extract values from.\\n     */\\n    function _extractValues(ReclaimProof memory _proof) internal pure returns (PaymentDetails memory paymentDetails) {\\n        string[] memory values = ClaimVerifier.extractAllFromContext(\\n            _proof.claimInfo.context, \\n            MAX_EXTRACT_VALUES, \\n            true\\n        );\\n\\n        return PaymentDetails({\\n            // values[0] is ContextAddress\\n            intentHash: values[1],\\n            // values[2] is SENDER_ID\\n            amountString: values[3],\\n            currencyCode: values[4],\\n            timestampString: values[5],\\n            paymentId: values[6],\\n            recipientId: values[7],\\n            paymentStatus: values[8],\\n            providerHash: values[9]\\n        });\\n    }\\n\\n    /**\\n     * Parses the amount from the proof.\\n     *\\n     * @param _amount The amount to parse.\\n     * @param _decimals The decimals of the token.\\n     */\\n    function _parseAmount(string memory _amount, uint8 _decimals) internal pure returns(uint256) {\\n        // Cashapp amount is scaled by 100 (e.g. $1 => 100)\\n        return _amount.stringToUint(_decimals - 2);\\n    }\\n}\\n\",\"keccak256\":\"0x669330a2d473fe79ecf84f45bbcca117e630dd81134b138505cdb3aff7a47174\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/IBasePaymentVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IBasePaymentVerifier {\\n    function getCurrencies() external view returns (bytes32[] memory currencyCodes);\\n    function isCurrency(bytes32 _currencyCode) external view returns (bool);\\n    function timestampBuffer() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb932ff17fcfe90db09eb47732a73cd3471e51c7434b9d3a1df8ca22ca5d789b5\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/IPaymentVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n\\ninterface IPaymentVerifier {\\n\\n    /* ============ Structs ============ */\\n\\n    struct VerifyPaymentData {\\n        bytes paymentProof;                     // Payment proof\\n        address depositToken;                   // Address of deposit token locked in escrow\\n        uint256 intentAmount;                   // Amount of deposit token that offchain payer wants to take\\n        uint256 intentTimestamp;                // Timestamp at which intent was created. Offchain payment must be made after this timestamp.\\n        string payeeDetails;                    // Payee details (hash of payee's payment platform ID OR just raw ID)\\n        bytes32 fiatCurrency;                   // Fiat currency the offchain payer paid in\\n        uint256 conversionRate;                 // Conversion rate of deposit token to fiat currency\\n        bytes depositData;                      // Additional data provided by the depositor (e.g. witness signatures)\\n        bytes data;                             // Additional data provided by the taker (e.g. currency price etc.)\\n    }\\n\\n    struct PaymentVerificationResult {\\n        bool success;                           // Whether the payment verification succeeded\\n        bytes32 intentHash;                     // The hash of the intent being fulfilled\\n        uint256 releaseAmount;                  // The amount of tokens to release\\n        bytes32 paymentCurrency;                // The currency that was actually paid (for indexing)\\n        string paymentId;                       // The payment ID from the payment platform (for reconciliation)\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function verifyPayment(\\n        VerifyPaymentData calldata _verifyPaymentData\\n    )   \\n        external\\n        returns(PaymentVerificationResult memory result);\\n\\n}\\n\",\"keccak256\":\"0x698ebc054573f45b3c87635be3171b099cb26f3e9b161819e4eaec51b5dfed35\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/IReclaimVerifier.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Claims } from \\\"../../external/Claims.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ninterface IReclaimVerifier {\\n    \\n    struct ReclaimProof {\\n        Claims.ClaimInfo claimInfo;\\n        Claims.SignedClaim signedClaim;\\n    }\\n}\\n\",\"keccak256\":\"0x2da03e10829350f86c8860476d3d3dd05ed4b78cabec82e55680605bcfc411ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063dbac582111610071578063dbac5821146102c5578063e2fdcc17146102ce578063efd4ad5a146102f5578063f2fde38b14610308578063f75885e21461031b57600080fd5b80638da5cb5b14610252578063b2a3fda414610277578063b870676c1461028a578063bd6e77411461029d578063c2107e73146102b057600080fd5b806357c6e12a116100f457806357c6e12a146101c157806361c661de146101e1578063680cc8f9146101f65780636903718014610237578063715018a61461024a57600080fd5b80631cba9bed146101265780632ca6927d1461013b5780633e1d0edc1461017e5780633e7f2275146101a1575b600080fd5b610139610134366004613570565b61032e565b005b610169610149366004613570565b805160208183018101805160058252928201919093012091525460ff1681565b60405190151581526020015b60405180910390f35b61016961018c3660046135a4565b60046020526000908152604090205460ff1681565b6101b46101af3660046135bd565b610416565b6040516101759190613648565b6101d46101cf3660046135a4565b610589565b604051610175919061368d565b6101e9610635565b60405161017591906136a0565b61022960405167434f4d504c45544560c01b60208201526028016040516020818303038152906040528051906020012081565b604051908152602001610175565b6101396102453660046135a4565b61068d565b610139610768565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610175565b6101396102853660046135a4565b61077c565b60015461025f906001600160a01b031681565b6101396102ab366004613570565b6107b9565b6102b86108cf565b60405161017591906136e4565b61022960025481565b61025f7f000000000000000000000000000000000000000000000000000000000000000081565b6101396103033660046135a4565b6109a8565b61013961031636600461375d565b610a56565b610169610329366004613a32565b610acf565b610336610e8f565b6005816040516103469190613a9e565b9081526040519081900360200190205460ff166103aa5760405162461bcd60e51b815260206004820152601760248201527f50726f76696465722068617368206e6f7420666f756e6400000000000000000060448201526064015b60405180910390fd5b6005816040516103ba9190613a9e565b908152604051908190036020019020805460ff191690556103dc600682610ee9565b7f6f594b4b4f0580c66aabba75218163a99fa1fe330a171cc9e2bfd8e167db22f88160405161040b919061368d565b60405180910390a150565b6040805160a0810182526000808252602082018190529181018290526060808201929092526080810191909152336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104b25760405162461bcd60e51b815260206004820152601460248201527313db9b1e48195cd8dc9bddc818d85b8818d85b1b60621b60448201526064016103a1565b60006104d36104c18480613aba565b6104ce60e0870187613aba565b6110a3565b905060006104e9826104e486613b00565b61113c565b90506000610500828660c001358760400135611429565b9050610535836060015160405160200161051a9190613a9e565b6040516020818303038152906040528051906020012061145e565b60c08301516000906105479082611579565b60001b90506040518060a001604052806001151581526020018281526020018381526020018760a0013581526020018560600151815250945050505050919050565b6006818154811061059957600080fd5b9060005260206000200160009150905080546105b490613bf5565b80601f01602080910402602001604051908101604052809291908181526020018280546105e090613bf5565b801561062d5780601f106106025761010080835404028352916020019161062d565b820191906000526020600020905b81548152906001019060200180831161061057829003601f168201915b505050505081565b6060600380548060200260200160405190810160405280929190818152602001828054801561068357602002820191906000526020600020905b81548152602001906001019080831161066f575b5050505050905090565b610695610e8f565b60008181526004602052604090205460ff16156106ed5760405162461bcd60e51b815260206004820152601660248201527510dd5c9c995b98de48185b1c9958591e48185919195960521b60448201526064016103a1565b6003805460018082019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01829055600082815260046020908152604091829020805460ff1916909317909255518281527f15e2bb2d9733845f72b6cc683c4d7bafd2d79cfd5c160cb1be756b6faa97dbdc910161040b565b610770610e8f565b61077a6000611591565b565b610784610e8f565b60028190556040518181527f11e8dda5412ecab251b7783921be2eb37fdf13b389fc7f671f2cee11a1dfefea9060200161040b565b6107c1610e8f565b6005816040516107d19190613a9e565b9081526040519081900360200190205460ff16156108315760405162461bcd60e51b815260206004820152601b60248201527f50726f7669646572206861736820616c7265616479206164646564000000000060448201526064016103a1565b60016005826040516108439190613a9e565b908152604051908190036020019020805491151560ff19909216919091179055600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0161089f8282613c7e565b507fc9e1c78701d1853eeb1eb35ad3449e4b336281f672d5837243d21239dc6f40968160405161040b919061368d565b60606006805480602002602001604051908101604052809291908181526020016000905b8282101561099f57838290600052602060002001805461091290613bf5565b80601f016020809104026020016040519081016040528092919081815260200182805461093e90613bf5565b801561098b5780601f106109605761010080835404028352916020019161098b565b820191906000526020600020905b81548152906001019060200180831161096e57829003601f168201915b5050505050815260200190600101906108f3565b50505050905090565b6109b0610e8f565b60008181526004602052604090205460ff16610a035760405162461bcd60e51b815260206004820152601260248201527110dd5c9c995b98de481b9bdd08185919195960721b60448201526064016103a1565b610a0e6003826115e1565b60008181526004602052604090819020805460ff19169055517fa3c6a408fb053e3ef5e9bcd22e3574324a5ae99fad263cc4080da481842d3d4c9061040b9083815260200190565b610a5e610e8f565b6001600160a01b038116610ac35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103a1565b610acc81611591565b50565b6000808211610b325760405162461bcd60e51b815260206004820152602960248201527f5265717569726564207468726573686f6c64206d75737420626520677265617460448201526806572207468616e20360bc1b60648201526084016103a1565b8251821115610bb75760405162461bcd60e51b8152602060048201526044602482018190527f5265717569726564207468726573686f6c64206d757374206265206c65737320908201527f7468616e206f7220657175616c20746f206e756d626572206f66207769746e656064820152637373657360e01b608482015260a4016103a1565b60008460200151602001515111610c005760405162461bcd60e51b815260206004820152600d60248201526c4e6f207369676e61747572657360981b60448201526064016103a1565b604080518082019091526020808601805151835251810151908201528451600090610c2a90611709565b602087015151519091508114610c825760405162461bcd60e51b815260206004820152601c60248201527f436c61696d496e666f206861736820646f65736e2774206d617463680000000060448201526064016103a1565b80610cc85760405162461bcd60e51b8152602060048201526016602482015275436c61696d496e666f2068617368206973207a65726f60501b60448201526064016103a1565b6000610cd38361174c565b90508481511015610d375760405162461bcd60e51b815260206004820152602860248201527f4665776572207369676e617475726573207468616e20726571756972656420746044820152671a1c995cda1bdb1960c21b60648201526084016103a1565b600081516001600160401b03811115610d5257610d5261344e565b604051908082528060200260200182016040528015610d7b578160200160208202803683370190505b5090506000805b8351811015610e23576000848281518110610d9f57610d9f613d3d565b60200260200101519050610dbc818561182590919063ffffffff16565b15610dc75750610e11565b610dd18a82611825565b15610e0f5780848481518110610de957610de9613d3d565b6001600160a01b039092166020928302919091019091015282610e0b81613d69565b9350505b505b80610e1b81613d69565b915050610d82565b5086811015610e805760405162461bcd60e51b815260206004820152602360248201527f4e6f7420656e6f7567682076616c6964207769746e657373207369676e61747560448201526272657360e81b60648201526084016103a1565b50600198975050505050505050565b6000546001600160a01b0316331461077a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103a1565b600080610fc684805480602002602001604051908101604052809291908181526020016000905b82821015610fbc578382906000526020600020018054610f2f90613bf5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5b90613bf5565b8015610fa85780601f10610f7d57610100808354040283529160200191610fa8565b820191906000526020600020905b815481529060010190602001808311610f8b57829003601f168201915b505050505081526020019060010190610f10565b505050508461183b565b915091508061100e5760405162461bcd60e51b815260206004820152601460248201527329ba3934b733903737ba1034b71030b93930bc9760611b60448201526064016103a1565b835460009061101f90600190613d82565b905080831461106e5784818154811061103a5761103a613d3d565b9060005260206000200185848154811061105657611056613d3d565b90600052602060002001908161106c9190613d95565b505b8480548061107e5761107e613e67565b60019003818190600052602060002001600061109a91906133b6565b90555050505050565b6110ab6133f0565b60006110b985870187613e7d565b905060006110c785856118ac565b90506110d582826001610acf565b506110df826118ba565b92506110ee8360e001516119ed565b6111325760405162461bcd60e51b815260206004820152601560248201527409cde40ecc2d8d2c840e0e4deecd2c8cae490c2e6d605b1b60448201526064016103a1565b5050949350505050565b60008082602001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a59190613eb1565b905060006111b7856000015183611a18565b90506000811161121a5760405162461bcd60e51b815260206004820152602860248201527f5061796d656e7420616d6f756e74206d7573742062652067726561746572207460448201526768616e207a65726f60c01b60648201526084016103a1565b608084015160a086015161122d91611a32565b6112795760405162461bcd60e51b815260206004820152601b60248201527f496e636f7272656374207061796d656e7420726563697069656e74000000000060448201526064016103a1565b60006002546103e86112996000896020015161157990919063ffffffff16565b6112a39190613eea565b6112ad9190613efe565b905084606001518110156113035760405162461bcd60e51b815260206004820152601b60248201527f496e636f7272656374207061796d656e742074696d657374616d70000000000060448201526064016103a1565b8460a00151866040015160405160200161131d9190613a9e565b60405160208183030381529060405280519060200120146113805760405162461bcd60e51b815260206004820152601a60248201527f496e636f7272656374207061796d656e742063757272656e637900000000000060448201526064016103a1565b60405167434f4d504c45544560c01b60208201526028016040516020818303038152906040528051906020012086608001516040516020016113c29190613a9e565b604051602081830303815290604052805190602001201461141e5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964207061796d656e742073746174757360501b60448201526064016103a1565b509150505b92915050565b6000808361143f670de0b6b3a764000087613f11565b6114499190613eea565b9050828111156114565750815b949350505050565b60015460405163169394bb60e01b8152600481018390526001600160a01b039091169063169394bb90602401602060405180830381865afa1580156114a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cb9190613f28565b156115185760405162461bcd60e51b815260206004820152601f60248201527f4e756c6c69666965722068617320616c7265616479206265656e20757365640060448201526064016103a1565b600154604051632dea6f9960e11b8152600481018390526001600160a01b0390911690635bd4df3290602401600060405180830381600087803b15801561155e57600080fd5b505af1158015611572573d6000803e3d6000fd5b5050505050565b600061158a83601760f91b84611a8b565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008061163d8480548060200260200160405190810160405280929190818152602001828054801561163257602002820191906000526020600020905b81548152602001906001019080831161161e575b505050505084611c68565b91509150806116865760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b60448201526064016103a1565b835460009061169790600190613d82565b90508083146116dc578481815481106116b2576116b2613d3d565b90600052602060002001548584815481106116cf576116cf613d3d565b6000918252602090912001555b848054806116ec576116ec613e67565b600190038181906000526020600020016000905590555050505050565b60008082600001518360200151846040015160405160200161172d93929190613f4a565b60408051601f1981840301815291905280516020909101209392505050565b6060600061175d8360000151611cb8565b905060008360200151516001600160401b0381111561177e5761177e61344e565b6040519080825280602002602001820160405280156117a7578160200160208202803683370190505b50905060005b84602001515181101561181d576117e183866020015183815181106117d4576117d4613d3d565b6020026020010151611d44565b8282815181106117f3576117f3613d3d565b6001600160a01b03909216602092830291909101909101528061181581613d69565b9150506117ad565b509392505050565b6000806118328484611d85565b95945050505050565b81516000908190815b8181101561189957848051906020012086828151811061186657611866613d3d565b60200260200101518051906020012003611887579250600191506118a59050565b8061189181613d69565b915050611844565b50600019600092509250505b9250929050565b606061158a82840184613fa5565b6118c26133f0565b60006118d9836000015160400151600a6001611de7565b9050604051806101000160405280826003815181106118fa576118fa613d3d565b602002602001015181526020018260058151811061191a5761191a613d3d565b602002602001015181526020018260048151811061193a5761193a613d3d565b602002602001015181526020018260068151811061195a5761195a613d3d565b602002602001015181526020018260088151811061197a5761197a613d3d565b602002602001015181526020018260078151811061199a5761199a613d3d565b60200260200101518152602001826001815181106119ba576119ba613d3d565b60200260200101518152602001826009815181106119da576119da613d3d565b6020026020010151815250915050919050565b60006005826040516119ff9190613a9e565b9081526040519081900360200190205460ff1692915050565b600061158a611a28600284613fd9565b849060ff16611579565b600081604051602001611a459190613a9e565b6040516020818303038152906040528051906020012083604051602001611a6c9190613a9e565b6040516020818303038152906040528051906020012014905092915050565b600083818080805b8451811015611be157603060f81b858281518110611ab357611ab3613d3d565b01602001516001600160f81b03191610801590611af45750603960f81b858281518110611ae257611ae2613d3d565b01602001516001600160f81b03191611155b15611b37576030858281518110611b0d57611b0d613d3d565b0160200151611b1f919060f81c613d82565b611b2a85600a613f11565b611b349190613efe565b93505b8115611b4b5782611b4781613d69565b9350505b876001600160f81b031916858281518110611b6857611b68613d3d565b01602001516001600160f81b03191603611bcf578115611bca5760405162461bcd60e51b815260206004820152601c60248201527f537472696e6720686173206d756c7469706c6520646563696d616c730000000060448201526064016103a1565b600191505b80611bd981613d69565b915050611a93565b5085821115611c3d5760405162461bcd60e51b815260206004820152602260248201527f537472696e672068617320746f6f206d616e7920646563696d616c20706c6163604482015261657360f01b60648201526084016103a1565b611c478287613d82565b611c5290600a6140d6565b611c5c9084613f11565b98975050505050505050565b81516000908190815b818110156118995784868281518110611c8c57611c8c613d3d565b602002602001015103611ca6579250600191506118a59050565b80611cb081613d69565b915050611c71565b6060611ce88260000151604051602001611cd491815260200190565b604051602081830303815290604052612cb8565b611cf58360200151612e7b565b611d08846040015163ffffffff16612fe4565b611d1b856060015163ffffffff16612fe4565b604051602001611d2e94939291906140e2565b6040516020818303038152906040529050919050565b600080611d518451612fe4565b84604051602001611d6392919061415b565b604051602081830303815290604052805190602001209050611456818461310f565b81516000908190815b8181101561189957846001600160a01b0316868281518110611db257611db2613d3d565b60200260200101516001600160a01b031603611dd5579250600191506118a59050565b80611ddf81613d69565b915050611d8e565b606060008360ff1611611e465760405162461bcd60e51b815260206004820152602160248201527f4d61782076616c756573206d7573742062652067726561746572207468616e206044820152600360fc1b60648201526084016103a1565b8360008080808080611e598a60026141b6565b60ff166001600160401b03811115611e7357611e7361344e565b604051908082528060200260200182016040528015611e9c578160200160208202803683370190505b50905060005b604051806040016040528060138152602001723d9131b7b73a32bc3a20b2323932b9b9911d1160691b81525051811015611f7b57604051806040016040528060138152602001723d9131b7b73a32bc3a20b2323932b9b9911d1160691b8152508181518110611f1357611f13613d3d565b01602001516001600160f81b03191688611f2d838a613efe565b81518110611f3d57611f3d613d3d565b01602001516001600160f81b03191614611f695760405162461bcd60e51b81526004016103a1906141d9565b80611f7381613d69565b915050611ea2565b50604051806040016040528060138152602001723d9131b7b73a32bc3a20b2323932b9b9911d1160691b8152505186611fb49190613efe565b95508593505b86518610801561202a5750868681518110611fd757611fd7613d3d565b6020910101516001600160f81b031916601160f91b148015612028575086612000600188613d82565b8151811061201057612010613d3d565b6020910101516001600160f81b031916601760fa1b14155b155b15612041578561203981613d69565b965050611fba565b865186106120615760405162461bcd60e51b81526004016103a1906141d9565b8592508383036120c95760405162461bcd60e51b815260206004820152602d60248201527f45787472616374696f6e206661696c65642e20456d70747920636f6e7465787460448201526c416464726573732076616c756560981b60648201526084016103a1565b83816120d6876002613f11565b815181106120e6576120e6613d3d565b602090810291909101015282816120fe876002613f11565b612109906001613efe565b8151811061211957612119613d3d565b60209081029190910101528461212e81613d69565b955061213d9050600287613efe565b955060005b604051806040016040528060128152602001711131b7b73a32bc3a26b2b9b9b0b3b2911d1160711b8152505181101561221957604051806040016040528060128152602001711131b7b73a32bc3a26b2b9b9b0b3b2911d1160711b81525081815181106121b1576121b1613d3d565b01602001516001600160f81b031916886121cb838a613efe565b815181106121db576121db613d3d565b01602001516001600160f81b031916146122075760405162461bcd60e51b81526004016103a190614224565b8061221181613d69565b915050612142565b50604051806040016040528060128152602001711131b7b73a32bc3a26b2b9b9b0b3b2911d1160711b81525051866122519190613efe565b95508593505b8651861080156122c7575086868151811061227457612274613d3d565b6020910101516001600160f81b031916601160f91b1480156122c557508661229d600188613d82565b815181106122ad576122ad613d3d565b6020910101516001600160f81b031916601760fa1b14155b155b156122de57856122d681613d69565b965050612257565b865186106122fe5760405162461bcd60e51b81526004016103a190614224565b8592508383036123665760405162461bcd60e51b815260206004820152602d60248201527f45787472616374696f6e206661696c65642e20456d70747920636f6e7465787460448201526c4d6573736167652076616c756560981b60648201526084016103a1565b8381612373876002613f11565b8151811061238357612383613d3d565b6020908102919091010152828161239b876002613f11565b6123a6906001613efe565b815181106123b6576123b6613d3d565b6020908102919091010152846123cb81613d69565b95506123da9050600287613efe565b955060005b604051806040016040528060188152602001771132bc3a3930b1ba32b22830b930b6b2ba32b939911d3d9160411b8152505181101561250b57604051806040016040528060188152602001771132bc3a3930b1ba32b22830b930b6b2ba32b939911d3d9160411b815250818151811061245a5761245a613d3d565b01602001516001600160f81b03191688612474838a613efe565b8151811061248457612484613d3d565b01602001516001600160f81b031916146124f95760405162461bcd60e51b815260206004820152603060248201527f45787472616374696f6e206661696c65642e204d616c666f726d65642065787460448201526f726163746564506172616d657465727360801b60648201526084016103a1565b8061250381613d69565b9150506123df565b50604051806040016040528060188152602001771132bc3a3930b1ba32b22830b930b6b2ba32b939911d3d9160411b81525051866125499190613efe565b9550600091505b86518610156128f35786868151811061256b5761256b613d3d565b6020910101516001600160f81b031916601160f91b1480156125bc575086612594600188613d82565b815181106125a4576125a4613d3d565b6020910101516001600160f81b031916601760fa1b14155b6125d257856125ca81613d69565b965050612550565b816126da57866125e3876001613efe565b815181106125f3576125f3613d3d565b6020910101516001600160f81b031916601d60f91b14801561264357508661261c876002613efe565b8151811061262c5761262c613d3d565b6020910101516001600160f81b031916601160f91b145b61269b5760405162461bcd60e51b815260206004820152602360248201527f45787472616374696f6e206661696c65642e204d616c666f726d65642064617460448201526261203160e81b60648201526084016103a1565b6126a6600387613efe565b95506001915085816126b9876002613f11565b815181106126c9576126c9613d3d565b602002602001018181525050612550565b6000876126e8886001613efe565b815181106126f8576126f8613d3d565b6020910101516001600160f81b031916600b60fa1b148015612748575087612721886002613efe565b8151811061273157612731613d3d565b6020910101516001600160f81b031916601160f91b145b9050600088612758896001613efe565b8151811061276857612768613d3d565b6020910101516001600160f81b031916607d60f81b1480156127b8575088612791896002613efe565b815181106127a1576127a1613d3d565b6020910101516001600160f81b031916600b60fa1b145b905081806127c35750805b61281b5760405162461bcd60e51b815260206004820152602360248201527f45787472616374696f6e206661696c65642e204d616c666f726d65642064617460448201526230901960e91b60648201526084016103a1565b8783612828896002613f11565b612833906001613efe565b8151811061284357612843613d3d565b60209081029190910101528661285881613d69565b97505081156128d8578b60ff1687036128c25760405162461bcd60e51b815260206004820152602660248201527f45787472616374696f6e206661696c65642e204578636565646564206d61782060448201526576616c75657360d01b60648201526084016103a1565b6128cd600389613efe565b9750600093506128ec565b6128e3600389613efe565b975050506128f3565b5050612550565b8815612b005760005b6040518060400160405280601081526020016f11383937bb34b232b92430b9b4111d1160811b81525051811015612a11576040518060400160405280601081526020016f11383937bb34b232b92430b9b4111d1160811b815250818151811061296757612967613d3d565b01602001516001600160f81b03191688612981838a613efe565b8151811061299157612991613d3d565b01602001516001600160f81b031916146129ff5760405162461bcd60e51b815260206004820152602960248201527f45787472616374696f6e206661696c65642e204d616c666f726d65642070726f6044820152680ecd2c8cae490c2e6d60bb1b60648201526084016103a1565b80612a0981613d69565b9150506128fc565b506040518060400160405280601081526020016f11383937bb34b232b92430b9b4111d1160811b8152505186612a479190613efe565b95508581612a56876002613f11565b81518110612a6657612a66613d3d565b6020026020010181815250505b865186108015612aa85750868681518110612a9057612a90613d3d565b6020910101516001600160f81b031916601160f91b14155b15612abf5785612ab781613d69565b965050612a73565b8581612acc876002613f11565b612ad7906001613efe565b81518110612ae757612ae7613d3d565b602090810291909101015284612afc81613d69565b9550505b6000856001600160401b03811115612b1a57612b1a61344e565b604051908082528060200260200182016040528015612b4d57816020015b6060815260200190600190039081612b385790505b50905060005b86811015612ca85782612b67826002613f11565b81518110612b7757612b77613d3d565b6020026020010151955082816002612b8f9190613f11565b612b9a906001613efe565b81518110612baa57612baa613d3d565b6020026020010151945060008686612bc29190613d82565b6001600160401b03811115612bd957612bd961344e565b6040519080825280601f01601f191660200182016040528015612c03576020820181803683370190505b509050865b86811015612c75578a8181518110612c2257612c22613d3d565b01602001516001600160f81b03191682612c3c8a84613d82565b81518110612c4c57612c4c613d3d565b60200101906001600160f81b031916908160001a90535080612c6d81613d69565b915050612c08565b5080838381518110612c8957612c89613d3d565b6020026020010181905250508080612ca090613d69565b915050612b53565b509b9a5050505050505050505050565b6060600082516002612cca9190613f11565b6001600160401b03811115612ce157612ce161344e565b6040519080825280601f01601f191660200182016040528015612d0b576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b8451811015612e5157818251868381518110612d5757612d57613d3d565b0160200151612d69919060f81c613eea565b81518110612d7957612d79613d3d565b01602001516001600160f81b03191683612d94836002613f11565b81518110612da457612da4613d3d565b60200101906001600160f81b031916908160001a905350818251868381518110612dd057612dd0613d3d565b0160200151612de2919060f81c61426f565b81518110612df257612df2613d3d565b01602001516001600160f81b03191683612e0d836002613f11565b612e18906001613efe565b81518110612e2857612e28613d3d565b60200101906001600160f81b031916908160001a90535080612e4981613d69565b915050612d39565b5081604051602001612e639190614283565b60405160208183030381529060405292505050919050565b60408051602880825260608281019093526000919060208201818036833701905050905060005b6014811015612fbb576000612eb8826013613d82565b612ec3906008613f11565b612ece9060026140d6565b612ee1906001600160a01b038716613eea565b60f81b9050600060108260f81c612ef891906142ad565b60f81b905060008160f81c6010612f0f91906141b6565b8360f81c612f1d9190613fd9565b60f81b9050612f2b8261312b565b85612f37866002613f11565b81518110612f4757612f47613d3d565b60200101906001600160f81b031916908160001a905350612f678161312b565b85612f73866002613f11565b612f7e906001613efe565b81518110612f8e57612f8e613d3d565b60200101906001600160f81b031916908160001a9053505050508080612fb390613d69565b915050612ea2565b5080604051602001612fcd9190614283565b604051602081830303815290604052915050919050565b60608160000361300b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613035578061301f81613d69565b915061302e9050600a83613eea565b915061300f565b6000816001600160401b0381111561304f5761304f61344e565b6040519080825280601f01601f191660200182016040528015613079576020820181803683370190505b509050815b85156131065761308f600182613d82565b9050600061309e600a88613eea565b6130a990600a613f11565b6130b39088613d82565b6130be9060306142cf565b905060008160f81b9050808484815181106130db576130db613d3d565b60200101906001600160f81b031916908160001a9053506130fd600a89613eea565b9750505061307e565b50949350505050565b600080600061311e8585613166565b9150915061181d816131a8565b6000600a60f883901c10156131525761314960f883901c60306142cf565b60f81b92915050565b61314960f883901c60576142cf565b919050565b600080825160410361319c5760208301516040840151606085015160001a613190878285856132f2565b945094505050506118a5565b506000905060026118a5565b60008160048111156131bc576131bc6142e8565b036131c45750565b60018160048111156131d8576131d86142e8565b036132255760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016103a1565b6002816004811115613239576132396142e8565b036132865760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103a1565b600381600481111561329a5761329a6142e8565b03610acc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103a1565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561332957506000905060036133ad565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561337d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166133a6576000600192509250506133ad565b9150600090505b94509492505050565b5080546133c290613bf5565b6000825580601f106133d2575050565b601f016020900490600052602060002090810190610acc9190613435565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b5b8082111561344a5760008155600101613436565b5090565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156134865761348661344e565b60405290565b604051606081016001600160401b03811182821017156134865761348661344e565b60405161012081016001600160401b03811182821017156134865761348661344e565b604051601f8201601f191681016001600160401b03811182821017156134f9576134f961344e565b604052919050565b600082601f83011261351257600080fd5b81356001600160401b0381111561352b5761352b61344e565b61353e601f8201601f19166020016134d1565b81815284602083860101111561355357600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561358257600080fd5b81356001600160401b0381111561359857600080fd5b61145684828501613501565b6000602082840312156135b657600080fd5b5035919050565b6000602082840312156135cf57600080fd5b81356001600160401b038111156135e557600080fd5b8201610120818503121561158a57600080fd5b60005b838110156136135781810151838201526020016135fb565b50506000910152565b600081518084526136348160208601602086016135f8565b601f01601f19169290920160200192915050565b602081528151151560208201526020820151604082015260408201516060820152606082015160808201526000608083015160a08084015261145660c084018261361c565b60208152600061158a602083018461361c565b6020808252825182820181905260009190848201906040850190845b818110156136d8578351835292840192918401916001016136bc565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561373957603f1988860301845261372785835161361c565b9450928501929085019060010161370b565b5092979650505050505050565b80356001600160a01b038116811461316157600080fd5b60006020828403121561376f57600080fd5b61158a82613746565b803563ffffffff8116811461316157600080fd5b60006001600160401b038211156137a5576137a561344e565b5060051b60200190565b600082601f8301126137c057600080fd5b813560206137d56137d08361378c565b6134d1565b82815260059290921b840181019181810190868411156137f457600080fd5b8286015b848110156138335780356001600160401b038111156138175760008081fd5b6138258986838b0101613501565b8452509183019183016137f8565b509695505050505050565b600081830360a081121561385157600080fd5b613859613464565b9150608081121561386957600080fd5b50604051608081016001600160401b03828210818311171561388d5761388d61344e565b81604052843583526138a160208601613746565b60208401526138b260408601613778565b60408401526138c360608601613778565b6060840152918352608084013591808311156138de57600080fd5b50506138ec848285016137af565b60208301525092915050565b60006040828403121561390a57600080fd5b613912613464565b905081356001600160401b038082111561392b57600080fd5b908301906060828603121561393f57600080fd5b61394761348c565b82358281111561395657600080fd5b61396287828601613501565b82525060208301358281111561397757600080fd5b61398387828601613501565b60208301525060408301358281111561399b57600080fd5b6139a787828601613501565b604083015250835260208401359150808211156139c357600080fd5b506138ec8482850161383e565b600082601f8301126139e157600080fd5b813560206139f16137d08361378c565b82815260059290921b84018101918181019086841115613a1057600080fd5b8286015b8481101561383357613a2581613746565b8352918301918301613a14565b600080600060608486031215613a4757600080fd5b83356001600160401b0380821115613a5e57600080fd5b613a6a878388016138f8565b94506020860135915080821115613a8057600080fd5b50613a8d868287016139d0565b925050604084013590509250925092565b60008251613ab08184602087016135f8565b9190910192915050565b6000808335601e19843603018112613ad157600080fd5b8301803591506001600160401b03821115613aeb57600080fd5b6020019150368190038213156118a557600080fd5b60006101208236031215613b1357600080fd5b613b1b6134ae565b82356001600160401b0380821115613b3257600080fd5b613b3e36838701613501565b8352613b4c60208601613746565b602084015260408501356040840152606085013560608401526080850135915080821115613b7957600080fd5b613b8536838701613501565b608084015260a085013560a084015260c085013560c084015260e0850135915080821115613bb257600080fd5b613bbe36838701613501565b60e084015261010091508185013581811115613bd957600080fd5b613be536828801613501565b8385015250505080915050919050565b600181811c90821680613c0957607f821691505b602082108103613c2957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115613c7957600081815260208120601f850160051c81016020861015613c565750805b601f850160051c820191505b81811015613c7557828155600101613c62565b5050505b505050565b81516001600160401b03811115613c9757613c9761344e565b613cab81613ca58454613bf5565b84613c2f565b602080601f831160018114613ce05760008415613cc85750858301515b600019600386901b1c1916600185901b178555613c75565b600085815260208120601f198616915b82811015613d0f57888601518255948401946001909101908401613cf0565b5085821015613d2d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613d7b57613d7b613d53565b5060010190565b8181038181111561142357611423613d53565b818103613da0575050565b613daa8254613bf5565b6001600160401b03811115613dc157613dc161344e565b613dcf81613ca58454613bf5565b6000601f821160018114613e035760008315613deb5750848201545b600019600385901b1c1916600184901b178455611572565b600085815260209020601f19841690600086815260209020845b83811015613e3d5782860154825560019586019590910190602001613e1d565b5085831015613d2d5793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613e8f57600080fd5b81356001600160401b03811115613ea557600080fd5b611456848285016138f8565b600060208284031215613ec357600080fd5b815160ff8116811461158a57600080fd5b634e487b7160e01b600052601260045260246000fd5b600082613ef957613ef9613ed4565b500490565b8082018082111561142357611423613d53565b808202811582820484141761142357611423613d53565b600060208284031215613f3a57600080fd5b8151801515811461158a57600080fd5b60008451613f5c8184602089016135f8565b600560f91b9083018181528551909190613f7d816001850160208a016135f8565b60019201918201528351613f988160028401602088016135f8565b0160020195945050505050565b600060208284031215613fb757600080fd5b81356001600160401b03811115613fcd57600080fd5b611456848285016139d0565b60ff828116828216039081111561142357611423613d53565b600181815b8085111561402d57816000190482111561401357614013613d53565b8085161561402057918102915b93841c9390800290613ff7565b509250929050565b60008261404457506001611423565b8161405157506000611423565b816001811461406757600281146140715761408d565b6001915050611423565b60ff84111561408257614082613d53565b50506001821b611423565b5060208310610133831016604e8410600b84101617156140b0575081810a611423565b6140ba8383613ff2565b80600019048211156140ce576140ce613d53565b029392505050565b600061158a8383614035565b600085516140f4818460208a016135f8565b600560f91b9083018181528651909190614115816001850160208b016135f8565b600192019182018190528551614132816002850160208a016135f8565b6002920191820152835161414d8160038401602088016135f8565b016003019695505050505050565b7f19457468657265756d205369676e6564204d6573736167653a0a00000000000081526000835161419381601a8501602088016135f8565b8351908301906141aa81601a8401602088016135f8565b01601a01949350505050565b60ff81811683821602908116908181146141d2576141d2613d53565b5092915050565b6020808252602b908201527f45787472616374696f6e206661696c65642e204d616c666f726d656420636f6e60408201526a746578744164647265737360a81b606082015260800190565b6020808252602b908201527f45787472616374696f6e206661696c65642e204d616c666f726d656420636f6e60408201526a746578744d65737361676560a81b606082015260800190565b60008261427e5761427e613ed4565b500690565b61060f60f31b8152600082516142a08160028501602087016135f8565b9190910160020192915050565b600060ff8316806142c0576142c0613ed4565b8060ff84160491505092915050565b60ff818116838216019081111561142357611423613d53565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220d8b0315b21c387f3d04475c1c9481a85df6023234da76ead5ffb00186625244d64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addCurrency(bytes32)": {
        "params": {
          "_currencyCode": "Currency code to add"
        }
      },
      "addProviderHash(string)": {
        "params": {
          "_newProviderHash": "New provider hash to be added"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeCurrency(bytes32)": {
        "params": {
          "_currencyCode": "Currency code to remove"
        }
      },
      "removeProviderHash(string)": {
        "params": {
          "_removeProviderHash": "Provider hash to be removed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setTimestampBuffer(uint256)": {
        "params": {
          "_timestampBuffer": "The timestamp buffer for payments"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifyPayment((bytes,address,uint256,uint256,string,bytes32,uint256,bytes,bytes))": {
        "params": {
          "_verifyPaymentData": "Payment proof and intent details required for verification"
        },
        "returns": {
          "_0": "result The payment verification result containing success status, intent hash, release amount, payment currency and payment ID"
        }
      },
      "verifyProofSignatures(((string,string,string),((bytes32,address,uint32,uint32),bytes[])),address[],uint256)": {
        "params": {
          "_requiredThreshold": "Minimum number of signatures required from accepted witnesses",
          "_witnesses": "List of accepted witnesses",
          "proof": "Proof to be verified"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCurrency(bytes32)": {
        "notice": "OWNER ONLY: Adds a currency code to supported currencies"
      },
      "addProviderHash(string)": {
        "notice": "ONLY OWNER: Add provider hash string. Provider hash must not have been previously added."
      },
      "removeCurrency(bytes32)": {
        "notice": "OWNER ONLY: Removes a currency code from supported currencies"
      },
      "removeProviderHash(string)": {
        "notice": "ONLY OWNER: Remove provider hash string. Provider hash must have been previously added."
      },
      "setTimestampBuffer(uint256)": {
        "notice": "OWNER ONLY: Sets the timestamp buffer for payments. This is the amount of time in seconds that the timestamp can be off by and still be considered valid. Necessary to build in flexibility  with L2 timestamps."
      },
      "verifyPayment((bytes,address,uint256,uint256,string,bytes32,uint256,bytes,bytes))": {
        "notice": "ONLY RAMP: Verifies a reclaim proof of an offchain Cashapp payment. Ensures the right _intentAmount * _conversionRate was paid to _payeeDetails after _intentTimestamp + timestampBuffer on Cashapp. Additionaly, checks the right fiatCurrency was paid and the payment status is COMPLETE."
      },
      "verifyProofSignatures(((string,string,string),((bytes32,address,uint32,uint32),bytes[])),address[],uint256)": {
        "notice": "Verify proof generated by witnesses. Claim is constructed by hashing claimInfo (provider, context, parameters) to get the identifier. And then signing on (identifier, owner, timestamp, epoch) to get claim signature.  This function verifies a claim by performing the following checks on the claim - Calculates the hash of the claimInfo and checks if it matches the identifier in the claim - Checks if the signatures are valid and from the witnesses This function reverts if - No signatures are found on the proof - ClaimInfo hash does not match the identifier in the claim - Signatures are invalid (not from the witnesses)  DEV NOTE: This function does NOT validate that the claim provider hash is valid. That is the  responsibility of the caller. Ensure witnesses are unique otherwise the threshold can be met  with duplicate witnesses.  Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code    "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/verifiers/CashappReclaimVerifeir.sol:CashappReclaimVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13283,
        "contract": "contracts/verifiers/CashappReclaimVerifeir.sol:CashappReclaimVerifier",
        "label": "nullifierRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(INullifierRegistry)10131"
      },
      {
        "astId": 13285,
        "contract": "contracts/verifiers/CashappReclaimVerifeir.sol:CashappReclaimVerifier",
        "label": "timestampBuffer",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 13288,
        "contract": "contracts/verifiers/CashappReclaimVerifeir.sol:CashappReclaimVerifier",
        "label": "currencies",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 13292,
        "contract": "contracts/verifiers/CashappReclaimVerifeir.sol:CashappReclaimVerifier",
        "label": "isCurrency",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 13489,
        "contract": "contracts/verifiers/CashappReclaimVerifeir.sol:CashappReclaimVerifier",
        "label": "isProviderHash",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 13492,
        "contract": "contracts/verifiers/CashappReclaimVerifeir.sol:CashappReclaimVerifier",
        "label": "providerHashes",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(INullifierRegistry)10131": {
        "encoding": "inplace",
        "label": "contract INullifierRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}