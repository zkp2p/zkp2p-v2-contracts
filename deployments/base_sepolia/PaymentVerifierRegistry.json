{
  "address": "0xFC9FF90C16e73143e7AF9DB7c4BA96F2367ebE26",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "currencyCode",
          "type": "bytes32"
        }
      ],
      "name": "CurrencyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "currencyCode",
          "type": "bytes32"
        }
      ],
      "name": "CurrencyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "PaymentMethodAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "PaymentMethodRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_currencies",
          "type": "bytes32[]"
        }
      ],
      "name": "addCurrencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "_currencies",
          "type": "bytes32[]"
        }
      ],
      "name": "addPaymentMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "getCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentMethods",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "getVerifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_currencyCode",
          "type": "bytes32"
        }
      ],
      "name": "isCurrency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "isPaymentMethod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paymentMethods",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_currencies",
          "type": "bytes32[]"
        }
      ],
      "name": "removeCurrencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_paymentMethod",
          "type": "bytes32"
        }
      ],
      "name": "removePaymentMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "store",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d8e51ffd555a22e9559c17ac5ca65ba4e06b8ff2fd01087ce4b79fff1471412",
  "receipt": {
    "to": null,
    "from": "0x84e113087C97Cd80eA9D78983D4B8Ff61ECa1929",
    "contractAddress": "0xFC9FF90C16e73143e7AF9DB7c4BA96F2367ebE26",
    "transactionIndex": 12,
    "gasUsed": "909504",
    "logsBloom": "0x
    "blockHash": "0x18f578644d51a9af0ff34fceff502fea6e30496b02ce4ee177d0980e2a6bed86",
    "transactionHash": "0x1d8e51ffd555a22e9559c17ac5ca65ba4e06b8ff2fd01087ce4b79fff1471412",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 30306086,
        "transactionHash": "0x1d8e51ffd555a22e9559c17ac5ca65ba4e06b8ff2fd01087ce4b79fff1471412",
        "address": "0xFC9FF90C16e73143e7AF9DB7c4BA96F2367ebE26",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929"
        ],
        "data": "0x",
        "logIndex": 225,
        "blockHash": "0x18f578644d51a9af0ff34fceff502fea6e30496b02ce4ee177d0980e2a6bed86"
      }
    ],
    "blockNumber": 30306086,
    "cumulativeGasUsed": "5680350",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a8b7ca78066148b53bbe418be6e5d05f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"currencyCode\",\"type\":\"bytes32\"}],\"name\":\"CurrencyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"currencyCode\",\"type\":\"bytes32\"}],\"name\":\"CurrencyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"PaymentMethodAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"PaymentMethodRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_currencies\",\"type\":\"bytes32[]\"}],\"name\":\"addCurrencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_currencies\",\"type\":\"bytes32[]\"}],\"name\":\"addPaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"getCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentMethods\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"getVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_currencyCode\",\"type\":\"bytes32\"}],\"name\":\"isCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"isPaymentMethod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentMethods\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_currencies\",\"type\":\"bytes32[]\"}],\"name\":\"removeCurrencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentMethod\",\"type\":\"bytes32\"}],\"name\":\"removePaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"store\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addCurrencies(bytes32,bytes32[])\":{\"params\":{\"_currencies\":\"Array of currency code hashes (e.g., keccak256(\\\"USD\\\"), keccak256(\\\"EUR\\\"))\",\"_paymentMethod\":\"The payment method hash\"}},\"addPaymentMethod(bytes32,address,bytes32[])\":{\"params\":{\"_currencies\":\"Array of currency code hashes to support\",\"_paymentMethod\":\"The payment method hash; Hash the payment method name in lowercase\",\"_verifier\":\"The verifier address to add for this payment method\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeCurrencies(bytes32,bytes32[])\":{\"params\":{\"_currencies\":\"Array of currency code hashes to remove\",\"_paymentMethod\":\"The payment method hash\"}},\"removePaymentMethod(bytes32)\":{\"details\":\"Only callable by owner\",\"params\":{\"_paymentMethod\":\"The payment method to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCurrencies(bytes32,bytes32[])\":{\"notice\":\"Adds supported currencies for a specific payment method\"},\"addPaymentMethod(bytes32,address,bytes32[])\":{\"notice\":\"Adds a new payment method with processors and currencies\"},\"removeCurrencies(bytes32,bytes32[])\":{\"notice\":\"Removes supported currencies for a specific payment method\"},\"removePaymentMethod(bytes32)\":{\"notice\":\"Removes a payment method and associated configuration\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registries/PaymentVerifierRegistry.sol\":\"PaymentVerifierRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/external/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentVerifierRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IPaymentVerifierRegistry {\\n    function isPaymentMethod(bytes32 _paymentMethod) external view returns (bool);\\n    function getPaymentMethods() external view returns (bytes32[] memory);\\n    function getVerifier(bytes32 _paymentMethod) external view returns (address);\\n    function isCurrency(bytes32 _paymentMethod, bytes32 _currencyCode) external view returns (bool);\\n    function getCurrencies(bytes32 _paymentMethod) external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x3955b22879049d4446f520face69872dfcd365305d86ac8cd4747505899cbfbe\",\"license\":\"MIT\"},\"contracts/registries/PaymentVerifierRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Bytes32ArrayUtils } from \\\"../external/Bytes32ArrayUtils.sol\\\";\\nimport { IPaymentVerifierRegistry } from \\\"../interfaces/IPaymentVerifierRegistry.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract PaymentVerifierRegistry is Ownable, IPaymentVerifierRegistry {\\n\\n    using Bytes32ArrayUtils for bytes32[];\\n\\n    /* ============ Structs ============ */\\n\\n    struct PaymentMethodConfig {\\n        bool initialized;\\n        address verifier;\\n        mapping(bytes32 => bool) isCurrency;\\n        bytes32[] currencies;\\n    }\\n    \\n    /* ============ Events ============ */\\n\\n    event PaymentMethodAdded(bytes32 indexed paymentMethod);\\n    event PaymentMethodRemoved(bytes32 indexed paymentMethod);\\n    event CurrencyAdded(bytes32 indexed paymentMethod, bytes32 indexed currencyCode);\\n    event CurrencyRemoved(bytes32 indexed paymentMethod, bytes32 indexed currencyCode);\\n\\n    /* ============ State Variables ============ */\\n    mapping(bytes32 => PaymentMethodConfig) public store;\\n    bytes32[] public paymentMethods;\\n\\n    /* ============ Constructor ============ */\\n    constructor() Ownable() {}\\n    \\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Adds a new payment method with processors and currencies\\n     * @param _paymentMethod The payment method hash; Hash the payment method name in lowercase\\n     * @param _verifier The verifier address to add for this payment method\\n     * @param _currencies Array of currency code hashes to support\\n     */\\n    function addPaymentMethod(\\n        bytes32 _paymentMethod,\\n        address _verifier,\\n        bytes32[] calldata _currencies\\n    ) external onlyOwner {\\n        require(!store[_paymentMethod].initialized, \\\"Payment method already exists\\\");\\n        require(_verifier != address(0), \\\"Invalid verifier\\\");\\n        require(_currencies.length > 0, \\\"Invalid currencies length\\\");\\n        \\n        store[_paymentMethod].initialized = true;\\n        store[_paymentMethod].verifier = _verifier;\\n        \\n        addCurrencies(_paymentMethod, _currencies);\\n\\n        paymentMethods.push(_paymentMethod);\\n        \\n        emit PaymentMethodAdded(_paymentMethod);\\n    }\\n    \\n    /**\\n     * Removes a payment method and associated configuration\\n     * @param _paymentMethod The payment method to remove\\n     * @dev Only callable by owner\\n     */\\n    function removePaymentMethod(bytes32 _paymentMethod) external onlyOwner {\\n        require(store[_paymentMethod].initialized, \\\"Payment method does not exist\\\");\\n        \\n        bytes32[] memory currencies = store[_paymentMethod].currencies;\\n        for (uint256 i = 0; i < currencies.length; i++) {\\n            _removeCurrency(_paymentMethod, currencies[i]);\\n        }\\n        \\n        delete store[_paymentMethod];\\n        \\n        paymentMethods.removeStorage(_paymentMethod);\\n        \\n        emit PaymentMethodRemoved(_paymentMethod);\\n    }\\n\\n    /**\\n     * Adds supported currencies for a specific payment method\\n     * @param _paymentMethod The payment method hash\\n     * @param _currencies Array of currency code hashes (e.g., keccak256(\\\"USD\\\"), keccak256(\\\"EUR\\\"))\\n     */\\n    function addCurrencies(bytes32 _paymentMethod, bytes32[] calldata _currencies) public onlyOwner {\\n        require(store[_paymentMethod].initialized, \\\"Payment method does not exist\\\");\\n        require(_currencies.length > 0, \\\"Invalid currencies length\\\");\\n        \\n        for (uint256 i = 0; i < _currencies.length; i++) {\\n            _addCurrency(_paymentMethod, _currencies[i]);\\n        }\\n    }\\n    \\n    /**\\n     * Removes supported currencies for a specific payment method\\n     * @param _paymentMethod The payment method hash\\n     * @param _currencies Array of currency code hashes to remove\\n     */\\n    function removeCurrencies(bytes32 _paymentMethod, bytes32[] calldata _currencies) external onlyOwner {\\n        require(_currencies.length > 0, \\\"Invalid currencies length\\\");\\n        \\n        for (uint256 i = 0; i < _currencies.length; i++) {\\n            _removeCurrency(_paymentMethod, _currencies[i]);\\n        }\\n    }\\n\\n    /* ============ External View Functions ============ */\\n    \\n    function isPaymentMethod(bytes32 _paymentMethod) external view returns (bool) {\\n        return store[_paymentMethod].initialized;\\n    }\\n\\n    function getPaymentMethods() external view returns (bytes32[] memory) {\\n        return paymentMethods;\\n    }\\n    \\n    function getVerifier(bytes32 _paymentMethod) external view returns (address) {\\n        return store[_paymentMethod].verifier;\\n    }\\n\\n    function isCurrency(bytes32 _paymentMethod, bytes32 _currencyCode) external view returns (bool) {\\n        return store[_paymentMethod].isCurrency[_currencyCode];\\n    }\\n    \\n    function getCurrencies(bytes32 _paymentMethod) external view returns (bytes32[] memory) {\\n        return store[_paymentMethod].currencies;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _addCurrency(bytes32 _paymentMethod, bytes32 _currencyCode) internal {\\n        require(_currencyCode != bytes32(0), \\\"Invalid currency code\\\");\\n        require(!store[_paymentMethod].isCurrency[_currencyCode], \\\"Currency already exists\\\");\\n\\n        store[_paymentMethod].isCurrency[_currencyCode] = true;\\n        store[_paymentMethod].currencies.push(_currencyCode);\\n        emit CurrencyAdded(_paymentMethod, _currencyCode);\\n    }\\n    \\n    function _removeCurrency(bytes32 _paymentMethod, bytes32 _currencyCode) internal {\\n        require(store[_paymentMethod].isCurrency[_currencyCode], \\\"Currency does not exist\\\");\\n\\n        store[_paymentMethod].isCurrency[_currencyCode] = false;\\n        store[_paymentMethod].currencies.removeStorage(_currencyCode);\\n        emit CurrencyRemoved(_paymentMethod, _currencyCode);\\n    }\\n} \",\"keccak256\":\"0xb8a3c86bb7ff6ab4e11fdbc03fdfbf8b1a880acd3f002812300029a0420c10eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610f098061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063a9ce20aa11610066578063a9ce20aa1461022e578063dbcb300514610241578063eeb7b24814610254578063f2fde38b1461028257600080fd5b80638da5cb5b146101ce5780639072ec4e146101f3578063a1627cd01461022657600080fd5b80635e5658d2116100c85780635e5658d21461012a578063654cf88c14610153578063715018a6146101a55780638b90cdc9146101ad57600080fd5b806312b1fe93146100ef578063334c2ef31461010457806358aabeeb14610117575b600080fd5b6101026100fd366004610ccb565b610295565b005b610102610112366004610d17565b610362565b610102610125366004610ccb565b6104d1565b61013d610138366004610d17565b610535565b60405161014a9190610d30565b60405180910390f35b610186610161366004610d17565b60016020526000908152604090205460ff81169061010090046001600160a01b031682565b6040805192151583526001600160a01b0390911660208301520161014a565b61010261059a565b6101c06101bb366004610d17565b6105ae565b60405190815260200161014a565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161014a565b610216610201366004610d17565b60009081526001602052604090205460ff1690565b604051901515815260200161014a565b61013d6105cf565b61021661023c366004610d74565b610627565b61010261024f366004610db2565b61064d565b6101db610262366004610d17565b60009081526001602052604090205461010090046001600160a01b031690565b610102610290366004610e0c565b6107b8565b61029d610831565b60008381526001602052604090205460ff166103005760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e74206d6574686f6420646f6573206e6f7420657869737400000060448201526064015b60405180910390fd5b8061031d5760405162461bcd60e51b81526004016102f790610e2e565b60005b8181101561035c5761034a8484848481811061033e5761033e610e65565b9050602002013561088b565b8061035481610e91565b915050610320565b50505050565b61036a610831565b60008181526001602052604090205460ff166103c85760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e74206d6574686f6420646f6573206e6f7420657869737400000060448201526064016102f7565b60008181526001602090815260408083206002018054825181850281018501909352808352919290919083018282801561042157602002820191906000526020600020905b81548152602001906001019080831161040d575b5050505050905060005b8151811015610469576104578383838151811061044a5761044a610e65565b60200260200101516109a7565b8061046181610e91565b91505061042b565b50600082815260016020526040812080546001600160a81b0319168155906104946002830182610c54565b506104a29050600283610a79565b60405182907f0c831f94d9f98b9753b9607b5f1d9b1758d364178abe6e854ee65e97519c576490600090a25050565b6104d9610831565b806104f65760405162461bcd60e51b81526004016102f790610e2e565b60005b8181101561035c576105238484848481811061051757610517610e65565b905060200201356109a7565b8061052d81610e91565b9150506104f9565b60008181526001602090815260409182902060020180548351818402810184019094528084526060939283018282801561058e57602002820191906000526020600020905b81548152602001906001019080831161057a575b50505050509050919050565b6105a2610831565b6105ac6000610ba1565b565b600281815481106105be57600080fd5b600091825260209091200154905081565b6060600280548060200260200160405190810160405280929190818152602001828054801561061d57602002820191906000526020600020905b815481526020019060010190808311610609575b5050505050905090565b6000828152600160208181526040808420858552909201905290205460ff165b92915050565b610655610831565b60008481526001602052604090205460ff16156106b45760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e74206d6574686f6420616c72656164792065786973747300000060448201526064016102f7565b6001600160a01b0383166106fd5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103b32b934b334b2b960811b60448201526064016102f7565b8061071a5760405162461bcd60e51b81526004016102f790610e2e565b600084815260016020819052604090912080546001600160a81b0319166101006001600160a01b03871602179091179055610756848383610295565b6002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0185905560405185917fa8b7ef1cdeb8ecb963885f69266685a6c19778bdbe18fd82fb494d536ae5ede891a250505050565b6107c0610831565b6001600160a01b0381166108255760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f7565b61082e81610ba1565b50565b6000546001600160a01b031633146105ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f7565b806108d05760405162461bcd60e51b8152602060048201526015602482015274496e76616c69642063757272656e637920636f646560581b60448201526064016102f7565b6000828152600160208181526040808420858552909201905290205460ff161561093c5760405162461bcd60e51b815260206004820152601760248201527f43757272656e637920616c72656164792065786973747300000000000000000060448201526064016102f7565b60008281526001602081815260408084208585528084018352818520805460ff19168517905583835260020180549384018155845290832090910183905551829184917fc8f017475bca3c28175d8dbac507c62a1cd9150a8da85f8b39e8947d4f5464409190a35050565b6000828152600160208181526040808420858552909201905290205460ff16610a125760405162461bcd60e51b815260206004820152601760248201527f43757272656e637920646f6573206e6f7420657869737400000000000000000060448201526064016102f7565b60008281526001602081815260408084208585528084018352908420805460ff191690559285905252610a489060020182610a79565b604051819083907f55afc4295737baf9bf7759d75fb64ad7bf91bf4c80c9a6a22b23d61a7924b4b590600090a35050565b600080610ad584805480602002602001604051908101604052809291908181526020018280548015610aca57602002820191906000526020600020905b815481526020019060010190808311610ab6575b505050505084610bf1565b9150915080610b1e5760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b60448201526064016102f7565b8354600090610b2f90600190610eaa565b9050808314610b7457848181548110610b4a57610b4a610e65565b9060005260206000200154858481548110610b6757610b67610e65565b6000918252602090912001555b84805480610b8457610b84610ebd565b600190038181906000526020600020016000905590555050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b81516000908190815b81811015610c415784868281518110610c1557610c15610e65565b602002602001015103610c2f57925060019150610c4d9050565b80610c3981610e91565b915050610bfa565b50600019600092509250505b9250929050565b508054600082559060005260206000209081019061082e91905b80821115610c825760008155600101610c6e565b5090565b60008083601f840112610c9857600080fd5b50813567ffffffffffffffff811115610cb057600080fd5b6020830191508360208260051b8501011115610c4d57600080fd5b600080600060408486031215610ce057600080fd5b83359250602084013567ffffffffffffffff811115610cfe57600080fd5b610d0a86828701610c86565b9497909650939450505050565b600060208284031215610d2957600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610d6857835183529284019291840191600101610d4c565b50909695505050505050565b60008060408385031215610d8757600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610dad57600080fd5b919050565b60008060008060608587031215610dc857600080fd5b84359350610dd860208601610d96565b9250604085013567ffffffffffffffff811115610df457600080fd5b610e0087828801610c86565b95989497509550505050565b600060208284031215610e1e57600080fd5b610e2782610d96565b9392505050565b60208082526019908201527f496e76616c69642063757272656e63696573206c656e67746800000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610ea357610ea3610e7b565b5060010190565b8181038181111561064757610647610e7b565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220bfbbb335cd0e23742491fa926e03a88f34abca57af17f3d27465cc6d6626d4bd64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063a9ce20aa11610066578063a9ce20aa1461022e578063dbcb300514610241578063eeb7b24814610254578063f2fde38b1461028257600080fd5b80638da5cb5b146101ce5780639072ec4e146101f3578063a1627cd01461022657600080fd5b80635e5658d2116100c85780635e5658d21461012a578063654cf88c14610153578063715018a6146101a55780638b90cdc9146101ad57600080fd5b806312b1fe93146100ef578063334c2ef31461010457806358aabeeb14610117575b600080fd5b6101026100fd366004610ccb565b610295565b005b610102610112366004610d17565b610362565b610102610125366004610ccb565b6104d1565b61013d610138366004610d17565b610535565b60405161014a9190610d30565b60405180910390f35b610186610161366004610d17565b60016020526000908152604090205460ff81169061010090046001600160a01b031682565b6040805192151583526001600160a01b0390911660208301520161014a565b61010261059a565b6101c06101bb366004610d17565b6105ae565b60405190815260200161014a565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161014a565b610216610201366004610d17565b60009081526001602052604090205460ff1690565b604051901515815260200161014a565b61013d6105cf565b61021661023c366004610d74565b610627565b61010261024f366004610db2565b61064d565b6101db610262366004610d17565b60009081526001602052604090205461010090046001600160a01b031690565b610102610290366004610e0c565b6107b8565b61029d610831565b60008381526001602052604090205460ff166103005760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e74206d6574686f6420646f6573206e6f7420657869737400000060448201526064015b60405180910390fd5b8061031d5760405162461bcd60e51b81526004016102f790610e2e565b60005b8181101561035c5761034a8484848481811061033e5761033e610e65565b9050602002013561088b565b8061035481610e91565b915050610320565b50505050565b61036a610831565b60008181526001602052604090205460ff166103c85760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e74206d6574686f6420646f6573206e6f7420657869737400000060448201526064016102f7565b60008181526001602090815260408083206002018054825181850281018501909352808352919290919083018282801561042157602002820191906000526020600020905b81548152602001906001019080831161040d575b5050505050905060005b8151811015610469576104578383838151811061044a5761044a610e65565b60200260200101516109a7565b8061046181610e91565b91505061042b565b50600082815260016020526040812080546001600160a81b0319168155906104946002830182610c54565b506104a29050600283610a79565b60405182907f0c831f94d9f98b9753b9607b5f1d9b1758d364178abe6e854ee65e97519c576490600090a25050565b6104d9610831565b806104f65760405162461bcd60e51b81526004016102f790610e2e565b60005b8181101561035c576105238484848481811061051757610517610e65565b905060200201356109a7565b8061052d81610e91565b9150506104f9565b60008181526001602090815260409182902060020180548351818402810184019094528084526060939283018282801561058e57602002820191906000526020600020905b81548152602001906001019080831161057a575b50505050509050919050565b6105a2610831565b6105ac6000610ba1565b565b600281815481106105be57600080fd5b600091825260209091200154905081565b6060600280548060200260200160405190810160405280929190818152602001828054801561061d57602002820191906000526020600020905b815481526020019060010190808311610609575b5050505050905090565b6000828152600160208181526040808420858552909201905290205460ff165b92915050565b610655610831565b60008481526001602052604090205460ff16156106b45760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e74206d6574686f6420616c72656164792065786973747300000060448201526064016102f7565b6001600160a01b0383166106fd5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103b32b934b334b2b960811b60448201526064016102f7565b8061071a5760405162461bcd60e51b81526004016102f790610e2e565b600084815260016020819052604090912080546001600160a81b0319166101006001600160a01b03871602179091179055610756848383610295565b6002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0185905560405185917fa8b7ef1cdeb8ecb963885f69266685a6c19778bdbe18fd82fb494d536ae5ede891a250505050565b6107c0610831565b6001600160a01b0381166108255760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f7565b61082e81610ba1565b50565b6000546001600160a01b031633146105ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f7565b806108d05760405162461bcd60e51b8152602060048201526015602482015274496e76616c69642063757272656e637920636f646560581b60448201526064016102f7565b6000828152600160208181526040808420858552909201905290205460ff161561093c5760405162461bcd60e51b815260206004820152601760248201527f43757272656e637920616c72656164792065786973747300000000000000000060448201526064016102f7565b60008281526001602081815260408084208585528084018352818520805460ff19168517905583835260020180549384018155845290832090910183905551829184917fc8f017475bca3c28175d8dbac507c62a1cd9150a8da85f8b39e8947d4f5464409190a35050565b6000828152600160208181526040808420858552909201905290205460ff16610a125760405162461bcd60e51b815260206004820152601760248201527f43757272656e637920646f6573206e6f7420657869737400000000000000000060448201526064016102f7565b60008281526001602081815260408084208585528084018352908420805460ff191690559285905252610a489060020182610a79565b604051819083907f55afc4295737baf9bf7759d75fb64ad7bf91bf4c80c9a6a22b23d61a7924b4b590600090a35050565b600080610ad584805480602002602001604051908101604052809291908181526020018280548015610aca57602002820191906000526020600020905b815481526020019060010190808311610ab6575b505050505084610bf1565b9150915080610b1e5760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b60448201526064016102f7565b8354600090610b2f90600190610eaa565b9050808314610b7457848181548110610b4a57610b4a610e65565b9060005260206000200154858481548110610b6757610b67610e65565b6000918252602090912001555b84805480610b8457610b84610ebd565b600190038181906000526020600020016000905590555050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b81516000908190815b81811015610c415784868281518110610c1557610c15610e65565b602002602001015103610c2f57925060019150610c4d9050565b80610c3981610e91565b915050610bfa565b50600019600092509250505b9250929050565b508054600082559060005260206000209081019061082e91905b80821115610c825760008155600101610c6e565b5090565b60008083601f840112610c9857600080fd5b50813567ffffffffffffffff811115610cb057600080fd5b6020830191508360208260051b8501011115610c4d57600080fd5b600080600060408486031215610ce057600080fd5b83359250602084013567ffffffffffffffff811115610cfe57600080fd5b610d0a86828701610c86565b9497909650939450505050565b600060208284031215610d2957600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610d6857835183529284019291840191600101610d4c565b50909695505050505050565b60008060408385031215610d8757600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610dad57600080fd5b919050565b60008060008060608587031215610dc857600080fd5b84359350610dd860208601610d96565b9250604085013567ffffffffffffffff811115610df457600080fd5b610e0087828801610c86565b95989497509550505050565b600060208284031215610e1e57600080fd5b610e2782610d96565b9392505050565b60208082526019908201527f496e76616c69642063757272656e63696573206c656e67746800000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610ea357610ea3610e7b565b5060010190565b8181038181111561064757610647610e7b565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220bfbbb335cd0e23742491fa926e03a88f34abca57af17f3d27465cc6d6626d4bd64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addCurrencies(bytes32,bytes32[])": {
        "params": {
          "_currencies": "Array of currency code hashes (e.g., keccak256(\"USD\"), keccak256(\"EUR\"))",
          "_paymentMethod": "The payment method hash"
        }
      },
      "addPaymentMethod(bytes32,address,bytes32[])": {
        "params": {
          "_currencies": "Array of currency code hashes to support",
          "_paymentMethod": "The payment method hash; Hash the payment method name in lowercase",
          "_verifier": "The verifier address to add for this payment method"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeCurrencies(bytes32,bytes32[])": {
        "params": {
          "_currencies": "Array of currency code hashes to remove",
          "_paymentMethod": "The payment method hash"
        }
      },
      "removePaymentMethod(bytes32)": {
        "details": "Only callable by owner",
        "params": {
          "_paymentMethod": "The payment method to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCurrencies(bytes32,bytes32[])": {
        "notice": "Adds supported currencies for a specific payment method"
      },
      "addPaymentMethod(bytes32,address,bytes32[])": {
        "notice": "Adds a new payment method with processors and currencies"
      },
      "removeCurrencies(bytes32,bytes32[])": {
        "notice": "Removes supported currencies for a specific payment method"
      },
      "removePaymentMethod(bytes32)": {
        "notice": "Removes a payment method and associated configuration"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/registries/PaymentVerifierRegistry.sol:PaymentVerifierRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14057,
        "contract": "contracts/registries/PaymentVerifierRegistry.sol:PaymentVerifierRegistry",
        "label": "store",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(PaymentMethodConfig)14032_storage)"
      },
      {
        "astId": 14060,
        "contract": "contracts/registries/PaymentVerifierRegistry.sol:PaymentVerifierRegistry",
        "label": "paymentMethods",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(PaymentMethodConfig)14032_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PaymentVerifierRegistry.PaymentMethodConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(PaymentMethodConfig)14032_storage"
      },
      "t_struct(PaymentMethodConfig)14032_storage": {
        "encoding": "inplace",
        "label": "struct PaymentVerifierRegistry.PaymentMethodConfig",
        "members": [
          {
            "astId": 14022,
            "contract": "contracts/registries/PaymentVerifierRegistry.sol:PaymentVerifierRegistry",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 14024,
            "contract": "contracts/registries/PaymentVerifierRegistry.sol:PaymentVerifierRegistry",
            "label": "verifier",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14028,
            "contract": "contracts/registries/PaymentVerifierRegistry.sol:PaymentVerifierRegistry",
            "label": "isCurrency",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_bool)"
          },
          {
            "astId": 14031,
            "contract": "contracts/registries/PaymentVerifierRegistry.sol:PaymentVerifierRegistry",
            "label": "currencies",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}